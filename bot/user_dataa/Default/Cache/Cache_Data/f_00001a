(function () {
_.mixin({
  mapMatrix: function (vs, ns) {
    return _.map(_.zip.apply(null, vs), function (v) {
      return _.object(ns, v);
    });
  },
  mapRows: function (vs, ks) {
    return _.map(vs, function(v){
      return _.object(ks, v);
    });
  },
  padStart: function(str, cnt, pref) {
    str = String(str);
    if (cnt > str.length)  return pref.repeat(cnt - str.length) + str;
    return str;
  }
});String.prototype.toMoment = function(format) {
  format = format || 'DD.MM.YYYY';
  var result = moment(this.valueOf(), format);
  return result._isValid ? result : null;
};
Number.prototype.toFixedNoRounding = function(n) {
  const reg = new RegExp("^-?\\d+(?:\\.\\d{0," + n + "})?", "g")
  const a = this.toString().match(reg)[0];
  const dot = a.indexOf(".");
  if (dot === -1) { // integer, insert decimal dot and pad up zeros
      return a + "." + "0".repeat(n);
  }
  const b = n - (a.length - dot) + 1;
  return b > 0 ? (a + "0".repeat(b)) : a;
};function isMobile() {
  var mobiles = [/Android/i, /BlackBerry/i, /iPhone|iPad|iPod/i, /Opera Mini/i, /IEMobile/i];
  for (var i = 0; i < mobiles.length; i ++) {
    if (navigator.userAgent.match(mobiles[i]))
      return true;
  }
  return false;
}

function isWindows() {
  return !!navigator.userAgent.match(/Windows NT/i)
}

function isChrome() {
  var isChromium = window.chrome,
      winNav = window.navigator,
      vendorName = winNav.vendor,
      isOpera = winNav.userAgent.indexOf("OPR") > -1,
      isIEedge = winNav.userAgent.indexOf("Edge") > -1,
      isIOSChrome = winNav.userAgent.match("CriOS");

  if (isIOSChrome) {
    return true;
  } else if (
    isChromium !== null &&
    typeof isChromium !== "undefined" &&
    vendorName === "Google Inc." &&
    isOpera === false &&
    isIEedge === false
  ) {
    return true;
  } else {
    return false;
  }
}function assert(condition, message, callback) {
  if (!condition) {
    if (typeof(callback) === "function") callback();
    throw message || "unknown assert error";
  }
}

function textColor(backgroundHex) {
  if (!backgroundHex) return '#fff';
  var r = parseInt(backgroundHex.substr(1,2), 16);
  var g = parseInt(backgroundHex.substr(3,2), 16);
  var b = parseInt(backgroundHex.substr(5,2), 16);
  var res = Math.round((r * 299 + g * 587 + b * 114) / 1000);
  return res > 170 ? '#000' : '#fff';
}

function notify(message, type, from) {
  var icon = '';
  switch (type) {
    case 'info': icon = 'fa fa-info'; break;
    case 'warning': icon = 'fa fa-exclamation-triangle'; break;
    case 'danger': icon = 'fa fa-times'; break;
    default: icon = 'fa fa-check';
  }
  $.notify({
    message: message,
    icon: icon
  }, {
    type: type || "success",
    placement: {
      from: from || 'bottom'
    }
  });
}

function deepDefaults(value, def) {
  if (value instanceof Object && def instanceof Object) {
    let keys = Object.keys(def);
    for (let i = 0; i < keys.length; i ++) {
      let _key = keys[i],
          val = def[_key];
      if (value.hasOwnProperty(_key)) value[_key] = deepDefaults(value[_key], val);
      else value[_key] = val;
    }
  }
  return value;
}

function callScript(page, s) {
  try {
    eval('(function(page,s,biruni,callScript){' + s + '})(page)');
  } catch (e) {
    return {
      reason : e,
      type : 'script',
      message : 'Script error:<code>' + (e.message || e) + '</code>'
    };
  }
}

function hasTouchDevice() {
  return (('ontouchstart' in window) || (navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0));
}
var biruni = angular.module('biruni', ['ngFileUpload', 'gridster']);biruni.run(function($templateCache) {[['b-grid-filter-panel.html',`<div class="splitter" ng-style="a.grid.g.filterPanelDirection == 'left' && {'right':'0'} || {'left': '0px'}"></div>
<div class="b-grid-filter-panel" >
    <div class="header">
        <h5 class="title">{{ a.bConfig.langs.gf_filter_title }}</h5>
        <div class="actions">
          <button type="button" class="close" ng-click="toogleDirection()">
                <i class="fa" ng-class="{'fa-arrow-right': a.grid.g.filterPanelDirection == 'left', 'fa-arrow-left': a.grid.g.filterPanelDirection == 'right'}"></i>
          </button>
          <button type="button" class="close" ng-click="a.grid.g.openFilterPanel = false; a.grid.saveSettingChanges()">
            <svg class="cursor-pointer text-black-50" width="16" height="16" viewBox="0 0 16 16" fill="#000000"
                 xmlns="http://www.w3.org/2000/svg">
                <path d="M1.41427 0.335711L0.335022 1.41496L6.92227 7.99996L0.335022 14.5857L1.41502 15.665L8.00002 9.07771L14.5858 15.6642L15.6643 14.5857L9.07777 7.99996L15.6643 1.41421L14.585 0.334961L8.00002 6.92221L1.41427 0.335711Z"
                      fill="black" fill-opacity="0.9"/>
            </svg>
          </button>  
        </div>
    </div>
    <form class="body" name="filter-body">
        <div class="b-filter-actions-wrapper d-flex justify-content-between px-5 py-3">
            <div class="dropdown">
                <button type="button" class="btn btn-default dropdown-toggle mr-2"
                        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    {{ a.bGridFilter.container.name || a.bConfig.langs.gf_template }}
                </button>
                <div class="dropdown-menu">
                    <div ng-show="a.bGridFilter.newFilterMode" class="add-new-field-wrapper">
                        <input type="text" class="form-control"
                               placeholder="{{ a.bConfig.langs.gf_input_filter }}"
                               ng-model="a.bGridFilter.new_filter_name"
                               ng-keypress="a.bGridFilter.keypressNewFilter($event)"/>
                        <div class="w-100 d-flex justify-content-between mt-2"
                             ng-show="a.bGridFilter.newFilterMode">
                            <button type="button" class="btn btn-primary"
                                    ng-click="a.bGridFilter.saveNewFilter()">
                                {{ a.bConfig.langs.gf_save_template }}
                            </button>
                            <button type="button" class="btn btn-default"
                                    ng-click="a.bGridFilter.clearNewFilter()">
                                {{ a.bConfig.langs.cancel }}
                            </button>
                        </div>
                    </div>
                    <div class="dropdown-item cursor-pointer py-2 px-4 b-filter-add-item-action"
                         ng-hide="a.bGridFilter.newFilterMode"
                         ng-click="a.bGridFilter.addNewFilter($event); focusNesFilter()">
                        <i class="fas fa-save mr-4"></i>
                        {{ a.bConfig.langs.gf_new_template }}
                    </div>
                    <div ng-click="a.bGridFilter.setTemplate(item)"
                         ng-class="{'b-filter-current-item': item.code == a.bGridFilter.container.code}"
                         class="dropdown-item cursor-pointer py-2 px-4 d-flex justify-content-between"
                         ng-repeat="item in a.bGridFilter.templates">
                    <span class="b-filter-template-item-text-container">
                      <span class="b-filter-template-item-text" ng-hide="item.editTextMode">{{ item.name }}</span>
                      <input type="text" class="form-control" placeholder="{{ a.bConfig.langs.gf_input_filter }}"
                             ng-model="item.name"
                             ng-click="$event.stopPropagation()" ng-keypress="a.bGridFilter.editListName(item, $event)"
                             ng-show="item.editTextMode"/>
                    </span>
                        <div class="dropdown-item-actions" ng-hide="item.editTextMode">
                            <i class="b-filter-pin fas fa-thumbtack cursor-pointer text-hover-primary"
                               ng-class="{'b-filter-pinned' : item.pin == 'Y'}"
                               ng-click="a.bGridFilter.doAction(item, 'pin', $event)">
                            </i>
                            <i class="fas fa-pencil-alt cursor-pointer text-hover-primary"
                               ng-click="a.bGridFilter.doAction(item, 'edit', $event)"></i>
                            <i class="fas fa-trash cursor-pointer text-hover-danger"
                               ng-click="a.bGridFilter.doAction(item, 'remove', $event)"></i>
                        </div>
                        <div class="dropdown-item-actions" ng-show="item.editTextMode">
                            <i class="fas fa-save cursor-pointer text-hover-primary"
                               ng-click="a.bGridFilter.saveEditFilter(item)"></i>
                            <i class="fas fa-times cursor-pointer text-hover-danger"
                               ng-click="a.bGridFilter.cancelEditFilter(item)"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="b-filter-actions-right">
                <button type="button" class="btn btn-default btn-icon" b-toggle data-container="body"
                        data-title="{{ a.bConfig.langs.reset_to_default }}"
                        on-click-yes="a.bGridFilter.setDefault()">
                    <i b-toggle="tooltip" title="{{ a.bConfig.langs.set_default }}" class="fas fa-undo"></i>
                </button>
                <div class="btn-group filter-field-add-dropdown">
                    <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown"
                            aria-haspopup="true" aria-expanded="false">
                        {{ a.bConfig.langs.gf_add_filter_field }}
                    </button>
                    <div class="dropdown-menu dropdown-menu-right">
                        <div class="dropdown-item d-flex align-items-center w-100"
                             ng-repeat="f in a.bGridFilter.getUncheckedFilters()"
                             ng-click="a.bGridFilter.addFilterItem(f.name)">
                            {{ f.label }}
                        </div>
                        <div class="dropdown-item" ng-if="!a.bGridFilter.getUncheckedFilters().length">
                            {{ a.bConfig.langs.gf_no_filters }}
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="b-filter-wrapper">
            <div class="b-filter-inner-container">
                <div class="b-filter-field-container">
                    <div class="b-filter-field-container-list">
                        <div class="b-filter-pane-edit">
                            <div ng-repeat="f in a.bGridFilter.container.filters" b-control-field>
                                <div class="b-filter-item">
                                    <div class="b-filter-header">
                                        <p class="b-filter-item-title">
                                            <span> {{ f.label }} </span>
                                            <span ng-class="{'text-primary': f.checkbox_state == 'N', 'text-muted': f.checkbox_state == 'P'}"
                                                  class="b-filter-select-all p-0 pl-2"
                                                  ng-if="f.mode=='md' && f.count <= a.bGridFilter.md_max_count"
                                                  ng-click="a.bGridFilter.selectAll(f)">
                                                    {{f.checkbox_state == 'N' ? a.bConfig.langs.gf_select_all : a.bConfig.langs.gf_unselect_all}}
                                              </span>
                                        </p>
                                        <span class="b-filter-remove" ng-click="a.bGridFilter.deleteFilterItem(f)">
                                              <i class="fas fa-times"></i>
                                          </span>
                                    </div>
                                    <div class="b-filter-item-content">
                                        <div role="group" class="mr-4 filter-operator">
                                            <button type="button"
                                                    class="filter-type-btn btn btn-icon dropdown-toggle no-after"
                                                    ng-class="{'btn-default': !f.nulls, 'btn-warning': f.nulls}"
                                                    data-toggle="dropdown" tabindex="-1">
                                                <i ng-class="f.operation.class"></i>
                                            </button>
                                            <div class="dropdown-menu" x-placement="bottom-start">
                                                <a href class="dropdown-item" ng-repeat="oper in f.operations"
                                                   ng-click="f.operation = oper; f.op = oper.op">
                                                    <i ng-class="oper.class"></i>
                                                    {{ oper.text }}
                                                </a>
                                                <div class="dropdown-divider"></div>
                                                <a href class="px-4 text-dark d-block py-1"
                                                   ng-click="a.bGridFilter.selectNulls(f, '=', $event)">
                                                    <label class="checkbox">
                                                        <input type="checkbox" name="include-nulls"
                                                               ng-checked="f.nulls == '='">
                                                        <span>{{ a.bConfig.langs.gf_include_nulls }}</span>
                                                    </label>
                                                </a>
                                                <a href class="px-4 text-dark d-block py-1"
                                                   ng-click="a.bGridFilter.selectNulls(f, '<>', $event)">
                                                    <label class="checkbox">
                                                        <input type="checkbox" name="include-not-nulls"
                                                               ng-checked="f.nulls == '<>'">
                                                        <span>{{ a.bConfig.langs.gf_include_not_nulls }}</span>
                                                    </label>
                                                </a>
                                            </div>
                                        </div>
                                        <div class="filter-body">
                                            <div ng-if="f.mode=='search'">
                                                <input class="form-control" ng-model="f.val">
                                            </div>
                                            <div ng-if="f.mode=='rangeNumber'">
                                                <input class="form-control" ng-model="f.val.left" b-number
                                                       style="width: auto;display: inline-block;">
                                                <div style="width:14px;display: inline-block;">&nbsp;</div>
                                                <input class="form-control" ng-model="f.val.right" b-number
                                                       style="width:auto;display: inline-block;">
                                            </div>
                                            <div ng-if="f.mode=='rangeDate'">
                                                <input class="form-control" ng-model="f.val.left"
                                                       b-date-picker="{{ f.dateModelFormat }}"
                                                       view-format="{{ f.dateViewFormat }}"
                                                       style="width:auto;display: inline-block;">
                                                <div style="width:14px;display: inline-block;">&nbsp;</div>
                                                <input class="form-control" ng-model="f.val.right"
                                                       b-date-picker="{{ f.dateModelFormat }}"
                                                       view-format="{{ f.dateViewFormat }}"
                                                       style="width:auto;display: inline-block;">
                                            </div>
                                            <div ng-if="f.mode=='number'">
                                                <input class="form-control" ng-model="f.val" b-number
                                                       style="width:auto;display: inline-block;">
                                            </div>
                                            <div ng-if="f.mode=='date'">
                                                <input class="form-control" ng-model="f.val"
                                                       b-date-picker="{{ f.dateModelFormat }}"
                                                       view-format="{{ f.dateViewFormat }}"
                                                       style="width:auto;display: inline-block;">
                                            </div>
                                            <div ng-if="f.mode=='mc'">
                                                <label class="checkbox mt-2" ng-repeat="v in f.val">
                                                    <input type="checkbox" ng-model="v.val"/>
                                                    <span>{{ v.name }}</span>
                                                </label>
                                            </div>
                                            <div ng-if="f.mode=='mt'">
                                                <b-tree-select multiple origin="f.val" model="f.model"/>
                                            </div>
                                            <div ng-if="f.mode=='md'">
                                                <b-input multiple=3 name="{{ a.bGridFilter.query_name }}"
                                                         model="f.val" label="name" run-page="a.bGridFilter.page"
                                                         refer-name="{{ f.decorateWith }}"
                                                         on-change="a.bGridFilter.onQueryChange(f, query, value)"
                                                         on-select="a.bGridFilter.onSelect(f, row)"
                                                         on-delete="a.bGridFilter.onDelete(f, index, row)">
                                                    <div class="col-sm-24">{{row.name}}</div>
                                                </b-input>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="b-filter-bottom-wrapper">
            <div class="b-filter-bottom-actions">
                <button type="submit" class="btn btn-primary" ng-click="a.bGridFilter.run()">
                    {{ a.bConfig.langs.apply }}
                </button>
                <button type="button" class="btn btn-default" data-dismis="modal"
                        ng-click="a.bGridFilter.showAll()">{{ a.bConfig.langs.gf_show_all }}
                </button>
            </div>
        </div>
    </form>
</div>
`],['b-input.html',`<div class="b-input">
  <div class="input">
    <%= inputHtml %>
  </div>
  <div class="hint" ng-show="_$bInput.showHint">
    <%= headerHtml %>
    <div class="hint-body" b-when-scrolled="_$bInput.hasMoreRows && _$bInput.onMoreClick()">
      <div class="hint-item"
           ng-class="{active: $index === _$bInput.activeRowIndex}"
           ng-repeat="row in _$bInput.rows track by $index"
           ng-mouseover="_$bInput.onMouseOver($index)"
           ng-click="_$bInput.onSelectClick(row, $index)">
        <div class="form-row">
          <%= rowHtml %>
        </div>
      </div>
    </div>
    <div class="hint-footer" ng-show="_$bInput.isAdd || _$bInput.isView">
      <div class="left" ng-if="_$bInput.isAdd">
        <a href="" ng-click="_$bInput.onAddClick()">{{ ::_$bInput.langs.input_add }}</a><span ng-if="_$bInput.noRows && _$bInput.searchValue">&nbsp;&rarr;&nbsp;{{ _$bInput.searchValue }}</span>
      </div>
      <div class="right" ng-if="_$bInput.isView">
        <a href="" ng-click="_$bInput.onViewClick()">{{ ::_$bInput.langs.input_view }}</a>
      </div>
    </div>
    <div class="loading" ng-if="_$bInput.queryFetching" ng-click="$event.stopPropagation()">
      <div class="loading-message">
        <span>{{ ::_$bInput.langs.input_loading }}</span>&nbsp;<span><div class="spinner"></div></span>
      </div>
    </div>
  </div>
</div>`],['b-grid-controller.html',`<div class="grid-controller input-group rounded" ng-if="o.grid.g.enabled">
  <input ng-if="o.hasSearch" type="search" class="form-control" placeholder="{{ o.bConfig.langs.search_for }}"
    ng-model="o.searchValue" ng-keydown="onSearchKeyDown($event)" ng-blur="onSearchBlur()" />
  <div class="input-group-append">
    <button type="button" class="btn m-0 rounded-0 btn-default btn-icon"  ng-click="openFilter()">
      <i class="fa fa-filter" ng-class="o.filterClass"></i>
    </button>
    <button type="button" class="btn m-0 rounded-0 btn-default btn-icon" ng-if="o.grid.g.showFilterPanel"  ng-click="toggleFilterPanel()">
      <i class="fa fa-thumbtack"></i>
    </button>
    <button type="button" class="btn btn-default rounded-0" data-toggle="dropdown" aria-haspopup="true"
      aria-expanded="false">
      <i class="fas fa-arrow-down"></i> {{ o.rowPerPageTitle }}
    </button>
    <div class="dropdown-menu">
      <a class="dropdown-item" ng-class="{disabled: o.limit==50}" href ng-click="changeLimit(50)">50</a>
      <a class="dropdown-item" ng-class="{disabled: o.limit==100}" href ng-click="changeLimit(100)">100</a>
      <a class="dropdown-item" ng-class="{disabled: o.limit==500}" href ng-click="changeLimit(500)">500</a>
      <a class="dropdown-item" ng-class="{disabled: o.limit==1000}" href ng-click="changeLimit(1000)">1000</a>
    </div>
    <div
      class="btn-group page-list d-flex justify-content-center align-items-center border-left-0 border-right-0 rounded-0 m-0">
      <i class="fas fa-chevron-left" ng-class="{ 'active': hasPrevPage() }" ng-click="slidePageNo(false)"></i>
      <div class="page-num-list">
        <span ng-if="o.pages.length == 0">1</span>
        <span ng-class="{ 'active': pn == o.curPageNo }" ng-click="changePageNo(pn)"
          ng-repeat="pn in o.pages | limitTo: 5 : o.startPage - 1">{{ pn }}</span>
      </div>
      <i class="fas fa-chevron-right" ng-class=" { 'active' : hasNextPage() }" ng-click="slidePageNo(true)"></i>
    </div>

    <button type="button" class="btn btn-default btn-icon border-right-0 rounded-0 m-0" ng-click="reload()">
      <i class="fas fa-redo"></i>
    </button>
    <div class="btn-group m-0" role="group">
      <button type="button" class="btn btn-default dropdown-toggle no-after rounded-0 m-0 rounded-right"
        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <span class="fas fa-bars"></span>
      </button>
      <div class="dropdown-menu dropdown-menu-right">
        <a class="dropdown-item" href ng-click="openSortForm()">
          <i class="fa fa-sort-alpha-down my-auto mr-2"></i>
          {{ o.bConfig.langs.sort }}
        </a>
        <a class="dropdown-item" href ng-click="openGridSetting()">
          <i class="fa fa-table my-auto mr-2"></i>
          {{ o.bConfig.langs.grid_setting }}
        </a>
        <a class="dropdown-item" href ng-click="exportExcel()">
          <i class="fa fa-file-excel my-auto mr-2"></i>
          {{ o.bConfig.langs.export_excel }}
        </a>
      </div>
    </div>
  </div>
</div>`],['b-pg-controller.html',`<div class="grid-controller input-group">
  <input type="text" class="form-control" placeholder="{{ o.bConfig.langs.search_for }}"
    ng-keypress="onSearchKeyPress($event)" ng-model="g.searchValue" />

  <div class="input-group-append">
    <button type="button" class="btn m-0 rounded-0" ng-class="filterClass()" ng-click="openFilter()" ng-if="hasFilter()">
      <i class="fa fa-filter"></i>
      {{ o.bConfig.langs.gf_filter_title }}
    </button>
    <button type="button" class="btn btn-default m-0" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"
      tabindex=-1>
      <i class="fas fa-arrow-down"></i> {{ g.rowPerPageTitle }}
    </button>
    <ul class="dropdown-menu" style="left: auto; right: 0%; width: 15px;">
      <li ng-repeat="i in g.limits">
        <a class="dropdown-item" href ng-click="changeLimit(i)">
          <span ng-style="styleForCurrentLimit(i)">{{ i }}</span>
        </a>
      </li>
    </ul>

    <div class="btn-group border-left-0 border-right-0 rounded-0 page-list m-0">
      <i class="fa fa-chevron-left" ng-class="{ 'active': hasPrevPage() }" ng-click="slidePageNo(false)"></i>
      <div class="page-num-list">
        <span ng-if="g.pageNumbers.length == 0">1</span>
        <span ng-class="{ 'active': pn == g.currentPage }" ng-click="changePage(pn)"
          ng-repeat="pn in g.pageNumbers | limitTo: 5 : o.startPage - 1">{{ pn }}</span>
      </div>
      <i class="fa fa-chevron-right" ng-class="{ 'active': hasNextPage() }" ng-click="slidePageNo(true)"></i>
    </div>

    <div class="btn-group m-0" role="group">
      <button type="button" class="btn btn-default rounded-0 rounded-right dropdown-toggle no-after"
        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <span class="fa fa-bars"></span>
      </button>
      <div class="dropdown-menu dropdown-menu-right">
        <a class="dropdown-item" href ng-click="openPgGridSetting()"><i class="fa fa-table my-auto mr-2"></i> {{
          o.bConfig.langs.grid_setting }}</a>
      </div>
    </div>
  </div>
</div>`],['b-tdev.html',`<button type="button" class="btn">
  <i class="fa fa-edit"></i>
</button>
<ul class="sub-menu">
  <li>
    <label class="font-blue-dark"></label>
    <input type="text" class="form-control" value="" />
  </li>
</ul>`],['b-dropzone.html',`<div ngf-drop="uploadFile($files)" ngf-select="uploadFile($files)" ngf-drag-over-class="'b-drag-over'" <%= multiple %> <%= accept %> <%= keep %> >
  <div class="b-dropzone">
    <div class="d-flex justify-content-center align-items-center flex-column">
      <i class="flaticon-upload-1"></i>
      <h6 class="mb-0"> <%= drag_drop_text %> </h6>
      <h5 class="file" ng-repeat="file in $bDropzone.files">{{ file.name }}</h5>
    </div>
  </div>
</div>
`],['b-cropper.html',`<div class="modal" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false"
     ngf-multiple="false"
     ngf-pattern="'.jpg,.png,.jpeg'">
  <div class="modal-dialog" ngf-drop="o.uploadPhoto($file)" ngf-drag-over-class="'b-drag-over'">
    <div class="modal-content">
      <div class="modal-body row">
        <div class="b-cropper-container col-24" ng-class="{'col-sm-16': (o.round && o.square)}">
          <div>
            <img style="max-width: 100%;" ngf-src="o.no_photo" ng-show="!o.photo" />
            <img class="crop_main_photo" style="max-width: 100%;" ngf-src="o.photo" ng-show="o.photo" />
          </div>
          <div class="mt-4 mb-4">
            <b-dropzone on-select="o.uploadPhoto($file)" accept="'.png,.jpg,.jpeg'"></b-dropzone>
          </div>
        </div>
        <div class="b-cropper-preview col-24 col-sm-8" ng-if="o.round && o.square">
          <div class="b-cropper-preview-text">
            <h6>{{ o.bConfig.langs.crp_preview }}</h6>
          </div>
          <div class="b-cropper-preview-large">
            <img style="width: 100px;" ngf-src="o.no_photo" ng-show="!o.photo" />
            <img class="crop_large" ngf-src="o.photo" ng-show="o.photo"/>
          </div>
          <div class="b-cropper-preview-medium">
            <img style="width: 60px;" ngf-src="o.no_photo" ng-show="!o.photo" />
            <img class="crop_medium" ngf-src="o.photo" ng-show="o.photo"/>
          </div>
          <div class="b-cropper-preview-small">
            <img style="width: 35px;" ngf-src="o.no_photo" ng-show="!o.photo" />
            <img class="crop_small" ngf-src="o.photo" ng-show="o.photo"/>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-sm btn-primary" ng-disabled="!o.photo" ng-click="o.saveCrop()">{{ o.bConfig.langs.crp_save }}</button>
        <button type="button" class="btn btn-sm btn-default" ng-click="o.closeModal()">{{ o.bConfig.langs.crp_close }}</button>
      </div>
    </div>
  </div>
</div>
`],['b-tree-select.html',`<div class="b-tree-select">
  <div class="input">
    <%= inputHtml %>
  </div>
  <div class="hint" ng-show="_$bTree.showHint">
    <div class="hint-body b-tree-view"></div>
    <div class="d-flex justify-content-between" ng-show="_$bTree.hasMore">
      <span class="px-3 py-2 cursor-pointer" ng-click="_$bTree.showMore()">{{ ::_$bTree.langs.tree_more }}</span>
    </div>
    <!-- TODO: cannot load child rows of a hidden row as you cannot scroll -->
    <!-- <div class="hint-body b-tree-view" b-when-scrolled="_$bTree.hasMore && _$bTree.showMore()"></div> -->
    <div class="d-flex justify-content-between" ng-show="_$bTree.isAdd || _$bTree.isView">
      <a class="p-3" ng-if="_$bTree.isAdd" href="" ng-click="_$bTree.onAddClick()">{{ ::_$bTree.langs.tree_add }}</a>
      <a class="p-3" ng-if="_$bTree.isView" href="" ng-click="_$bTree.onViewClick()">{{ ::_$bTree.langs.tree_view }}</a>
    </div>
  </div>
</div>
`],['b-content-maker.html',`<div class="b-content-maker h-100" style="display: flex; flex-flow: column nowrap;">
  <div class="form-group">
    <div class="btn-group">
      <button type="button" class="btn btn-primary" ng-click="run()"><i class="fa fa-play"></i>&nbsp;{{ ::langs.cm_run }}</button>
      <button type="button" class="btn btn-primary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <span class="sr-only"></span>
      </button>
      <div class="dropdown-menu">
        <a class="dropdown-item" href ng-click="run('tab')"><i class="fa fa-window-restore my-auto mr-2"></i>{{ ::langs.cm_run_to_new_tab }}</a>
        <a class="dropdown-item" href ng-click="run('pdf')"><i class="fa fa-file-pdf my-auto mr-2"></i>{{ ::langs.cm_download_as_pdf }}</a>
      </div>
    </div>
    <a class="float-right ng-hide" href><i class="fa fa-question"></i>&nbsp;{{ ::langs.cm_help }}</a>
  </div>
  <div class="row" style="flex-grow: 1;">
    <div class="col-sm-4">
      <div class="data h-100" style="display: flex; flex-flow: column nowrap;">
        <h4>{{ ::langs.cm_data }}</h4>
        <pre class="border rounded bg-light p-2 mb-0" style="flex-grow: 1;">{{ data | json }}</pre>
      </div>
    </div>
    <div class="col-sm-10">
      <div class="workspace h-100" style="display: flex; flex-flow: column nowrap;">
        <h4>{{ ::langs.cm_workspace }}</h4>
        <div class="editor border rounded bg-light" style="flex-grow: 1;"></div>
      </div>
    </div>
    <div class="col-sm-10">
      <div class="preview h-100" style="display: flex; flex-flow: column nowrap;">
        <h4>{{ ::langs.cm_preview }}</h4>
        <div class="content border rounded bg-white p-2" style="flex-grow: 1;"></div>
      </div>
    </div>
  </div>
</div>`],['b-dynamic-field.html',`<!-- fields row -->
<div class="row" ng-if="_$bFields.q.is_valid">
  <div class="col-sm-{{ _$bFields.q.col_size }}" ng-class="{ 'mt-4': field_index > _$bFields.q.row_col_count - 1 }" ng-repeat="(field_index, field) in _$bFields.d.dynamic_fields">

    <!-- field label -->
    <label>{{ field.name }}<r ng-show="_$bFields.q.mode === 'E' && field.required === 'Y'" /></label>

    <!-- MODE: EDIT -->
    <div ng-if="_$bFields.q.mode === 'E'">
      <!-- field type: (N)umber -->
      <input
        type="text"
        class="form-control"
        ng-if="field.type === 'N'"
        ng-model="field.value"
        ng-required="field.required === 'Y'"
        b-maxlength="20"
        b-number
        precision="20"
        scale="6"
      />

      <!-- field type: Da(T)e -->
      <input
        type="text"
        class="form-control"
        ng-if="field.type === 'T'"
        ng-model="field.value"
        ng-required="field.required === 'Y'"
        b-date-picker="DD.MM.YYYY"
      />

      <!-- field type: (S)tring -->
      <input
        type="text"
        class="form-control"
        ng-if="field.type === 'S'"
        ng-model="field.value"
        ng-required="field.required === 'Y'"
        b-maxlength="4000"
      />

      <!-- field type: (C)heckbox -->
      <div ng-if="field.type === 'C'" ng-repeat="option in field.options">
        <label class="checkbox">
          <input
            type="checkbox"
            ng-model="option.selected"
            ng-change="_$bFields.onChangeCheckbox(field_index)"
            ng-true-value="'Y'"
            ng-false-value="'N'"
          />
          <span>{{ option.option_name }}</span>
        </label>
      </div>

      <!-- field type: (D)ropdown -->
      <b-input
        ng-if="field.type === 'D'"
        local-data="field.options"
        model="field.selected_option_name | option_name"
        model-key="field.selected_option_id | option_id"
        on-select="_$bFields.onSelectDropdown(row, field_index)"
        on-delete="_$bFields.onSelectDropdown({}, field_index)"
        required-key="field.required === 'Y'">
        {{ row.option_name }}
      </b-input>

      <!-- field type: Dropdown (M)ultiple -->
      <b-input
        ng-if="field.type === 'M'"
        local-data="field.options"
        model="field.selected_options"
        model-key="option_id"
        label="option_name"
        on-select="_$bFields.onChangeDropdownMultiple(row, field_index)"
        on-delete="_$bFields.onChangeDropdownMultiple(row, field_index)"
        required-key="field.required === 'Y'"
        multiple>
        {{ row.option_name }}
      </b-input>
    </div>

    <!-- MODE: VIEW -->
    <div ng-if="_$bFields.q.mode === 'V'">
      <!-- field type: (N)umber -->
      <span class="form-view text-right" ng-if="field.type === 'N'">{{ field.value | bNumber }}</span>

      <!-- field type: Da(T)e || (S)tring -->
      <span class="form-view" ng-if="_$bFields.contains(['T', 'S'], field.type)">{{ field.value }}</span>

      <!-- field type: (C)heckbox -->
      <div ng-if="field.type === 'C'" ng-repeat="option in field.options">
        <label class="checkbox">
          <input
            type="checkbox"
            ng-model="option.selected"
            ng-true-value="'Y'"
            ng-false-value="'N'"
            ng-disabled="true"
          />
          <span>{{ option.option_name }}</span>
        </label>
      </div>

      <!-- field type: (D)ropdown -->
      <span class="form-view" ng-if="field.type === 'D'">{{ field.selected_option_name }}</span>
      
      <!-- field type: Dropdown (M)ultiple -->
      <span class="form-view" ng-if="field.type === 'M'">{{ field.selected_option_names.join(', ') }}</span>
    </div>
  </div>
</div>
`],].forEach(x=> $templateCache.put(x[0], x[1]));});biruni.constant('bForms', {
  PROFILE                    : '/biruni/md/profile',
  DASHBOARD                  : '/biruni/intro/dashboard',
  CHANGE_PASSWORD            : '/biruni/md/change_password',
  FILE_MANAGER               : '/biruni/mf/file_manager',
  NOTIFICATION_LIST          : '/biruni/ms/notification_list',
  NOTIFICATION               : '/biruni/ms/notification',
  TASK_LIST                  : '/biruni/ms/task_list',
  TASK_ADD                   : '/biruni/ms/task+add',
  ACCESS_REQUEST             : '/biruni/md/user_access_request',
  SET_ACCESS                 : '/biruni/md/set_role_access',
  CUSTOM_TRANSLATE           : '/biruni/md/custom_translate',
  GRID_SETTING               : '/biruni/md/biruni/grid_setting',
  SESSION_CONFLICTS          : '/biruni/kauth/concurrent_session_list'
});
biruni.constant('bLangs', {
  ALERT_RECOMMENDED                        : "Recommended actions",
  ALERT_SOLUTIONS                          : "Solutions",
  ALL                                      : "All",
  APPLY                                    : "Apply",
  CANCEL                                   : "Cancel",
  CHANGE_PASSWORD                          : "Change password",
  CI_CONTACT_US                            : "Contact us",
  CI_KNOWLEDGE_BASE                        : "Knowledge base",
  CI_SUPPORT_PHONE_NUMBER                  : "Support phone number",
  CI_TELEGRAM_CHANNEL                      : "Telegram channel",
  CI_VIDEO_COURSE                          : "Video course",
  CI_WORK_DAY                              : "Work day",
  CLOSE                                    : "Close",
  CM_DATA                                  : "Data",
  CM_DOWNLOAD_AS_PDF                       : "Download as pdf",
  CM_HELP                                  : "Help",
  CM_PREVIEW                               : "Preview",
  CM_RUN                                   : "Run",
  CM_RUN_TO_NEW_TAB                        : "Run to new tab",
  CM_WORKSPACE                             : "Workspace",
  CONFIRM_LOGOUT                           : "Do you want to log out?",
  CONFIRM_LOGOUT_AND_FORGET                : "Do you want to log out and forget?",
  CRP_CLOSE                                : "Close",
  CRP_MASK                                 : "Mask",
  CRP_PREVIEW                              : "Preview",
  CRP_SAVE                                 : "Save",
  CRP_SHAPE                                : "Shape",
  DASHBOARD                                : "Dashboard",
  DARK                                     : "Dark",
  DAYS                                     : "days",
  DELETE                                   : "Delete",
  DONE                                     : "Done",
  DR_APPLY                                 : "Apply",
  DR_CANCEL                                : "Cancel",
  DR_CUSTOM_RANGE                          : "Custom Range",
  DR_FIRST_HALF_MONTH                      : "First Half-Month",
  DR_LAST_30_DAYS                          : "Last 30 Days",
  DR_LAST_7_DAYS                           : "Last 7 Days",
  DR_LAST_MONTH                            : "Last Month",
  DR_SECOND_HALF_MONTH                     : "Second Half-Month",
  DR_THIS_MONTH                            : "This Month",
  DR_TODAY                                 : "Today",
  DR_YESTERDAY                             : "Yesterday",
  DZ_DROP_FILE                             : "Drop file here or click the field",
  ERROR                                    : "Error",
  ER_FILIAL_SETTING                        : "Filial setting",
  ER_HEAD_SETTING                          : "Head setting",
  ERROR                                    : "Error",
  EXPORT_EXCEL                             : "Export excel",
  FAVORITE_LIST                            : "Favorite list",
  FB_ANONYMOUS                             : "Anonymous",
  FB_FEEDBACK_TYPE                         : "Feedback type",
  FB_FT_COMMENT                            : "Comment",
  FB_FT_SUGGESTION                         : "Suggestion",
  FB_MAKE_ANONYMOUS                        : "Make anonymous",
  FB_NOTE                                  : "Note",
  FB_RATE_US                               : "Please rate us",
  FB_SEND                                  : "Send",
  FB_SEND_FEEDBACK                         : "Send feedback",
  FB_THANK_YOU                             : "Thank you for sending feedback",
  FILE_MANAGER                             : "File manager",
  FILIALS                                  : "Filials",
  GF_ADD_FILTER_FIELD                      : "Add filter field",
  GF_EQUAL                                 : "Equal",
  GF_FILTER_TITLE                          : "Filter title",
  GF_GREATER_THAN                          : "Greater than",
  GF_GREATER_THAN_EQUAL                    : "Greater than equal",
  GF_INCLUDE_NOT_NULLS                     : "Include not nulls",
  GF_INCLUDE_NULLS                         : "Include nulls",
  GF_INPUT_FILTER                          : "Input filter name",
  GF_LESS_THAN                             : "Less than",
  GF_LESS_THAN_EQUAL                       : "Less than equal",
  GF_NEW_TEMPLATE                          : "New template",
  GF_NO_FILTERS                            : "No filters",
  GF_NOT_EQUAL                             : "Not equal",
  GF_NOT_SEARCH                            : "Not search",
  GF_NO_FILTERS                            : "No filters",
  GF_SAVE_TEMPLATE                         : "Save template",
  GF_SEARCH                                : "Search",
  GF_SELECT_ALL                            : "select all",
  GF_SHOW_ALL                              : "Show all",
  GF_TEMPLATE                              : "Template",
  GF_UNKNOWN                               : "Unknown filter",
  GF_UNSELECT_ALL                          : "unselect all",
  GRID_NO_RESULTS                          : "No data available",
  GRID_SETTING                             : "Grid setting",
  GS_APP_FONT                              : "App main font",
  GS_BACKGROUND                            : "Background",
  GS_INIT_FILIAL                           : "Filial",
  GS_INIT_FORM                             : "Form",
  GS_INIT_PROJECT                          : "Project",
  GS_MAIN_THEME                            : "Main theme",
  GS_SK_DASHBOARD                          : "Dashboard",
  GS_SK_SET_PARAMETERS                     : "Set parameters",
  GS_START_KIND                            : "Start work with",
  HOURES                                   : "hr.",
  INPUT_ADD                                : "Add",
  INPUT_LOADING                            : "Loading",
  INPUT_MORE                               : "Show more",
  INPUT_NO_DATA                            : "no data found",
  INPUT_PLACEHOLDER                        : "Search",
  INPUT_REMOVE_PIN_VALUE                   : "Remove default value",
  INPUT_SAVE_PIN_VALUE                     : "Save to default",
  INPUT_SELECTED                           : "selected items",
  INPUT_VIEW                               : "View",
  LIGHT                                    : "Light",
  LOCK_SCREEN                              : "Lock Screen",
  LOGOUT                                   : "Logout",
  LOGOUT_AND_FORGET                        : "Logout and forget",
  LR_GENERATING                            : "Generating",
  MAP_GROUPING                             : "Group markers",
  NEXT                                     : "Next",
  NO                                       : "No",
  NO_DATA_FOUND                            : "No data found",
  NOT_YOU                                  : "Not you",
  NOW                                      : "Now",
  NO_DATA_FOUND                            : "No data found",
  NT_SHOW_ALL                              : "Show all",
  PASSWORD                                 : "Password",
  PASSWORD_IS_INCORRECT                    : "Password is incorrect",
  PREF_CLEAR                               : "Preferences clear",
  PREVIOUS                                 : "Previous",
  PRINT                                    : "Print",
  PROFILE                                  : "Profile",
  PROJECTS                                 : "Projects",
  PV_DOWNLOAD                              : "Download",
  PV_NOT_SUPPORT_VIDEO                     : "Your browser does not support the video tag",
  PV_UNABLE_TO_PREVIEW                     : "This file cannot be previewed",
  PV_UNAVAILABLE                           : "Unavailable",
  QA_ALL_TASKS                             : "All tasks",
  QA_CREATE_TASK                           : "Create new task",
  QLIK_NO_LICENSE                          : "No Qlik license",
  QS_GENERAL_SETTINGS                      : "General settings",
  QS_MESSAGES                              : "Messages",
  QS_SETTINGS                              : "Settings",
  QS_VIEW_SETTINGS                         : "Viewing settings",
  QUICK_PANEL                              : "Quick panel",
  RELOGIN                                  : "Relogin",
  REPORT_LIST                              : "Report list",
  RESET_TO_DEFAULT                         : "Reset to default?",
  ROUTE                                    : "Route",
  SB_NO_RESULTS                            : "No results",
  SB_NOT_SPECIFIED                         : "not specified",
  SB_NO_RESULTS                            : "Nothing found.",
  SB_RESULT_ALL                            : "All",
  SB_RESULT_FORMS                          : "Forms",
  SB_SEARCH_QUERY                          : "Search query",
  SB_SHOW_MORE                             : "show more",
  SEARCH                                   : "Search",
  SEARCH_FILIAL                            : "Search filial",
  SEARCH_FOR                               : "Search for ...",
  SELECT_DATE                              : "Select date",
  SESSION_EXPIRED                          : "Your session is about to expired",
  SESSION_LEFT                             : "seconds left",
  SESSION_REDIRECTION                      : "Redirection",
  SESSION_SECONDS                          : "seconds",
  SESSION_STAY                             : "Session stay",
  SESSION_TIMEOUT                          : "Session timeout",
  SESSION_TIMEOUT_TITLE                    : "Session timeout notification",
  SET_DEFAULT                              : "Set default field",
  SH_ACCESS_REQUEST                        : "Send access request",
  SH_ADD_FAVORITE                          : "Add to favorite",
  SH_ADD_TASK_CURRENT_FORM                 : "Add task for this form",
  SH_CUSTOM_TRANSLATE                      : "Custom translate",
  SH_OPEN_HELP                             : "Open help",
  SH_REMOVE_FAVORITE                       : "Remove from favorite",
  SH_SET_ACCESS                            : "Set access to roles",
  SH_SHOW_TOUR                             : "Show tour",
  SIGN_IN                                  : "Sign in",
  SORT                                     : "Sort",
  SORT_ASCENDING                           : "Ascending",
  SORT_DESCENDING                          : "Descending",
  SORT_IT                                  : "It",
  SORT_OFF                                 : "Switched off",
  SORT_PIN                                 : "Pin as default",
  SORT_UNPIN                               : "Unpin",
  ST_CHAT                                  : "Chat",
  ST_DOCUMENTATION                         : "Documentation",
  ST_SETTINGS                              : "Settings",
  SYSTEM                                   : "System",
  TASKS                                    : "Tasks",
  TB_BARCODE_HINT                          : "Scan the barcode to find the object",
  TB_BARCODE_NO_RESULT                     : "Nothing found",
  TB_BARCODE_SCANNER                       : "Barcode scanner",
  TM_MESSAGES                              : "Messages",
  TM_NOTIFICATIONS                         : "Notifications",
  TM_QUICK_ACTIONS                         : "Quick actions",
  TOGGLE_FULL_SCREEN                       : "Toggle full-screen",
  TREE_ADD                                 : "Add",
  TREE_MORE                                : "Show more",
  TREE_VIEW                                : "View",
  TS_CHECK_ALL                             : "Check all",
  TS_UNCHECK_ALL                           : "Uncheck all",
  UNAUTHORIZED                             : "Unauthorized access",
  UPLOAD_FILE_CHANGED                      : "Uploaded file changed",
  USER                                     : "User name",
  YES                                      : "Yes"
});
biruni.constant('bRoutes', {
  LOGIN                         : 'b/biruni/s$log_in',
  LOGOUT                        : 'b/biruni/m$logout',
  LOGOUT_AND_FORGET             : 'b/biruni/m$logout_and_forget',
  CHECK_SESSION                 : 'b/biruni/s$check_session',
  SAVE_FILE                     : 'b/biruni/m:save_temp_file',
  LOAD_FILE                     : 'b/biruni/m:load_file_v2',
  LOAD_IMAGE                    : 'b/biruni/m:load_image_v2?_v=1', // (_v=version) cache-busting
  DOWNLOAD_FILE                 : 'b/biruni/m:download_file_v2',
  PREFERENCES_CLEAR             : 'b/biruni/m:preferences_clear',
  FAVORITE                      : 'b/biruni/m:favorite',
  NOTIFICATIONS                 : 'b/biruni/m:notifications',
  ALERTS                        : 'b/biruni/m:alerts',
  SESSION                       : 'b/biruni/m:session',
  SESSION_INFO                  : 'util/session_info',
  LOAD_GRID_DATA                : 'b/biruni/m:load_grid_data',
  LOAD_USER_SETTING             : 'b/biruni/m:load_user_setting',
  SAVE_USER_SETTING             : 'b/biruni/m:save_user_setting',
  LOAD_USER_LARGE_SETTING       : 'b/biruni/m:load_user_large_setting',
  SAVE_USER_LARGE_SETTING       : 'b/biruni/m:save_user_large_setting',
  SEARCH_INFO                   : 'b/biruni/m:search_info',
  SEARCH_FORM_QUERY             : '/biruni/m:search_form_query',
  SEARCH_BARCODE_QUERY          : '/biruni/m:search_barcode_query',
  SEARCH_QUERY                  : '/biruni/m:search_query',
  LOAD_CUSTOM_HTML_TRANSLATIONS : 'b/biruni/m:load_custom_html_translations',
  UPLOAD_URL_PARAMS             : '/biruni/m:upload_url_params',
  SEND_FEEDBACK                 : 'b/biruni/m:send_feedback',
  LOAD_EIMZO_API_KEY            : 'b/biruni/m:load_eimzo_api_key',
  FILE_EXISTS                   : 'b/biruni/m:file_exists',
  FRESHCHAT_USER_UPDATE         : 'b/biruni/m:freshchat_user_update',
  QLIK_AUTH                     : 'qlik_session',
  RUN_ONLYOFFICE                : '/biruni/m:run_onlyoffice',
  SUPERSET_GET_DASHBOARD_INFOS  : 'b/biruni/m:get_superset_dashboard_infos',
  SUPERSET_GET_GUEST_TOKEN      : 'b/biruni/m:get_superset_guest_token',
});
biruni.constant('bAssets', {
  "jquery-minicolors": {
    script: "assets/jquery-minicolors/jquery.minicolors.min.js",
    css: "assets/jquery-minicolors/jquery.minicolors.css"
  },
  "intlTelInput": {
      script: "assets/intl-tel-input/intlTelInput.min.js",
      css: "assets/intl-tel-input/intlTelInput.min.css"
  },
  "country-list": {
    script: "assets/country-list/variousCountryListFormats.js"
  },
  "jquery-orgchart": {
    script: "assets/jquery-orgchart-v3.7.0/jquery.orgchart.js",
    css: ["assets/jquery-orgchart-v3.7.0/jquery.orgchart.css",
          "assets/jquery-orgchart-v3.7.0/jquery.orgchart.gws-custom.css"]
  },
  "jquery-scannerdetection": {
    script: "assets/jquery/jquery.scannerdetection.js"
  },
  "jquery-pulsate": {
    script: "assets/jquery/jquery.pulsate.min.js"
  },
  "jquery-resize": {
    script: "assets/jquery/jquery.resize.js"
  },
  "fa-animations": {
    css: "assets/fontawesome/css/fa-animations.min.css"
  },
  "bootstrap-treeview": {
    script: "assets/bootstrap/js/bootstrap-treeview.min.js",
    css: "assets/bootstrap/css/bootstrap-treeview.min.css"
  },
  "fullcalendar": {
    script: ["assets/fullcalendar/core/main.min.js",
             "assets/fullcalendar/dayGrid/main.min.js",
             "assets/fullcalendar/interaction/main.min.js"],
    css: ["assets/fullcalendar/core/main.min.css",
          "assets/fullcalendar/dayGrid/main.min.css"]
  },
  "fullcalendar-timeGrid": {
    script: "assets/fullcalendar/timeGrid/main.min.js",
    css: "assets/fullcalendar/timeGrid/main.min.css"
  },
  "fullcalendar-list": {
    script: "assets/fullcalendar/list/main.min.js",
    css: "assets/fullcalendar/list/main.min.css"
  },
  "jquery-counterup": {
    script: "assets/counterup/jquery.counterup.min.js"
  },
  "jquery-waypoints": {
    script: "assets/counterup/jquery.waypoints.min.js"
  },
  "xlsx": {
    script: "assets/xlsx/xlsx.full.min.js"
  },
  "amcharts": {
    script: "assets/amcharts/amcharts.js"
  },
  "amchart-serial":{
    script: "assets/amcharts/serial.js"
  },
  "amchart-funnel":{
    script: "assets/amcharts/funnel.js"
  },
  "amchart-pie":{
    script: "assets/amcharts/pie.js"
  },
  "amchart-radar":{
    script: "assets/amcharts/radar.js"
  },
  "amchart-xy":{
    script: "assets/amcharts/xy.js"
  },
  "amchart-gantt":{
    script: "assets/amcharts/gantt.js"
  },
  "amchart-gauge":{
    script: "assets/amcharts/gauge.js"
  },
  "amchart-export": {
    script: "assets/amcharts/plugins/export/export.min.js",
    css: "assets/amcharts/plugins/export/export.css"
  },
  "amchart-light": {
    script: "assets/amcharts/themes/light.js"
  },
  "cropper": {
    script: "assets/cropper/cropper.min.js",
    css: "assets/cropper/cropper.min.css"
  },
  "qrcode": {
    script: "assets/qrcode/qrcode.min.js"
  },
  "html2canvas": {
    script: "assets/html2canvas/html2canvas.min.js"
  },
  "jkanban": {
    script: "assets/jkanban/jkanban.min.js",
    css: "assets/jkanban/jkanban.min.css"
  },
  "nicescrollbar": {
    script: "assets/jquery/jquery.nicescroll.min.js"
  },
  "amcharts4": {
    script: ["assets/amcharts4/core.js", "assets/amcharts4/charts.js"]
  },
  "amcharts4-theme-animated": {
    script: "assets/amcharts4/themes/animated.js"
  },
  "konva": {
    script: "assets/konva/konva.min.js"
  },
  "webdatarocks": {
    script: "assets/webdatarocks/webdatarocks.js",
    css: "assets/webdatarocks/webdatarocks.min.css"
  },
  "webdatarocks-toolbar": {
    script: "assets/webdatarocks/webdatarocks.toolbar.min.js"
  },
  "webdatarocks-lightblue-theme": {
    css: "assets/webdatarocks/theme/lightblue/webdatarocks.min.css"
  },
  "inputmask": {
    script: "assets/inputmask/jquery.inputmask.min.js"
  },
  "e-imzo": {
    script: ["assets/e-imzo/e-imzo.js", "assets/e-imzo/e-imzo-client.js"]
  },
  "exact-math": {
    script: ["assets/exact-math/exact-math.js", "assets/exact-math/biruni-exact-math.js"]
  },
  "ace": {
    script: "assets/ace/ace.js"
  },
  "ace-mode-html": {
    script: ["assets/ace/mode-html.js", "assets/ace/worker-html.js"]
  },
  "html2pdf": {
    script: ["assets/html2pdf/html2pdf.min.js"]
  },
  "ckeditor5": {
    script: [
      "assets/ckeditor5/translations/ru.js",
      "assets/ckeditor5/ckeditor.js"
    ]
  },
  "compressor": {
    script: [
      "assets/compressor/compressor.min.js"
    ]
  },
  "hull": {
    script: "assets/hull/hull.js"
  },
  "jspdf": {
    script: "assets/jspdf/jspdf-2.5.1.umd.min.js"
  },
  "tweetnacl": {
    script: "assets/crypto/tweetnacl/nacl.min.js"
  },
  "driverjs": {
    script: "assets/driverjs/driver.js.iife.js",
    css: "assets/driverjs/driver.css"
  },
  "superset": {
    script: "assets/superset/index.js",
  },
});
biruni.constant('bFonts', [{
  fontFamily: 'Ubuntu'
}, {
  fontFamily: 'Comfortaa'
}, {
  fontFamily: 'Open Sans'
}, {
  fontFamily: 'Alegreya',
  letterSpacing: '0.5px'
}, {
  fontFamily: 'Bender',
  letterSpacing: '0.5px'
}, {
  fontFamily: 'DidactGothic',
  letterSpacing: '0.3px'
}, {
  fontFamily: 'Gabriela'
}, {
  fontFamily: 'Lora'
}, {
  fontFamily: 'Marmelad'
}, {
  fontFamily: 'Neucha',
  letterSpacing: '0.7px'
}, {
  fontFamily: 'Roboto'
}, {
  fontFamily: 'Segoe Ui'
}, {
  fontFamily: 'Vollkorn',
  letterSpacing: '0.3px'
}]);
biruni.constant('bThemes', {
  main: ['default', 'classic', 'white', 'greenwhite', 'socialblue', 'lightpink', 'deep-purple'],
  background: ['default', 'classic', 'white', 'mintcream', 'aliceblue', 'snow']
});
biruni.constant('bConstants', {
    CELL_SHARE: 4.166666666666667,
    BROADCAST_ALERT_EVENT: 'bOnAlertEvent'
});biruni.filter('bNumber', function () {
  function allTrim(val) {
    return val.replace(/\s+/g, ' ').trim();
  }

  function formatNumber(val, scale, fill_with_zero) {
    if (!val) {
      return val;
    }

    val = allTrim(String(val));

    var sign = '';

    if (val[0] === '-') {
      sign = '-';
    }

    val = val.replace(/[^0-9.]/g, '').replace(/^[0]+/, '').split('.');

    var a = val[0],
        b = val[1] || '',
        k = a.length % 3;

    a = ((k ? a.substr(0, k) + ' ' : '') + a.substr(k).replace(/(\d{3})(?=\d)/g, '$1 ')).trim();

    if (a === '') {
      a = '0';
    }

    if (scale && b.length <= scale && fill_with_zero) {
      b = b.padEnd(scale, '0');
    } else {
      b = b.replace(/[0]+$/, '');
    }

    if (b.length) {
      val = a + '.' + b;
    } else {
      val = a;
    }

    return sign + val;
  }

  return formatNumber;
});biruni.factory('bUtil', function() {
  function isObject (value) {
    return value && typeof value === 'object' && value.constructor === Object;
  }

  function isArray (value) {
    return value && typeof value === 'object' && value.constructor === Array;
  }

  function str2(val) {
    return val < 10 ? '0' + val: val;
  }

  function timeToMinutes(time) {
    if (time === undefined || time === null) return null;
    time = String(time);
    [hour, minute] = time.split(':');
    if (minute === undefined) return null;
    return parseInt(hour) * 60 + parseInt(minute);
  }

  function minutesToTime(minutes) {
    minutes = parseInt(minutes);
    if (isNaN(minutes)) return null;
    return [str2(parseInt(minutes / 60)), str2(minutes % 60)].join(':');
  }

  function doConvert(converter) {
    return function () {
      if (arguments.length == 1) return converter(arguments[0]);
      if (arguments.length >= 2) {
        obj = null; keys = null;
        for (let i = 0; i < 2; i ++) {
          if (isObject(arguments[i])) obj = arguments[i];
          else
          if (isArray(arguments[i])) keys = arguments[i];
        }
        if (obj === null || keys === null) return null;

        for (let i = 0; i < keys.length; i ++) {
          let key = keys[i];
          if (obj.hasOwnProperty(key)) {
            let new_value = converter(obj[key]);
            if (new_value !== null) obj[key] = new_value;
          }
        }
        return obj;
      }
      return null;
    }
  }

  return {
    timeToMinutes: doConvert(timeToMinutes),
    minutesToTime: doConvert(minutesToTime)
  };
});biruni.factory('bRequire', function($q, bAssets, bAlert) {
  var assets = {};
  var lazyPromises = {};

  _.each(bAssets, (val, key) => {
    assets[key.toLowerCase()] = val;
  });

  function createScript(src) {
    var script = document.createElement("script");

    script.src = src;

    return script;
  }

  function createLink(href) {
    var link = document.createElement("link");

    link.href = href;
    link.rel = "stylesheet";
    link.type = "text/css"

    return link;
  }

  function lazyLoad(src, type) {
    if (_.has(lazyPromises, src)) return lazyPromises[src];

    var defer = $q.defer();

    var elem = type == "script"? createScript(src): createLink(src);
    elem.async = false;
    elem.onload = ()=> defer.resolve();
    elem.onerror = ()=> defer.reject(`error loading script ${src}`);

    document.head.appendChild(elem);

    return lazyPromises[src] = defer.promise;
  }

  function load(...arg) {
    return $q.all(
    _.chain(arg)
     .map(x=> x.toLowerCase())
     .reject(x=> {
        if (!_.has(assets, x)) {
          console.error(`this asset is not included: asset=${x}`);
          return true;
        }
        return false;
      })
     .reduce((promises, r)=> {
        let x = assets[r];

        if (x.css) {
          if (!_.isArray(x.css)) x.css = [x.css];
          _.each(x.css, e=> promises.push(lazyLoad(e, "link")));
        }

        if (x.script) {
          if (!_.isArray(x.script)) x.script = [x.script];
          _.each(x.script, e=> promises.push(lazyLoad(e, "script")));
        }

        return promises;
     }, [])
     .flatten()
     .value()).then(null, bAlert.open);
  }

  return {
    load: load
  }
});biruni.factory('bBig', function() {
  function parseRoundModel(patrm) {
    try {
      if (patrm.length !== 5) throw "round model length must be 5";
      let scale = parseFloat(patrm.substr(0,4));
      let tp = patrm.substr(4);
      if (patrm.substr(3,1) == '5') {
        scale -= 0.5;
      }

      return {
        scale: parseInt(scale),
        half: patrm.substr(3, 1) == '5',
        type: tp == 'R'? BigNumber.ROUND_HALF_UP: tp == 'C'? BigNumber.ROUND_CEIL: BigNumber.ROUND_FLOOR
      }
    } catch (e) {
      console.error("cannot parse round model");
      return {
        scale: 6,
        half: false,
        type: BigNumber.ROUND_HALF_UP
      }
    }
  }

  function bigNumber(patrm) {
    const big = BigNumber.clone();
    const ten = new big(10);
    var pattern = "+6.0R";
    var defrm = parseRoundModel(patrm || pattern);

    big.prototype.round = function(patrm) {
      var rm = defrm;
      if (arguments.length > 0) {
        rm = parseRoundModel(patrm);
      }

      function evalround(bval, rm) {
        if (rm.scale < 0) {
          let tens = ten.pow(-rm.scale);
          return bval.dividedBy(tens).dp(0, rm.type).multipliedBy(tens);
        }
        return bval.dp(rm.scale, rm.type);
      }

      if (rm.half) return evalround(this.multipliedBy(2), rm).dividedBy(2);
      return evalround(this, rm);
    }

    function round(value) {
      if (BigNumber.isBigNumber(value)) {
        return value.round().toString();
      } else {
        return new big(value).round().toString();
      }
    }

    function setRoundModel(rm) {
      if (arguments.length > 0) {
        pattern = rm;
        defrm = parseRoundModel(rm);
      } else return pattern;
    }

    function api(val) {
      return new big(val);
    }

    api.round = round;
    api.roundModel = setRoundModel;

    return api;
  }

  return bigNumber;
});biruni.factory('bConfig', function ($rootScope, $q, bLangs) {
  const u = {
    auth: {},
    langs: {},
    langCode: 'en',
    countryCode: 'uz',
    sessionOutFn: sessionOut,
    subscriptionEndFn: subscriptionEnd,
    sessionConflictsFn: sessionConflicts
  };

  _.each(bLangs, (val, key) => u.langs[key.toLowerCase()] = val);

  function setLangs(langs) {
    _.each(langs, (val, key) => {
      if (_.has(u.langs, key) && val) u.langs[key] = val;
    });
  }

  function sessionOut() {
    window.alert('Session out');
  }

  function subscriptionEnd() {
    window.alert('Subscription End!');
  }

  function sessionConflicts() {
    window.alert('SessionConflicts!');
  }

  function langCode(lc) {
    return arguments.length? u.langCode = lc || "en" : u.langCode;
  }

  function pathPrefix(project_hash, filial_id) {
    if (!project_hash) {
      project_hash = u.auth.project_hash;
      filial_id = u.auth.filial_id;
    }
    assert(project_hash && filial_id, "gen path prefix error");
    // prefix starts with "1"
    // following 4 number uniq page hashcode
    // next 2 number identify project hashcode
    // remain numbers identify filial id

    return "/!" + parseInt("1" + _.padStart(Math.floor(_.now() % 10000000 / 1000).toString(), 4, "0") +
                                 _.padStart(project_hash, 2, "0") + filial_id).toString(36);
  }

  function auths(v) {
    return arguments.length ? u.auth = v : u.auth;
  }

  function countryCode(code) {
    return arguments.length? u.countryCode = code || 'uz' : u.countryCode;
  }

  function sessionOutFn(sof) {
    return arguments.length ? u.sessionOutFn = sof : u.sessionOutFn;
  }

  function subscriptionEndFn(sef) {
    return arguments.length ? u.subscriptionEndFn = sef : u.subscriptionEndFn;
  }

  function sessionConflictsFn(scf) {
    return arguments.length ? u.sessionConflictsFn = scf : u.sessionConflictsFn;
  }

  function onLocationChange(fn) {
    $rootScope.$on('$locationChangeSuccess', fn);
  }

  const entityMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '/': '&#x2F;',
    '`': '&#x60;',
    '=': '&#x3D;'
  };

  function escapeHtml(string) {
    return String(string).replace(/[&<>"'`=\/]/g, function fromEntityMap(s) {
      return entityMap[s];
    });
  }

  function escapeLikeValue(val) {
    return val.replace(/[%_\\]/g, x => '\\' + x);
  }

  function unescapeLikeValue(val) {
    return val.replace(/(\\%)|(\\_)|(\\\\)/g, x=> x[1]);
  }

  function makeMapApi($mapFrame) {
    const mf = $mapFrame[0],
        qApi = $q.defer();

    function biruniLangs() {
      return r.langs;
    }

    function init(d) {
      d = d || {};
      mf.src = 'map_module/map.html';
      mf.onload = function () {
        let langs = biruniLangs;
        langs.langCode = r.langCode();
        qApi.resolve(mf.contentWindow.init(langs, {
          mode: d.mode, // default - show,
          selectionHandler: d.selectionHandler, // in select mode we can provide callback for selection
          toolbar: d.toolbar, // optional, provides geoman toolbar options when mode == "select"
          center: [d.lat || 41.2, d.lng || 69.2], // default Tashkent
          zoom: d.zoom || 15,
          fullscreen: d.fullscreen,     // is fullscreen button enabled
          showProfiles: d.showProfiles, // show/hide profile buttons (truck, car, biking, walking)
          profile: d.profile,           // default profile for routing
          mapCallbacks: d.mapCallbacks,  // callback functions to use them inside map
          allowedProfiles: d.allowedProfiles // allowed profiles for routing
        }));
      };
    }

    qApi.promise.init = init;

    return qApi.promise;
  }

  const r = {
    auths : auths,
    langCode : langCode,
    pathPrefix : pathPrefix,
    sessionOutFn : sessionOutFn,
    subscriptionEndFn : subscriptionEndFn,
    sessionConflictsFn : sessionConflictsFn,
    langs : u.langs,
    setLangs: setLangs,
    onLocationChange : onLocationChange,
    escapeHtml : escapeHtml,
    escapeLikeValue: escapeLikeValue,
    unescapeLikeValue: unescapeLikeValue,
    makeMapApi : makeMapApi,
    countryCode : countryCode,
  };

  return r;
});
biruni.factory('bStorage', function () {
  function supportsLocalStorage() {
    return ('localStorage' in window) && window['localStorage'] !== null;
  }

  function save(key, val) {
    if (!supportsLocalStorage()) {
      return;
    }
    if (val) {
      localStorage[key] = val;
    } else {
      delete localStorage[key];
    }
  }

  function load(key) {
    if (!supportsLocalStorage()) {
      return null;
    }
    return localStorage[key];
  }

  function loadJSON(key) {
    try {
      return JSON.parse(load(key)) ?? {};
    } catch (e) {
      return {};
    }
  }

  function saveJSON(key, val) {
    save(key, JSON.stringify(val));
  }

  function text(key, val) {
    if (arguments.length > 1) {
      save(key, val);
    } else {
      return load(key);
    }
  }

  function json(key, val) {
    if (arguments.length > 1) {
      saveJSON(key, val);
    } else {
      return loadJSON(key);
    }
  }

  return {
    text : text,
    json : json
  };
});
biruni.factory('bHttp', function (bConfig, $http, $templateRequest, $q, Upload, bRoutes) {

  var unblock = false;

  function unblockOnce() {
    unblock = true;
  }

  function error(reason, type, message, path, data) {
    return {
      reason : reason,
      type : type,
      message : message,
      data: data,
      path : path
    };
  }

  function extractPath(uri) {
    var s = uri.match(/[^+$:?]+/);
    return s[0];
  }

  function loadUri(uri) {
    return $templateRequest(uri, true);
  }

  function fetchHtml(path) {
    const uri = 'page/form' + extractPath(path) + '.html';

    return r.loadUri(uri).then(null, function (reason) {
      switch (reason.status) {
      case 404:
        return $q.reject(error(reason, 'html404', 'Not found: <b>' + uri + '</b>', path));
      default:
        return $q.reject(error(reason, 'ex'));
      }
    });
  }

  function fetchLang(path) {
    var uri = 'page/lang/' + bConfig.langCode() + extractPath(path) + '.json';

    return r.loadUri(uri).then(function (d) {
      try {
        return JSON.parse(d);
      } catch (e) {
        return {};
      }
    }, function () {
      return {};
    });
  }

  function fetchCustomLang(path) {
    return $http.post(bRoutes.LOAD_CUSTOM_HTML_TRANSLATIONS, {path: path}, {unblock: true}).then(function(d) {
      try {
        return _.chain(d.data).filter(x=> !!x[1]).object().value();
      } catch (e) {
        return {};
      }
    }, function () {
      return {};
    });
  }
  
  function fetchTour(path) {
    var uri = 'page/tour/' + bConfig.langCode() + extractPath(path) + '.json';
    
    return r.loadUri(uri).then(function (d) {
      try {
        return JSON.parse(d);
      } catch (e) {
        return {};
      }
    }, function () {
      return {};
    });
  }
  
  function postError(path) {
    return function (reason) {
      if (_.contains([400, 401, 402, 403, 404, 409, 410, 500], reason.status)) {
        if (reason.status === 401) {
          bConfig.sessionOutFn()();
        }
        if (reason.status === 402) {
          bConfig.subscriptionEndFn()();
        }
        if (reason.status === 409) {
          bConfig.sessionConflictsFn()();
        }
        return $q.reject(error(reason, 'route' + reason.status, reason.data, path, reason.data))
      } else {
        return $q.reject(error(reason, 'ex'));
      }
    }
  }

  function postFileAlone(file) {
    return Upload.upload({
      url: bRoutes.SAVE_FILE,
      file: file,
      headers: {
        BiruniUpload: 'alone',
        filename: encodeURIComponent(file.name),
      },
    }).then(null, postError(bRoutes.SAVE_FILE));
  }

  function postData(path, data, type, headers) {
    const file = [], param = loop(data || {});

    function loop(d) {
      if (d instanceof File) {
        file.push(d);
        return '\0' + (file.length - 1);
      }
      if (_.isArray(d)) {
        return _.map(d, loop)
      } else if (_.isObject(d)) {
        return _.mapObject(d, loop);
      } else if (_.isString(d)) {
        return d.replace('\0', '');
      } else {
        return d;
      }
    }

    if (file.length) {
      return Upload.upload({
        url : 'b' + path,
        fields : {
          param : JSON.stringify(param)
        },
        file : file,
        headers : {
          'BiruniUpload' : type || 'param'
        }
      }).then(null, postError(path));
    } else {
      const ub = unblock;
      unblock = false;
      return $http.post('b' + path, param, {
        unblock : ub,
        headers : headers
      }).then(null, postError(path));
    }
  }

  function mapResult(param) {
    return function (result) {
      result = _.defaults(result.data, param);
      result.maxPage = calcMaxPage(result.count, result.limit);
      result.table = _.map(result.data, mapRow(result.column));
      return result;
    }
  }

  function calcMaxPage(count, limit) {
    return Math.floor(count / limit) + (count % limit ? 1 : 0)
  }

  function mapRow(col) {
    return function (row) {
      var r = {};
      for (var i = 0; i < col.length; i++) {
        r[col[i]] = row[i];
      }
      return r;
    }
  }

  function queryData(path, d, tag) {
    if (_.isEmpty(d.column)) {
      return $q.reject('Query column is empty');
    }

    var limit = d.limit ? d.limit : 100,
    data = {},
    param = angular.copy({
        column : d.column,
        offset : d.offset,
        limit : limit
      });
    param.tag = tag;
    data.p = {
      column : d.column,
      filter : d.filter,
      sort : d.sort,
      refer_name : d.refer_name,
      offset : d.offset,
      limit : limit
    };
    if (d.param) {
      data.d = d.param;
    }
    return postData(path, data).then(mapResult(param));
  }

  function queryFieldsInfo(path, param, refers) {
    var data = {
      d : param,
      p : {
        'do' : 1,
        refers : refers
      }
    };

    return postData(path, data).then(function (result) {
      return result.data;
    });
  }


  function queryExport(path, d) {
    if (_.isEmpty(d.column_list)) {
      throw 'Query column is empty';
    }

    var data = {
      d : d.param,
      p : {
        'do' : 2,
        column : _.pluck(d.column_list, 'name'),
        label : _.pluck(d.column_list, 'label'),
        size : _.pluck(d.column_list, 'size'),
        img : _.pluck(d.column_list, 'img'),
        filter : d.filter,
        sort : d.sort,
        rt : d.rt
      }
    };
    download('b' + path, data, d.fileName, d.fileType);
  }

  function download(uri, data, fileName, fileType) {
    var xhr = new XMLHttpRequest();
    xhr.open('POST', uri);
    xhr.responseType = 'blob';
    var auths = bConfig.auths();
    for (k in auths) {
      xhr.setRequestHeader(k, auths[k]);
    }

    xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');
    xhr.onload = function (e) {
      if (this.status == 200) {
        var blob = new Blob([this.response], {
            type : fileType
          });
        var downloadUrl = URL.createObjectURL(blob);
        var a = document.createElement("a");
        a.href = downloadUrl;
        a.download = fileName;
        document.body.appendChild(a);
        a.click();

        setTimeout(function () {
          URL.revokeObjectURL(downloadUrl);
        }, 100);
      }
    };
    xhr.send(JSON.stringify(data));
  }

  const r = {
    fetchHtml : fetchHtml,
    fetchLang : fetchLang,
    fetchCustomLang: fetchCustomLang,
    fetchTour : fetchTour,
    postFileAlone : postFileAlone,
    postData : postData,
    queryData : queryData,
    queryFieldsInfo : queryFieldsInfo,
    queryExport : queryExport,
    extractPath : extractPath,
    loadUri : loadUri,
    download : download,
    unblockOnce : unblockOnce
  };

  return r;
});
biruni.factory('bAlert', function (bConfig) {
  var $modal = $('#biruniAlert'),
      $modalExtended = $('#biruniAlertExtended'),
      modal = $modal,
  m = {
    open : open,
    openReal : open,
    hide : hide
  };

  $modal.modal({
    backdrop : true,
    keyboard : true,
    show : false
  });

  $modalExtended.modal({
    backdrop : true,
    keyboard : true,
    show : false
  });

  $modalExtended.on('hidden.bs.modal', function () {
    $('.collapse').collapse('hide');
  });

  bConfig.onLocationChange(hide);

  init();

  function init() {
    modal = $modal;
    m.title = '';
    m.message = '';
    m.uri = '';
    m.route = false;
    m.solutions = [];
    m.code = '';
  }

  function open(error, title) {
    if (error && (error.type == 'route401' || error.type == 'route402' || error.type == 'route409')) {
      return;
    }
    if (!_.isString(title)) {
      title = '';
    }
    init();
    if (_.isString(error)) {
      m.title = title || bConfig.langs.error;
      m.message = error;
    } else {
      m.title = bConfig.langs.error;
      if (error.type == 'ex') {
        m.message = bConfig.langs.upload_file_changed;
      } else {
        if (_.isString(error.data) || _.isEmpty(error.data) || !_.has(error.data, 'error_code')) {
          m.message = error.message;
        } else {
          modal = $modalExtended;

          m.message = error.data.message;
          m.title = error.data.title || m.title;
          m.code = error.data.error_code;

          if (!_.isEmpty(error.data.solutions)) {
            m.solutions = error.data.solutions;
          }
        }
        
        m.uri = error.path;
        m.route = 'route404' === error.type;
        if (error.type === 'route403') {
          m.title = bConfig.langs.unauthorized;
        }
      }
    }
    modal.modal('show');
  }

  function hide() {
    modal.modal('hide');
  }

  return m;
});
biruni.factory('bConfirm', function ($rootScope, $timeout, bConfig) {
  var $modal = $('#biruniConfirm'),
  m = {},
  interval;

  $modal.modal({
    backdrop : true,
    keyboard : true,
    show : false
  });

  init();

  bConfig.onLocationChange(function () {
    $modal.modal('hide');
  });

  function init() {
    m.message = '';
    m.yes = _.noop;
    m.no = _.noop;
    m.cancel = _.noop;
    m.confirm = confirm;
    m.is_clicked = false;
    m.time = 0;

    m.clickYes = _=> { m.is_clicked = true; m.yes(); }
    m.clickNo = _ => { m.is_clicked = true; m.no(); }
    m.clickCancel = _=> { m.is_clicked = true; m.cancel(); }
  }

  function nvl(fn) {
    return _.isFunction(fn)? _.once(fn) : _.noop;
  }

  function setTimer(timer) {
    if (timer && parseInt(timer || 0) > 0) {
      m.time = parseInt(timer);
      interval = setInterval(function() {
        m.time--;
        // TODO: idk how yet, but sometimes the timer goes negative
        if (m.time <= 0) {
          m.time = 0;
          clearInterval(interval);
        }
        $rootScope.$digest();
      }, 1000);
    }
  }

  function confirm(message, yes, no, cancel) {
    init();
    m.message = message;
    m.yes = nvl(yes);
    m.no = nvl(no);
    m.cancel = nvl(cancel);
    m.hasCancel = _.isFunction(cancel);

    $modal.modal('show');

    return { setTimer };
  }

  $modal.on('shown.bs.modal', function() {
    $modal.find('.modal-footer').find('button').first().focus();
  });
  $modal.on("hidden.bs.modal", function(e) {
    clearInterval(interval);
    if (!m.is_clicked) {
      $timeout(function() {
        if (m.hasCancel) m.cancel();
        else m.no();
      });
    }
  });

  return m;
});
biruni.factory('bGridFilter', function (bConfig, bFrame, $timeout) {
  let fieldsData = {},
      $modal = $('#biruniGridFilter'),
      m = {
        md_max_count: 50,
        checkbox_limit: 5,

        doAction,
        setDefault,
        setTemplate,
        editListName,
        addFilterItem,

        addNewFilter,
        saveNewFilter,
        clearNewFilter,
        saveEditFilter,
        cancelEditFilter,
        keypressNewFilter,

        deleteFilterItem,
        getUncheckedFilters,

        selectNulls,

        templates: [],
        container: null
      };

  bConfig.onLocationChange(close);
  init();

  $modal.modal({ show: false });

  $modal.on('hide.bs.modal', clearNewFilter);

  function setTemplate(item) {
    m.container = item;
  }

  function selectNulls(f, val, ev) {
    ev.stopPropagation();
    f.nulls = f.nulls != val ? val : undefined;
  }

  function editListName(item, $event) {
    if ($event.charCode == 13) {
      $event.stopPropagation();
      saveEditFilter(item);
    }
  }

  function keypressNewFilter($event) {
    if ($event.keyCode == 13) {
      $event.stopPropagation();
      saveNewFilter();
    }
  }

  function doAction(item, action, $event) {
    $event.stopPropagation();
    if (action === 'remove') {
      m.templates = _.filter(m.templates, x => x.code != item.code);
      saveFilter();
    } else
    if (action === 'pin') {
      const pin = item.pin !== 'Y' ? 'Y' : 'N';
      _.each(m.templates, x => x.pin = 'N');
      item.pin = pin;
      saveFilter();
    } else
    if (action === 'edit') {
      m.oldName = item.name;
      item.editTextMode = true;

      $timeout(function() {
        $($event.target).closest('.dropdown-item').find('input').focus();
      });
    }
  }

  function saveFilter() {
    m.grid.saveStorageFilter(m.templates);
  }

  function saveNewFilter() {
    let temp = angular.copy(m.container);
    temp.pin = 'N';
    temp.code = _.uniqueId('grid');
    temp.name = m.new_filter_name || bConfig.langs.gf_unknown;
    m.templates.unshift(temp);
    clearNewFilter();
    saveFilter();
  }

  function clearNewFilter() {
    m.newFilterMode = false;
    m.new_filter_name = '';
  }

  function addNewFilter(ev) {
    ev.stopPropagation();
    m.newFilterMode = true;

    $timeout(function() {
      $modal.find('.add-new-field-wrapper').find('input').focus();
    });
  }

  function saveEditFilter(item) {
    item.name = item.name || bConfig.langs.gf_unknown;
    item.editTextMode = false;
    saveFilter();
  }

  function cancelEditFilter(item) {
    item.name = m.oldName;
    item.editTextMode = false;
  }

  function setDefault() {
    m.container.filters = _.map(m.def, prepareFilter);
  }

  function getUncheckedFilters() {
    return m.allFilterItems.filter(f => _.findIndex(m.container?.filters, { name : f.name }) === -1);
  }

  function deleteFilterItem(item) {
    m.container.filters = _.filter(m.container.filters, x=> x.name !== item.name);
  }

  function addFilterItem(name) {
    const r = _.findWhere(m.allFilterItems, {name});
    m.container.filters.unshift(prepareFilter(r));
  }

  function init() {
    m.page = null;
    m.query = null;
    m.grid = null;

    m.def = null;
    m.list = [];
    m.allFilterItems = [];

    m.open = open;
    m.loadFilterData = loadFilterData;
    m.init = init;
    m.close = close;
    m.run = run;
    m.showAll = showAll;
    m.selectAll = selectAll;
    m.onQueryChange = onQueryChange;
    m.onSelect = onSelect;
    m.onDelete = onDelete;
  }

  function mdCheckboxState(f) {
    return (f.val.length === 0) ? 'N' : (f.val.length === f.count ? 'A' : 'P');
  }

  function onDelete(f, index, row) {
    f.val = _.without(f.val, row);
    f.checkbox_state = mdCheckboxState(f);
  }

  function onSelect(f, row) {
    f.val.push(row);
    f.checkbox_state = mdCheckboxState(f);
  }

  function onQueryChange(f, query, value) {
    if (value != null) query.filter('name', 'search', '%' + (value || '') + '%');
    const codes = _.pluck(f.val, 'code');
    if (codes.length > 0) query.where(['code', '<>', codes]);
    else query.where(null);
  }

  function selectAll(f) {
    if (f.checkbox_state === 'N' || f.checkbox_state === 'P') {
      const query = m.page.query(m.query_name);
      query.offset(0);
      const limit = query.limit();
      query.limit(m.md_max_count);
      onQueryChange(f, query, null);
      query.fetch(null, f.decorateWith).then(function (r) {
        f.val = _.union(f.val, r.table);
      });
      query.limit(limit);
      f.checkbox_state = 'A';
    } else {
      f.val = [];
      f.checkbox_state = 'N';
    }
  }

  function trimPercent(v) {
    v = v || '';
    if (v.startsWith('%')) {
      v = v.substring(1);
    }
    if (v.endsWith('%')) {
      v = v.substring(0, v.length - 1);
    }
    return v;
  }

  function makeSearch(f, value) {
    f.mode = 'search';
    f.val = trimPercent(value || '');
  }

  function getReferValue(name) {
    return fieldsData.refers[name] || {};
  }

  function prepareMCValue(f, initValue, data) {
    f.val = _.map(data, function (v) {
      return {
        id : v[0],
        name : v[1],
        val : _.contains(initValue, v[0])
      };
    });
  }

  function prepareMTValue(f, initValue, data) {
    f.model = initValue;
    f.val = _.mapRows(data, ['id', 'name', 'parent_id']);
  }

  function fieldInfo(name) {
    const r = fieldsData.fields[name];
    if (!r) {
      throw name + '=> field is not found';
    }
    return r;
  }

  function setOperation(mode) {
    let def_operations = [
      { op: '=', class: 'fas fa-equals', text: bConfig.langs.gf_equal },
      { op: '<>', class: 'fas fa-not-equal', text: bConfig.langs.gf_not_equal }
    ];

    if (_.contains(['number', 'date'], mode)) {
      return def_operations.concat([
        { op: '<', class: 'fas fa-less-than', text: bConfig.langs.gf_less_than },
        { op: '>', class: 'fas fa-greater-than', text: bConfig.langs.gf_greater_than },
        { op: '<=', class: 'fas fa-less-than-equal', text: bConfig.langs.gf_less_than_equal },
        { op: '>=', class: 'fas fa-greater-than-equal', text: bConfig.langs.gf_greater_than_equal }
      ]);
    } else if (mode === 'search') {
      return def_operations.concat([
        { op: 'search', class: 'fas fa-search', text: bConfig.langs.gf_search },
        { op: 'not search', class:'fas fa-unlink fa-rotate-90', text: bConfig.langs.gf_not_search }
      ]);
    } else {
      return def_operations;
    }
  }

  function prepareFilterOrigin(f, v) {
    f = angular.copy(f);

    let field = fieldInfo(f.name);
    let op;
    f.type = field[0];
    f.nulls = v.nulls;

    if (f.decorateWith) {
      field = fieldInfo(f.decorateWith);
      const refData = getReferValue(f.decorateWith);
      op = _.keys(v)[0] || '=';
      f.val = v[op] || [];
      f.val = _.isArray(f.val) ? f.val : [f.val];
      f.val = _.map(f.val, x => String(x));

      if (field[0] === 'O') {
        f.has_value = f.val.length > 0;
        f.mode = 'mc';
        const buf = _.zip(field[2], field[3]);
        prepareMCValue(f, f.val, buf);
      } else if (field[0] === 'R' && refData) {
        f.has_value = f.val.length > 0;

        if (refData.data) {
          if (f.treeWithParent) {
            f.mode = 'mt';
            prepareMTValue(f, f.val, refData.data);
          } else {
            f.mode = 'mc';
            prepareMCValue(f, f.val, refData.data);
          }
        } else {
          f.mode = 'md';
          f.val = _.chain(refData.val || [])
                   .map(x => _.object(['code','name'], x))
                   .filter(x=> _.contains(f.val, x.code))
                   .value();

          f.count = refData.count;
          f.checkbox_state = mdCheckboxState(f);
        }
      } else {
        f.has_value = !_.isEmpty(v) && !!v[_.keys(v)[0]];
        op = _.keys(v)[0] || '=';
        makeSearch(f, v[op]);
      }
    } else if (field[0] === 'N' || field[0] === 'D') {
      let type = 'number', range = 'rangeNumber';

      if (field[0] === 'D') {
        type = 'date';
        range = 'rangeDate';
      }

      switch (f.dateLevel) {
        case 'year':
          f.dateModelFormat = 'YYYY';
          break;
        case 'month':
          f.dateModelFormat = 'MM.YYYY';
          f.dateViewFormat = 'MMMM YYYY';
          break;
        case 'time':
          f.dateModelFormat = 'DD.MM.YYYY hh.mm.ss';
          break;
        default:
          f.dateModelFormat = 'DD.MM.YYYY';
      }

      if (f.directive === 'equal') {
        f.mode = type;
        op = _.keys(v)[0] || '=';

        if (type === 'date') {
          f.val = v[op];
        } else {
          f.val = !_.isEmpty(v) ? v[_.keys(v)[0]] : undefined;
        }

        f.has_value = !!f.val;
      } else if (f.directive === 'range' || !f.directive) {
        f.mode = range;
        f.val  = {
          left : v['>='] || v['<'],
          right : v['<='] || v['>']
        };
        op = (v['<'] || v['>']) ? '<>' : '=';

        if (type === 'date') {
          if (!!f.val.left) f.val.left = moment(f.val.left, 'DD.MM.YYYY hh.mm.ss').format(f.dateModelFormat);
          if (!!f.val.right) f.val.right = moment(f.val.right, 'DD.MM.YYYY hh.mm.ss').format(f.dateModelFormat);
        }

        f.has_value = !!f.val.left || !!f.val.right;
      }
    } else {
      f.has_value = !_.isEmpty(v) && !!v[_.keys(v)[0]];
      op = _.keys(v)[0] || 'search';
      makeSearch(f, v[op]);
    }
    f.operations = setOperation(f.mode);
    f.operation = op ? _.find(f.operations, x => x.op === op) : f.operations[0];
    f.op = op;

    return f;
  }

  function prepareFilter(f) {
    const v = m.query.filter(f.name) || {};
    return prepareFilterOrigin(f, v);
  }

  function prepareFilterList(f) {
    const v = {};
    if (f.decorateWith) v[f.op] = f.val;
    else if (f.type === 'N' || f.type === 'D') {
      if (f.directive ==='equal') {
        v[f.op] = f.val;
      } else {
        const val = f.val || {};
        let left_op = f.op === '=' ? '>=' : '<';
        let right_op = f.op === '=' ? '<=' : '>';
        v[left_op] = val.left;
        v[right_op] = val.right;
      }
    } else {
      v[f.op] = f.val || '';
    }
    v.nulls = f.nulls;
    return prepareFilterOrigin(f, v);
  }

  function fetchFieldsInfo() {
    const fieldValue = {};
    const checkboxLimit = {};
    const treeWithParent = {};

    function pushField(name, val, tree) {
      if (tree) treeWithParent[name] = tree;
      if (_.isArray(fieldValue[name])) {
        fieldValue[name].push(val);
      } else fieldValue[name] = [val];
    }

    _.each(m.list, function(filter) {
      _.each(filter.filters, function(f) {
        if (f.decorateWith) {
          if (f.treeWithParent) pushField(f.decorateWith, f.val, f.treeWithParent);
          else pushField(f.decorateWith, f.val);
        }
      });
    });

    _.each(m.allFilterItems, function(f) {
      if (f.decorateWith) {
        let v = m.query.filter(f.name) || {},
            op = _.keys(v)[0] || '=';
        v = v[op] || [];
        checkboxLimit[f.decorateWith] = f.checkboxLimit;
        if (f.treeWithParent) pushField(f.decorateWith, v, f.treeWithParent);
        else pushField(f.decorateWith, v);
      }
    });

    const s = _.reduce(fieldValue, function (memo, v, k) {
      const val = _.chain(v).flatten().map(x => String(x)).uniq().value();
      memo[k] = {val: val, limit: checkboxLimit[k] || m.checkbox_limit};
      if (treeWithParent[k]) memo[k]['parent_field'] = treeWithParent[k];
      return memo;
    }, {});

    return m.query.fetchFieldsInfo(s);
  }

  function open(query, grid, query_name, page) {
    loadFilterData(query, grid, query_name, page).then(() => {
      $modal.modal('show');
    })
  }

  function loadFilterData(query, grid, query_name, page) {
    init();
    m.page = page;
    m.query = query;
    m.grid = grid;
    m.query_name = query_name;
    const filters = grid.getFilters();
    m.list = filters.list;
    m.def = filters.def;
    m.allFilterItems = filters.all;

    return fetchFieldsInfo().then(function (fds) {
      fieldsData = fds;

      const buf = _.chain(m.allFilterItems)
                   .map(prepareFilter)
                   .filter(x => x.mode === 'mc' && x.val && x.val.length === 0)
                   .pluck('name')
                   .value();
      m.allFilterItems = _.filter(m.allFilterItems, x=> !_.contains(buf, x.name));
      m.def = _.filter(m.def, x=> !_.contains(buf, x.name));

      const def_filter_names = _.pluck(m.def, 'name');

      _.each(m.allFilterItems, function(x) {
        const bf = prepareFilter(x);
        if (!_.contains(def_filter_names, x.name) && bf.has_value) {
          m.def.push(angular.copy(x));
        }
      });

      _.each(m.list, function(item) {
        item.filters = _.filter(item.filters, x=> !_.contains(buf, x.name));
      });

      m.templates = _.map(m.list, function(item) {
        return {
          code: item.code,
          name: item.name,
          pin: item.pin,
          filters: _.map(item.filters, prepareFilterList)
        }
      });

      m.container = _.findWhere(m.templates, { pin: 'Y' });

      if (m.container) m.container.filters = _.map(m.container.filters, prepareFilter);
      else m.container = {filters : _.map(m.def, prepareFilter)};
    });
  }

  function close() {
    if (m.grid) {
      saveFilter();
    }

    init();
    $modal.modal('hide');
  }

  function run() {
    m.query.filterClear();
    m.query.pageNo(1);

    _.each(m.container.filters, function(f) {
      let v, op = f.operation.op;

      switch (f.mode) {
        case 'mc':
          const val = _.chain(f.val).where({
            val: true
          }).pluck('id').value();
          m.query.filter(f.name, op, val, f.nulls);
          break;
        case 'mt':
          m.query.filter(f.name, op, f.model, f.nulls);
          break;
        case 'md':
          m.query.filter(f.name, op, _.pluck(f.val, 'code'), f.nulls);
          break;
        case 'number':
          v = f || {};
          m.query.filter(f.name, op, v.val, f.nulls);
          break;
        case 'rangeNumber':
        case 'rangeDate':
        case 'date':
          v = f.val || {};
          let l = f.val, r = f.val;

          if (f.mode !== 'date') {
            l = v.left;
            r = v.right;
          }

          if (f.mode === 'date' || f.mode === 'rangeDate') {
            switch (f.dateLevel) {
              case 'year':
                l = !!l ? '01.01.' + l + ' 00:00:00' : l;
                r = !!r ? '31.12.' + r + ' 23:59:59' : r;
                break;
              case 'month':
                l = !!l ? '01.' + l + ' 00:00:00' : l;
                r = !!r ? moment(r, f.dateModelFormat).endOf('month').format('DD') + '.' + r + ' 23:59:59' : r;
                break;
              case 'time':
                break;
              default:
                l = !!l ? l + ' 00:00:00' : l;
                r = !!r ? r + ' 23:59:59' : r;
            }
          }

          if (f.mode === 'date') {
            if (!_.isEmpty(v)) m.query.filter(f.name, op, v);
            if (!_.isEmpty(l)) m.query.filter(f.name, 'left', l);
            if (!_.isEmpty(r)) m.query.filter(f.name, 'right', r, f.nulls, 'date');
          } else {
            let op_l = op === '=' ? '>=' : '<';
            let op_r = op === '=' ? '<=' : '>';
            m.query.filter(f.name, op_l, l);
            m.query.filter(f.name, op_r, r, f.nulls);
          }

          break;
        case 'search':
          v = f.val ? _.contains(['=', '<>'], op) ? f.val : '%' + f.val + '%' : null;
          m.query.filter(f.name, op, v, f.nulls);
          break;
      }
    });
    m.grid.refreshCheck();
    m.query.fetch().then(close);
  }

  function showAll() {
    m.query.filterClear();
    m.grid.refreshCheck();
    m.query.fetch().then(close);
  }

  return m;
});biruni.factory('bPgGridFilter', function (bConfig, bFrame) {
  var $modal = $('#biruniPgGridFilter'),
  fields = {},
  filters = {},
  m = {
    checkbox_limit: 5
  };

  bConfig.onLocationChange(close);
  init();

  var $wrapper = $modal.find('.b-filter-wrapper');

  $modal.modal({ show: false });

  function init() {
    m.page = _.last(bFrame.pages);
    m.grid = null;

    m.items = [];
    m.filters = [];

    m.run = run;
    m.open = open;
    m.close = close;
    m.showAll = showAll;
    m.selectAll = selectAll;
  }

  function selectAllState(f) {
    return f.val.length == f.count ? '1' : '0';
  }

  function selectAll(f) {
    if (f.checkbox_state == '0') {
      f.val = angular.copy(f.list);
      f.checkbox_state = '1';
    } else {
      f.val = [];
      f.checkbox_state = '0';
    }
  }

  function setOperation(mode) {
    let def_opers = [
      { op: '=', class: 'fas fa-equals', text: bConfig.langs.gf_equal },
      { op: '!=', class: 'fas fa-not-equal', text: bConfig.langs.gf_not_equal }
    ];
    if (_.contains(['number', 'date'], mode)) {
      return def_opers.concat([
        { op: '<', class: 'fas fa-less-than', text: bConfig.langs.gf_less_than },
        { op: '>', class: 'fas fa-greater-than', text: bConfig.langs.gf_greater_than },
        { op: '<=', class: 'fas fa-less-than-equal', text: bConfig.langs.gf_less_than_equal },
        { op: '>=', class: 'fas fa-greater-than-equal', text: bConfig.langs.gf_greater_than_equal }
      ]);
    } else if (mode == 'search') {
      return def_opers.concat([
        { op: '%', class: 'fas fa-search', text: bConfig.langs.gf_search },
        { op: '!%', class:'fas fa-unlink fa-rotate-90', text: bConfig.langs.gf_not_search }
      ]);
    } else {
      return def_opers;
    }
  }

  function prepareFilter(f, v) {
    f = angular.copy(f);
    var op,
    field = _.findWhere(fields, { name: f.name }),
    filter = _.findWhere(filters, { name: f.name }) || {};

    if (!field) return null;

    if (f.decorateWith) {
      var cur = _.flatten([m.grid.filter(f.name)]);
      f.list = _.chain(m.items).map(function(c) {
        let old = _.findWhere(filter.list, { id: c[f.name] });
        if (c[f.name] && c[f.decorateWith]) {
          return {
            id: c[f.name],
            name: c[f.decorateWith],
            val: !!old?.val
          };
        } else return null;
      }).compact().uniq('id').sortBy('id').value();
      f.count = f.list.length;

      if (f.count <= m.checkbox_limit) f.mode = 'checkbox';
      else {
        f.query_name = m.grid.getName() + '_' + f.name;
        f.val = filter.val || [];
        f.checkbox_state = selectAllState(f);
        f.mode = 'select';
      }
      op = filter.op;
    } else if (f.type == 'number' || f.type == 'date') {
      if (f.equal) {
        f.mode = f.type;
        f.val = filter.val;
      } else if (f.directive == 'range' || !f.directive) {
        f.mode = 'range-' + f.type;
        f.val = filter.val || {};
      }
      op = filter.op;
    } else {
      f.mode = 'search';
      f.val = filter.val;
      op = filter.op || '%';
    }
    f.label = field.label;
    f.operations = setOperation(f.mode);
    f.operation = _.findWhere(f.operations, { op }) || f.operations[0];
    f.op = op;

    return f;
  }

  function open(grid) {
    init();
    m.grid = grid;
    m.items = grid.g.items;
    fields = grid.g.fields;
    filters = grid.g.originFilters;

    m.filters = _.compact(_.map(grid.g.filterFields, prepareFilter));

    $modal.modal('show');
  }

  function close() {
    init();
    $modal.modal('hide');
  }

  function run() {
    m.grid.filter({});

    _.each(m.filters, function(f) {
      var op = f.operation.op;
      switch (f.mode) {
        case 'checkbox':
          _.each(f.list, function(v) {
            if (v.val) {
              m.grid.filter(f.name, op, v.id);
            }
          });
          break;
        case 'select':
          _.each(f.val, v => {
            m.grid.filter(f.name, op, v.id);
          });
          break;
        case 'number':
        case 'date':
        case 'search':
          f.val && m.grid.filter(f.name, op, f.val);
          break;
        case 'range-number':
        case 'range-date':
          let v = f.val || {},
          l = v.left, r = v.right;

          l && m.grid.filter(f.name, op == '=' ? '>=' : '<', l);
          r && m.grid.filter(f.name, op == '=' ? '<=' : '>', r);
          break;
      }
    });
    m.grid.refresh();
    m.grid.g.originFilters = angular.copy(m.filters);
    close();
  }

  function showAll() {
    m.grid.filter({});
    m.grid.refresh();
    close();
  }

  return m;
});
biruni.factory('bSortForm', function (bConfig) {
  var $modal = $('#biruniSortForm'),
  m = {},
  def = [];
  $modal.modal({
    keyboard: true,
    show: false
  });

  init();

  bConfig.onLocationChange(function () {
    $modal.modal('hide');
  });

  var setDef = _.once(function(grid) {
    def = grid.query().sort();
  });

  function init() {
    m.query = null;
    m.grid = null;
    m.cols = [];
    m.open = open;
    m.sortIt = sortIt;
    m.setDefault = set;
    m.pinOrder = pinOrder;
  }

  function open(grid) {
    setDef(grid);
    init();
    m.pinned = !!grid.g.pinnedSort;
    m.grid = grid;
    m.query = grid.query();
    set(true);
    $modal.modal('show');
  }

  function getCols() {
    return _.chain(m.cols)
    .map(function (c) {
      return c.dir == 1 ? c.sortBy : c.dir == 2 ? '-' + c.sortBy : '';
    })
    .compact()
    .value();
  }

  function pinOrder() {
    m.grid.saveSort(getCols(), m.pinned);
    m.pinned = !m.pinned;
    m.grid.g.pinnedSort = m.pinned ? getCols() : undefined;
  }

  function set(opening) {
    var sc = {},
    r = opening ? m.query.sort() : def,
    fields = m.grid.g.fields;

    var cols = _.chain(m.grid.g.fields)
      .filter('column')
      .pluck('name')
      .value();

    for (var i = 0; i < r.length; i++) {
      if (_.first(r[i]) === '-') {
        sc[r[i].substr(1)] = [i, 2];
      } else {
        sc[r[i]] = [i, 1];
      }
    }
    var classes = ['fa-remove', 'fa-arrow-up', 'fa-arrow-down'];
    const sortTypes = [bConfig.langs.sort_off, bConfig.langs.sort_ascending, bConfig.langs.sort_descending];
    m.cols = _.chain(cols).map(function (c) {
      var r = {
        name : c,
        label : fields[c].label,
        dir : 0,
        orderNo: fields[c].label,
        sortBy : fields[c].sortBy || c
      },
      k = sc[r.sortBy];
      if (k) {
        r.orderNo = String(k[0]);
        r.dir = k[1];
      }
      r.clazz = function () {
        return classes[r.dir];
      }
      r.status = function (clazz) {
        let idx = clazz == classes[0] ? 0 : clazz == classes[1] ? 1 : clazz == classes[2] ? 2 : undefined;
        return sortTypes[idx];
      }
      return r;
    }).filter(function(c){
      return c.label.trim().length > 0;
    }).sortBy('orderNo').value();
  }

  function sortIt() {
    m.query.sort(getCols());
    m.query.fetch();
  }

  return m;
});
 biruni.factory('bQuery', function (bHttp, bConfig) {
  function makeQuery(path) {
    const q = {
      param: null,
      column: [],
      where: null,
      searchValue: '',
      searchFields: [],
      filters: {},
      sort: [],
      offset: 0,
      limit: 50,
      fetchId: 0,
      result: {
        count: 0,
        maxPage: 0,
        data: []
      }
    };

    function fetchFieldsInfo(refers) {
      return bHttp.queryFieldsInfo(path, q.param, refers);
    }

    function fetch(tag, referName) {
      const d = {
        refer_name: referName,
        param: q.param,
        column: q.column,
        filter: genFilter(),
        sort: q.sort,
        offset: q.offset,
        limit: q.limit
      };
      return bHttp.queryData(path, d, tag).then(onFetch);
    }

    function onFetch(result) {
      q.fetchId = _.uniqueId();
      q.result = result;
      return result;
    }

    function clear() {
      q.fetchId = _.uniqueId();
      q.result = {
        count : 0,
        maxPage : 0,
        data : []
      }
    }

    function genFilter() {
      const search = gatherSearch(),
          filter = gatherFilters(),
          r = [];

      if (!_.isEmpty(q.where)) {
        r.push(q.where);
      }
      if (!_.isEmpty(search)) {
        r.push(search);
      }
      if (!_.isEmpty(filter)) {
        r.push(filter);
      }

      return prepareFilter(r);
    }

    function gatherSearch() {
      const p = [];

      if (q.searchValue) {
        for (let i = 0; i < q.searchFields.length; i++) {
          p.push([q.searchFields[i], 'esearch', '%' + bConfig.escapeLikeValue(q.searchValue) + '%']);
        }
      }
      return prepareFilter(p, 'or');
    }

    function makeDateFilter(name, f) {
      switch (_.keys(f)[0]) {
        case '=':
          return ['and', [[name, '>=', f.left], [name, '<=', f.right]]];
        case '<>':
          return ['or', [[name, '<', f.left], [name, '>', f.right]]];
        case '>':
          return [name, '>', f.right];
        case '<':
          return [name, '<', f.left];
        case '>=':
          return [name, '>=', f.left];
        case '<=':
          return [name, '<=', f.right];
        default:
          return [];
      }
    }

    function gatherFilters() {
      const r = [];

      _.each(q.filters, function(f, name) {
        let ops = [];

        if (f.mode === 'date') {
          r.push(makeDateFilter(name, f));
        } else {
          _.each(_.keys(f), function(op) {
            if (op === 'nulls') return;
            const val = f[op];

            if (val && (!_.isArray(val) || val.length > 0)) {
              let arr = [name, op, val];

              if (op === 'not search') {
                arr = ['not', [name, 'search', val]];
              }

              if (!f.nulls) {
                if (op === '<>' || op === 'not search') {
                  arr = ['or', [arr, [name, '=', null]]];
                }

                r.push(arr);
              } else {
                ops.push(arr);
              }
            }
          });
        }

        const n_arr = [name, f.nulls, null];

        if (ops.length > 0) {
          if (ops.length > 1) {
            ops = ['or', [['and', ops], n_arr]];
          } else {
            ops = ['or', [ops[0], n_arr]];
          }
          r.push(ops);
        } else if (f.nulls) {
          r.push(n_arr);
        }
      });

      return prepareFilter(r);
    }

    function hasFilterValues() {
      return !_.isEmpty(gatherFilters());
    }

    function prepareFilter(r, op) {
      switch (r.length) {
        case 0:
          return [];
        case 1:
          return r[0];
        default:
          return [op || 'and', r];
      }
    }

    function param(p) {
      if (arguments.length) {
        q.param = p;
        return this;
      }
      return q.param;
    }

    function column(...arg) {
      if (arg.length) {
        q.column = _.chain(arg).flatten().compact().uniq().value();
        return this;
      }
      return q.column;
    }

    function where(w) {
      if (arguments.length) {
        q.where = w;
        return this;
      }
      return q.where;
    }

    function searchValue(v) {
      if (arguments.length) {
        q.searchValue = v;
        return this;
      }
      return q.searchValue;
    }

    function searchFields(...arg) {
      if (arg.length) {
        q.searchFields = _.chain(arg).flatten().compact().uniq().value();
        return this;
      }
      return q.searchFields;
    }

    function filterClear() {
      q.filters = {};
      return this;
    }

    function filter(name, op, val, nulls, mode, left, right) {
      switch (arguments.length) {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          let s = q.filters[name];

          if (!s) {
            s = {};
            q.filters[name] = s;
          }

          s[op] = val;
          s.nulls = nulls;
          s.mode = mode;

          if (!!left) s.left = left;
          if (!!right) s.right = right;

          return this;
        case 2:
          return angular.copy((q.filters[name] || {})[op]);
        case 1:
          return angular.copy(q.filters[name]);
        default:
          return angular.copy(q.filters);
      }
    }

    function sort(...arg) {
      if (arg.length) {
        q.sort = _.chain(arg).flatten().compact().uniq().value();
        return this;
      }
      return q.sort;
    }

    function offset(val) {
      if (arguments.length) {
        q.offset = val;
        return this;
      }
      return q.offset;
    }

    function limit(val) {
      if (arguments.length) {
        q.limit = val;
        return this;
      }
      return q.limit;
    }

    function pageNo(val) {
      return arguments.length ? offset((val - 1) * q.limit) : q.offset / q.limit + 1;
    }

    function getFetchId() {
      return q.fetchId;
    }

    function result() {
      return q.result;
    }

    function exportExcel(column_list, fileName) {
      const d = {
        param: q.param,
        column_list: column_list,
        filter: genFilter(),
        sort: q.sort,
        rt: 'xlsx',
        fileName: fileName + '.xlsx',
        fileType: 'application/vnd.ms-excel'
      };

      bHttp.queryExport(path, d);
    }

    return {
      path : _.constant(path),
      param : param,
      column : column,
      where : where,
      searchValue : searchValue,
      searchFields : searchFields,
      filterClear : filterClear,
      filter : filter,
      hasFilterValues : hasFilterValues,
      sort : sort,
      offset : offset,
      limit : limit,
      pageNo : pageNo,
      fetch : fetch,
      clear : clear,
      fetching : getFetchId,
      result : result,
      fetchFieldsInfo : fetchFieldsInfo,
      exportExcel : exportExcel
    };
  }

  return makeQuery;
});biruni.factory('bGrid', function ($filter, $rootScope, $http, $q, bConfig, bStorage, bRoutes, bConstants) {
  function make(query) {
    const keyFilter = query.path() + '&filter';
    const keySort = query.path() + '&sort';
    let isInit = true;

    const g = {
      enabled: true,
      fields: {},
      asHtmls: {},
      cols: [],
      colsDefault: [],
      filtersList: [],
      defaultFilters: [],
      filters: [],
      withCheckbox: false,
      pinnedSort: undefined,
      showFilterPanel: window.innerWidth > 776,
      openFilterPanel: false,
      filterPanelDirection: 'right',
      filterPanelWidth: 400
    };

    const promises = [];

    promises.push(loadSetting(keyFilter).finally(function () {
      const listObj = bStorage.json(keyFilter);
      if (!_.isEmpty(listObj)) g.filtersList = listObj.list;
    }));

    promises.push(loadSetting(keySort).finally(function () {
      const order = bStorage.text(keySort);
      if (order) {
        try {
          g.pinnedSort = JSON.parse(order);
        } catch (e) {
          console.error(e)
        }
      }
    }));

    const promise = $q.all(promises);

    function loadSetting(path) {
      if ($rootScope.is_debug) {
        return $q.all([]);
      } else {
        return $http.post(bRoutes.LOAD_USER_LARGE_SETTING, {
          setting_code: path
        }).then(function (result) {
          if (result.data) {
            bStorage.json(path, result.data);
          } else {
            bStorage.text(path, null);
          }
        }, function (error) {
          console.error('grid filter loader', error);
        });
      }
    }

    function prepareValue(f) {
      if (f.mode === 'mc') f.val = _.chain(f.val).where({ val: true }).pluck('id').value();
      else if (f.mode === 'mt') f.val = f.model;
      else if (f.mode === 'md') f.val = _.pluck(f.val, 'code');
    }

    function prepareFilters(f) {
      _.each(f, function (x) {
        if (x.mode === 'date' || x.mode === 'rangeDate') {
          switch (x.dateLevel) {
            case 'year':
              x.val.left = !!x.val.left ? '01.01.' + x.val.left + ' 00:00:00' : x.val.left;
              x.val.right = !!x.val.right ? '31.12.' + x.val.right + ' 23:59:59' : x.val.right;
              break;
            case 'month':
              x.val.left = !!x.val.left ? '01.' + x.val.left + ' 00:00:00' : x.val.left;
              x.val.right = !!x.val.right ? moment(x.val.right, x.dateModelFormat).endOf('month').format('DD') + '.' + x.val.right + ' 23:59:59' : x.val.right;
              break;
            case 'time':
              break;
            default:
              x.val.left = !!x.val.left ? x.val.left + ' 00:00:00' : x.val.left;
              x.val.right = !!x.val.right ? x.val.right + ' 23:59:59' : x.val.right;
          }
        }
      });

      return _.chain(f)
        .sortBy(x => parseInt(x.order_no))
        .map(x => _.pick(x, 'name', 'mode', 'decorateWith', 'val', 'nulls', 'directive', 'type', 'treeWithParent', 'model', 'op', 'dateLevel', 'dateModelFormat'))
        .each(prepareValue)
        .value();
    }

    function saveStorageFilter(l) {
      const list = _.chain(angular.copy(l))
          .sortBy(x => parseInt(x.order_no))
          .map(x => _.pick(x, 'name', 'filters', 'pin'))
          .each(x => x.filters = prepareFilters(x.filters))
          .value();

      g.filtersList = list;

      if (list.length > 0) {
        saveSetting(keyFilter, { list: list }, 'grid filter save');
      } else {
        saveSetting(keyFilter, undefined, 'grid filter save');
      }
    }

    function saveSort(cols, remove) {
      if (!remove) saveSetting(keySort, cols, 'grid pin sort');
      else saveSetting(keySort, undefined, 'grid pin sort')
    }

    function saveSettingChanges() {
      const search = [];
  
      _.each(g.fields, function(f, k) {
        if (f.search) search.push(k);
      });
  
      const cols = g.cols;
      const openFilterPanel = g.openFilterPanel;
      const filterPanelDirection = g.filterPanelDirection;
      const filterPanelWidth = g.filterPanelWidth;
  
      let data = {
        setting_code: getQuery().path(),
        setting_value: { cols, search, openFilterPanel, filterPanelDirection, filterPanelWidth }
      }
  
      if ($rootScope.is_debug) {
        bStorage.json(data.setting_code, data.setting_value);
      } else {
        data.setting_value = JSON.stringify(data.setting_value);
        $http.post(bRoutes.SAVE_USER_LARGE_SETTING, data).then(_, function (error) {
          console.error('unable to save settings', error);
        });
      }
    }

    function saveSetting(path, data, error_message) {
      if ($rootScope.is_debug) {
        if (data) bStorage.json(path, data);
        else bStorage.text(path, data);
      } else {
        $http.post(bRoutes.SAVE_USER_LARGE_SETTING, {
          setting_code: path,
          setting_value: JSON.stringify(data)
        }).then(_, function (error) {
          console.error(error_message, error);
        });
      }
    }

    function notEqual(v1, v2) {
      v1 = !v1 ? -1 : v1;
      v2 = !v2 ? -1 : v2;
      return v1 != v2;
    }

    function fixFilterList() {
      function isUseful(reserve) {
        const origin = _.findWhere(g.filters, { name: reserve.name });
        if (!origin) return false;
        if (notEqual(origin.decorateWith, reserve.decorateWith)) return false;
        return !notEqual(origin.directive, reserve.directive);
      }

      g.filtersList = _.chain(g.filtersList)
        .each(x => x.filters = _.filter(x.filters, isUseful))
        .filter(x => x.filters.length > 0).value();
    }

    function fixGridFilters() {
      fixFilterList();
      const pinnedFilter = _.findWhere(g.filtersList, { pin: 'Y' });

      if (pinnedFilter) {
        query.filterClear();

        _.each(pinnedFilter.filters, function (f) {
          if (f.decorateWith) {
            query.filter(f.name, f.op, f.val || [], f.nulls);
          } else if (f.type === 'N' || f.type === 'D') {
            if (f.directive === 'equal' && f.type === 'N') {
              query.filter(f.name, f.op, f.val || '', f.nulls);
            } else {
              let val = f.val || {};
              let l = val.left, r = val.right;

              if (f.type === 'D' && f.directive === 'equal') {
                l = r = val;

                switch (f.dateLevel) {
                  case 'year':
                    l = !!l ? '01.01.' + l + ' 00:00:00' : l;
                    r = !!r ? '31.12.' + r + ' 23:59:59' : r;
                    break;
                  case 'month':
                    l = !!l ? '01.' + l + ' 00:00:00' : l;
                    r = !!r ? moment(r, f.dateModelFormat).endOf('month').format('DD') + '.' + r + ' 23:59:59' : r;
                    break;
                  case 'time':
                    break;
                  default:
                    l = !!l ? l + ' 00:00:00' : l;
                    r = !!r ? r + ' 23:59:59' : r;
                }

                query.filter(f.name, f.op, val);
                query.filter(f.name, 'left', l);
                query.filter(f.name, 'right', r, f.nulls, 'date');
              } else {
                const left_op = f.op === '=' ? '>=' : '<';
                const right_op = f.op === '=' ? '<=' : '>';

                query.filter(f.name, left_op, l);
                query.filter(f.name, right_op, r, f.nulls);
              }
            }
          } else {
            const val = f.val ? _.contains(['<>', '='], f.op) ? f.val : '%' + f.val + '%' : null;
            query.filter(f.name, f.op, val, f.nulls);
          }
        });
      }
    }

    function getQuery() {
      return query;
    }

    function getField(name) {
      if (!name) {
        throw 'grid field name is empty';
      }
      let r = g.fields[name];

      if (!r) {
        r = {
          name: name
        };
        g.fields[name] = r;
      }

      return r;
    }

    function asHtml(name, required, fn) {
      if (!name) {
        throw 'grid as html field name is empty';
      }
      if (typeof (fn) !== "function") {
        throw 'grid as html field function is not function';
      }
      g.asHtmls[name] = {
        fn: fn,
        required: required
      };
    }

    function addCols(c) {
      const f = getField(c.name);
      f.column = true;
      f.sortBy = c.sortBy || f.sortBy;
      f.asHtml = c.asHtml === '' || c.asHtml || f.asHtml;
      f.img = null;

      if (c.img === '') {
        f.img = [50, 50]; // default image size [width, height]
      } else if (c.img) {
        let [width, height] = c.img.split(';');
        f.img = [width.trim(), height.trim()];
      }

      f.format = c.format || f.format;
      f.scale = c.scale || f.scale || 0;
      f.align = c.align || f.align;
      f.onClick = c.onClick || f.onClick;
    }

    function addCol(col, elem) {
      if (elem.parent().prop('nodeName') === 'B-ROW') {
        g.colsDefault.push(angular.copy(col));
        g.cols.push(col);
      }
      addCols(col);
    }

    function addFilter(name, decorateWith, checkboxLimit, directive, extra, treeWithParent, dateLevel) {
      if (!extra) {
        g.defaultFilters.push({
          name: name,
          decorateWith: decorateWith,
          directive: directive,
          treeWithParent: treeWithParent,
          dateLevel: dateLevel
        });
      }

      g.filters.push({
        name: name,
        decorateWith: decorateWith,
        directive: directive,
        treeWithParent: treeWithParent,
        dateLevel: dateLevel
      });

      const f = getField(name);
      f.filter = true;
      f.decorateWith = decorateWith;
      f.checkboxLimit = checkboxLimit;
      f.treeWithParent = treeWithParent;
    }

    function setActionHtml(html) {
      g.actionHtml = '<div class="tbl-row-action"><div>' + html + '</div></div>';
    }

    function requiredFieldNames() {
      return _.chain(g.fields)
        .where({
          required: true
        })
        .pluck('name')
        .value();
    }

    function reduceFieldNames(rdc, col) {
      if (!col.name) return rdc;
      const asHtml = getField(col.name).asHtml;
      if (asHtml != true && _.has(g.asHtmls, asHtml)) {
        return _.union(rdc, g.asHtmls[asHtml].required.split(',').map(x => x.trim()).concat(col.name));
      }
      return _.union(rdc, [col.name, asHtml == true ? '' : asHtml]);
    }

    function fetch() {
      return promise.then(() => {
        const s = _.chain(g.cols)
            .flatten()
            .reduce(reduceFieldNames, [])
            .compact()
            .union(requiredFieldNames())
            .value();
        query.column(s);
        g.pinnedSort && query.sort(g.pinnedSort);

        if (isInit) {
          isInit = false;
          fixGridFilters();
        }

        return query.fetch();
      });
    }

    function rowAt(i) {
      return _.pick(query.result().table[i], requiredFieldNames());
    }

    function checkedApi(c) {
      const table = query.result().table;

      function pickedRows() {
        const r = [],
            rfn = requiredFieldNames();
        for (let i = 0; i < c.length; i++) {
          r.push(_.pick(table[c[i]], rfn));
        }
        return r;
      }

      return {
        has: c.length > 0,
        size: c.length,
        rows: pickedRows
      };
    }

    function loadImage(sha, width, height) {
      return bRoutes.LOAD_IMAGE + '&sha=' + sha + '&width=' + width + '&height=' + height;
    }

    // Calculate columns sizes
    function getTableSizes(withCheckbox) {
      let sizeArray = _.map(g.cols, function(c) {
        if (String(c.size).endsWith('%')) {
          return (parseFloat(c.size) || 1) + '%';
        } else {
          return (bConstants.CELL_SHARE * parseInt(c.size) + '%');
        }
      });

      if (withCheckbox) {
        sizeArray.unshift(bConstants.CELL_SHARE + "%");
      }
      return sizeArray;
    }

    function escapeRow(row) {
      return _.mapObject(row, (value, key) => {
        let asHtmls = _.keys(g.asHtmls);
        if (_.contains(asHtmls, key)) return value;
        return bConfig.escapeHtml(value);
      });
    }

    function htmlTable(withCheckbox) {
      let sizeArray = getTableSizes(withCheckbox);
      let rs = query.result().table,
          meta = query.result().meta || [],
          sortCol = _.first(query.sort()),
          sortDir = _.first(sortCol),
          s = '<div class="tbl-container"><div class="tbl" style="grid-template-columns:' + sizeArray.join(" ") + ' 1fr;">',
          formatNumber = $filter('bNumber');

      for (let i = 0; i < meta.length; i++) {
        if (meta[i][0] === 'column' && g.fields[meta[i][1]]) {
          g.fields[meta[i][1]].label = meta[i][2] || ' ';
        }
      }

      if (sortDir === '-') {
        sortCol = sortCol.substring(1);
      }

      s += '<div class="tbl-header">';

      for (let i = 0; i < g.cols.length; i++) {
        if (withCheckbox && i === 0) {
          s += '<div class="tbl-header-cell tbl-checkbox-cell"><label class="checkbox mt-0"><input type="checkbox" bcheckall=""/><span></span></label></div>';
        }
        let c = g.cols[i];

        if (c.name) {
          let f = g.fields[c.name],
          name = f.sortBy || c.name,
          attr = ' style="cursor:pointer;';

          if (f.align) {
            attr += ' text-align:' + f.align;
          }

          s += '<div class="tbl-header-cell"><div sort-header="' + name + '"' + attr + '" class="tbl-header-txt">' + (f.label || c.name);

          if (name === sortCol) {
            if (sortDir === '-') {
              s += '<span class="fa fa-angle-up ml-1"></span>';
            } else {
              s += '<span class="fa fa-angle-down ml-1"></span>';
            }
          }

          s += '</div></div>';
        } else {
          s += '<div class="tbl-header-cell">&nbsp;</div>';
        }
      }

      s += '<div class="tbl-header-cell tbl-empty-cell"></div>';
      s += '</div>';
      s += '<div class="tbl-body">';

      if (rs.length > 0) {
        for (let k = 0; k < rs.length; k++) {
          s += '<div class="tbl-row">';
          let row = rs[k];

          for (let i = 0; i < g.cols.length; i++) {
            if (i === 0 && withCheckbox) {
              s += `<div class="tbl-cell tbl-checkbox-cell"><label class="checkbox mt-0"><input type="checkbox" data-bcheck=${k}><span></span></label></div>`;
            }

            let c = g.cols[i];

            if (c.name) {
              let val = row[c.name];
              let f = g.fields[c.name];
              let valHtml = row[f.asHtml];
              let valImg = '';
              let attr = '';

              if (f.asHtml && g.asHtmls[f.asHtml]) {
                valHtml = row[f.asHtml] = g.asHtmls[f.asHtml].fn(escapeRow(row));
              }

              if (f.img && val) {
                valImg = `<img src="${loadImage(val, f.img[0], f.img[1])}"/>`;
              }

              if (f.format && val) {
                if (f.format === 'amount') {
                  val = formatNumber(val, f.scale, true);
                }
              }

              if (f.align) {
                attr = ' style="text-align:' + f.align + '"';
              }

              if (f.asHtml) {
                s += `<div class="tbl-cell"${attr}>${(valHtml || val)}</div>`;
              } else if (f.img) {
                s += `<div class="tbl-cell"${attr}>${(valImg)}</div>`;
              } else if (f.onClick) {
                s += `<div class="tbl-cell"${attr}><a href class="b-grid-cell" cn="${f.name}">${bConfig.escapeHtml(val)}</a></div>`;
              } else {
                s += `<div class="tbl-cell"${attr}>${bConfig.escapeHtml(val)}</div>`;
              }
            } else {
              s += `<div class="tbl-cell"></div>`;
            }
          }
          s += '<div class="tbl-cell tbl-empty-cell"></div>';
          s += '<sliding style="display : none; width:100%" class="closed-slider tbl-row-menu"></sliding>';
          s += '</div>';
        }
      } else {
        s += `<div class="tbl-row tbl-no-data-row"><i class="fas fa-exclamation-circle"></i>&nbsp;${bConfig.langs.grid_no_results}</div>`
      }

      s += '</div></div></div>';
      return s;
    }

    function evalFiltersData(filters) {
      return _.chain(filters)
        .map(function (f) {
          let field = getField(f.name);
          f = _.defaults({}, field, f);

          if (f.decorateWith && g.fields[f.decorateWith]) {
            f.label = g.fields[f.decorateWith].label || f.label;
          }

          if (f.label.trim()) {
            return f;
          }
        })
        .compact()
        .value();
    }

    function getFilters() {
      const list = angular.copy(g.filtersList);
      _.each(list, x => {
        x.filters = evalFiltersData(x.filters);
        x.code = _.uniqueId('grid')
      });

      const def = evalFiltersData(angular.copy(g.defaultFilters));
      const all = evalFiltersData(angular.copy(g.filters));

      return {
        list: list,
        def: def,
        all: all,
      };
    }

    function disableRevokedColumns() {
      if (_.any(g.fields, 'revoked')) {
        g.cols = _.reject(g.cols, c => g.fields[c.name].revoked);
        g.colsDefault = _.reject(g.colsDefault, c => g.fields[c.name].revoked);
        g.filters = _.reject(g.filters, c => g.fields[c.name].revoked || g.fields[c.decorateWith]?.revoked);
        g.defaultFilters = _.reject(g.defaultFilters, c => g.fields[c.name].revoked || g.fields[c.decorateWith]?.revoked);

        const search = [];
        _.each(g.fields, function(field) {
          if (field.revoked) {
            field.column = field.filter = field.search = field.searchable = false;
            field.pinnedSort = undefined;
            field.sortBy = undefined;
            field.onClick = undefined;
          }
          if (field.search) search.push(field.name);
        });
        query.searchFields(search);
      }
    }

    return {
      g: g,
      query: getQuery,
      getField,
      asHtml,
      addCols,
      addCol,
      addFilter,
      setActionHtml,
      fetch,
      rowAt,
      checkedApi,
      htmlTable,
      getFilters,
      saveSort,
      saveStorageFilter,
      disableRevokedColumns,
      saveSettingChanges
    };
  }

  return make;
});
biruni.factory('bGridScroll', function() {
  return function(name) {
    var g = {
      name: name,
      id: '',
      scroll: ''
    };

    function id(val) {
      if (arguments.length) {
        g.id = val;
      }
      return g.id;
    }

    function scroll(val) {
      if (arguments.length) {
        g.scroll = val;
      }
      return g.scroll;
    }

    return { id, scroll };
  };
});biruni.factory('bPgGrid', function($rootScope, $q, $http, bStorage, bRoutes, bConfig, bConstants) {

  function make(pg_name) {
    var name = pg_name;

    var g = {
      labelName: '',
      rownum: '',
      path: '',
      storageKey: '',
      withCheckbox: false,
      isInit: false,
      isStatic: false,
      fetchingId: 0,
      items: [],
      pageItems: [],
      filtered: [],
      cols: [],
      fields: [],
      colsDefault: [],
      customColSizes: {},
      freeCols: [],
      freeColAlign: 'top',
      freeColEnable: true,
      defaultSearch: [],
      defaultSearchable: [],
      defaultSearchNull: [],
      defaultSort: [],
      search: [],
      searchNull: [],
      filterFields: [],
      originFilters: [],
      filters: {},
      sortOrder: ['asc', 'desc', 'def'],
      sortValue: '',
      oldSortValue: '',
      sortType: '',
      searchValue: '',
      oldSearchValue: '',
      countableColumns: [],
      limits: [10, 50, 100, 500, 1000],
      currentLimit: 10,
      lastLimit: 10,
      pageNumbers: [],
      currentPage: 1,
      lastPage: 1,
      maxPage: 0,
      rowPerPageTitle: '',
      uncheckAll: null,
      onFilter: _.noop
    };

    function uncheckAll(fn) {
      if (typeof(fn) == "function") g.uncheckAll = fn;
      else if (g.uncheckAll) g.uncheckAll();
    }

    function getName() {
      return name;
    }

    function getLabelName() {
      return g.labelName;
    }

    function getPageItems() {
      return g.pageItems;
    }

    function freeColEnabled(status) {
      g.freeColEnable = !!status;
    }

    function reinitSettings() {
      g.cols = [];
      g.search = [];
    }

    function reload() {
      g.fetchingId = _.uniqueId();
    }

    function refresh(items) {
      if (items) {
        g.items = items;
      }

      reloadFiltered();
      reloadPageItems();
    }

    function onSort(val) {
      g.oldSortValue = g.sortValue;
      g.sortValue = val;

      if (g.sortValue == g.oldSortValue) {
        var ind = _.indexOf(g.sortOrder, g.sortType);
        if (ind < 2) {
          g.sortType = g.sortOrder[ind + 1];
        } else {
          g.sortType = g.sortOrder[0];
        }
      } else {
        g.sortType = g.sortOrder[0];
      }
      sortItems();
    }

    function sortItems() {
      if (g.sortValue && g.sortType) {
        let sort = g.sortValue;

        let field = _.findWhere(g.fields, {name: g.sortValue});
        if (field.format == 'amount' || field.format == 'number') {
          sort = (n) => +n[g.sortValue];

        } else if (field.format == 'date') {
          sort = n => {
            let x = moment(n[g.sortValue], field.date_format || 'DD.MM.YYYY HH:mm:ss').format('YYYYMMDDHHmmss');
            return !isNaN(+x) ? +x : -Infinity;
          };
        }

        if (g.sortType == 'asc') {
          g.filtered = _.sortBy(g.filtered, sort);
        } else if (g.sortType == 'desc') {
          g.filtered = g.filtered.reverse();
        } else if (g.sortType == 'def') {
          reloadFiltered();
        }

        setIndex();
        reloadPageItems();
      }
    }

    function onSearch() {
      if (g.searchValue != g.oldSearchValue) {
        g.oldSearchValue = g.searchValue;
        g.currentPage = 1;
        g.lastPage = 1;
        g.sortValue = '';
        g.oldSortValue = '';
        g.sortType = '';
        refresh();
      }
    }

    function setIndex() {
      let index = 1;
      _.each(g.filtered, x => x[g.rownum] = index ++ );
    }

    function filter(name, arg2, arg3) {
      switch (arguments.length) {
        case 3:
          var f = g.filters[name];
          if (!f) {
            g.filters[name] = { op: arg2, val: arg3 };
          } else {
            if (!_.isArray(f)) g.filters[name] = [f];
            g.filters[name].push({ op: arg2, val: arg3 });
          }
          break;
        case 2:
          g.filters[name] = { op: arg2, val: arg3 };
          break;
        case 1:
          if (_.isEmpty(name)) {
            g.filters = {};
            g.originFilters = {};
          }
      }
      return g.filters[name];
    }

    function filterOper(left, operator, right) {
      switch (operator) {
        case '=': return left == right; break;
        case '!=': return left != right; break;
        case '%': return String(left).toLowerCase().indexOf(right.toLowerCase()) > -1; break;
        case '!%': return String(left).toLowerCase().indexOf(right.toLowerCase()) == -1; break;
        case '>': return left > right; break;
        case '>=': return left >= right; break;
        case '<': return left < right; break;
        case '<=': return left <= right; break;
      }
    }

    function date2text(dt) {
      if (!dt) return null;
      var dt = dt.split(' ')[0] || null;
      return dt?.split('.').reverse().join('') || null;
    }

    function filterItem(item) {
      return _.all(g.filters, (f, name) => {
        var field = _.findWhere(g.filterFields, { name });
        if (!field) return;
        let fnc;
        if (field.type == 'number') fnc = parseFloat;
        else if (field.type == 'date') fnc = date2text;
        else fnc = String;

        if (_.isArray(f)) {
          var boolFnc = field.equal && f[0].op == '=' || f[0].op == '<' ? _.any : _.all;
          return boolFnc(f, v => filterOper(fnc(item[name]), v.op, fnc(v.val)));
        } else {
          return filterOper(fnc(item[name]), f.op, fnc(f.val));
        }
      });
    }

    function reloadFiltered() {
      if (g.searchValue || !_.isEmpty(g.filters)) {
        g.filtered = _.filter(g.items, function(item) {
          if (!filterItem(item)) return false;
          // return all rows if searchValue is null
          return !g.searchValue ||
          _.any(g.search, s => 
              // filter rows which are Null
              _.contains(g.searchNull, s) && _.isEmpty(item[s]) ||
              // return rows which are matched by searchValue
              String(item[s]).toLowerCase().indexOf(g.searchValue.toLowerCase()) > -1
          );
        });
      } else {
        g.filtered = g.items;
      }

      setIndex();

      g.maxPage = getMaxPage();
      g.currentPage = Math.max(1, Math.min(g.currentPage, g.maxPage));
      g.onFilter(g.filtered);
    }

    function reloadPageItems() {
      g.pageItems = makePageItems();
      g.pageNumbers = getPageNumbers();

      if (g.countableColumns && g.countableColumns.length > 0) {
        g.rowPerPageTitle = String(calcLength(g.pageItems)) + ' / ' + String(calcLength(g.filtered));
      } else {
        g.rowPerPageTitle = String(g.pageItems.length) + ' / ' + String(g.filtered.length);
      }
    }

    function calcLength(arr){
      if (arr && arr.length)
        return arr.reduce((acc, row) => checkCountableColumnExist(row) ? acc + 1 : acc, 0);
      return 0;
    }

    function checkCountableColumnExist(obj){
      for (let key of g.countableColumns){
        if (!obj[key]) return false;
      }
      return true;
    }

    function makePageItems() {
      var left = Math.max((g.currentPage - 1) * g.currentLimit, 0),
      right = Math.min(g.currentPage * g.currentLimit, g.filtered.length);
      return g.filtered.slice(left, right);
    }

    function getPageNumbers() {
      var r = [];
      for (var i = Math.max(1, g.currentPage - 4); i <= Math.min(g.maxPage, g.currentPage + 4); i++)
        r.push(i);
      return r;
    }

    function getMaxPage() {
      return Math.trunc((g.filtered.length + g.currentLimit - 1) / g.currentLimit);
    }

    function changeCurrentPage() {
      if (g.currentPage != g.lastPage) {
        g.lastPage = g.currentPage;
        reloadPageItems();
      }
    }

    function checkedApi(indexes) {
      function pickedRows() {
        var r = [];
        _.each(indexes, function(x) {
          r.push(g.pageItems[x]);
        });
        return r;
      }

      return {
        has : indexes.length > 0,
        size : indexes.length,
        rows : pickedRows
      };
    }

    // Calculate columns sizes
    function getTableSizes() {
      let result = _.map(g.cols, function(c) {
        if (String(c.size).endsWith('%')) {
          return (parseFloat(c.size) || 1) + '%';
        } else {
          return (bConstants.CELL_SHARE * parseInt(c.size) + '%');
        }
      });

      if (g.withCheckbox) {
        result.unshift(bConstants.CELL_SHARE + "%");
      }

      return result;
    }

    function drawHtml(iterator = 'row') {
      var first = true,
          hRow = '',
          fRows = '',
          hCells = '',
          bRow = '',
          bCells = '',
          result = '';
      let sizeArray = getTableSizes();

      if (g.cols.length > 0) {
        hCells = '';
        bCells = '';
        _.each(g.cols, function(cell) {
          if (cell.name) {
            var field = _.findWhere(g.fields, {name: cell.name});
            if (field) {
              if (field.header != undefined) {
                hCells += `<div class="tbl-header-cell"><div class="tbl-header-txt">${field.header}</div></div>`;
              } else {
                var sort = field.sort ? `sort="${field.name}"` : '';
                var sortIcon = field.sort ?
                `&nbsp;<i class="fa fa-angle-down" ng-show="g.sortValue == '${field.name}' && g.sortType == 'asc'"></i>
                <i class="fa fa-angle-up" ng-show="g.sortValue == '${field.name}' && g.sortType == 'desc'"></i>` : '';

                hCells += `<div class="tbl-header-cell" style="cursor:pointer;"><div ${sort} class="tbl-header-txt">${field.label}${sortIcon}</div></div>`;
              }

              if (g.hasNavigate && field.onNavigate) {
                bCells += `<div class="tbl-cell" ng-on-eventfocus="${field.onNavigate.split('(')[0]}($event.detail)">`;
              } else {
                bCells += `<div class="tbl-cell">`;
              }

              if (field.child) {
                bCells += field.child + `</div>`;
              } else {
                if (field.static) {
                  bCells += `{{::`;
                } else {
                  bCells += `{{`;
                }

                if (field.format == 'amount') {
                  bCells += `${iterator}.${field.name} | bNumber}}</div>`;
                } else {
                  bCells += `${iterator}.${field.name}}}</div>`;
                }
              }
            } else {
              hCells += `<div class="tbl-header-cell"></div>`;
              bCells += `<div class="tbl-cell"></div>`;
            }
          } else {
            hCells += `<div class="tbl-header-cell"></div>`;
            bCells += `<div class="tbl-cell"></div>`;
          }
        });
        hCells += `<div class="tbl-header-cell tbl-empty-cell"></div>`;
        bCells += `<div class="tbl-cell tbl-empty-cell"></div>`;

        if (hCells.length > 0) {
          hRow += `<div class="tbl-header pg-grid-header">`;

          if (first) {
            first = false;

            if (g.withCheckbox) {
              hRow += `<div class="tbl-header-cell tbl-checkbox-cell">
                          <label class="checkbox mt-0">
                            <input type="checkbox" bcheckall=""/>
                            <span></span>
                          </label>
                        </div>`;
              bRow += `<div class="tbl-cell tbl-checkbox-cell">
                          <label class="checkbox mt-0">
                            <input type="checkbox" data-bcheck='{{$index}}'/>
                            <span></span>
                          </label>
                        </div>`;
            }
          }

          hRow += hCells + `</div>`;
          bRow += bCells;
        }

        if (g.freeCols.length > 0) {
          fRows = '<div class="tbl-row" ng-if="g.freeColEnable">';

          _.each(g.freeCols, function(col) {
            fRows += `<div class="tbl-cell tbl-free-cell">`;
            fRows += col.child || '&nbsp;';
            fRows += '</div>';
          });

          fRows += '</div>';
        }

        if (hRow.length > 0) {
          result = `<div class="tbl-container">
                      <div class="tbl" style="grid-template-columns: ${sizeArray.join(" ")} 1fr;">
                        ${hRow}
                        <div class="tbl-body">
                        ${g.freeColAlign == 'top'? fRows: ''}
                        <div class="tbl-row" ng-repeat="${iterator} in g.pageItems">${bRow}</div>
                        <div ng-if="!g.pageItems.length" class="tbl-row tbl-no-data-row"><i class="fas fa-exclamation-circle"></i>&nbsp;${bConfig.langs.grid_no_results}</div>
                        ${g.freeColAlign == 'bottom'? fRows: ''}
                      </div>
                    </div>
                    </div>`;
        }
      }
      return result;
    }

    function loadSetting(storageKey) {
      if ($rootScope.is_debug) return $q.all([]);
      return $http.post(bRoutes.LOAD_USER_LARGE_SETTING, {
        setting_code: storageKey
      }).then(function(result) {
        if (result.data) {
          bStorage.json(storageKey, result.data);
        } else {
          bStorage.text(storageKey, null);
        }
      }, function(error) {
        console.error('pg_grid setting load', error);
      });
    }

    function customColSize(name, size) {
      g.customColSizes[name] = size;
    }

    return {
      g: g,
      getName: getName,
      getLabelName: getLabelName,
      getPageItems: getPageItems,
      freeColEnabled: freeColEnabled,
      reinitSettings: reinitSettings,
      loadSetting: loadSetting,
      reload: reload,
      refresh: refresh,
      filter: filter,
      onSort: onSort,
      onSearch: onSearch,
      changeCurrentPage: changeCurrentPage,
      checkedApi: checkedApi,
      drawHtml: drawHtml,
      uncheckAll: uncheckAll,
      customColSize: customColSize
    }
  }

  return make;
});
biruni.factory('bBasePage', function ($q, $http, $compile, $injector, bHttp, bQuery, bGridScroll, bGrid, bAlert, bConfirm, bConfig, bRequire, bRoutes, bPgGrid, bHotkey, bPreview, bFaceCropper) {

  function makeGridApi(grid) {

    function enable() {
      grid.g.enabled = true;
    }

    function disable() {
      grid.g.enabled = false;
    }

    return {
      enable: enable,
      disable: disable,
      fetch: grid.fetch,
      asHtml: grid.asHtml
    };
  }

  function makeApi(page) {

    function showPageBar(val) {
      page.show_bar = val;
    }

    function setTitle(title) {
      return arguments.length ? page.title = title : page.title;
    }

    function setRequire(...arg) {
      page.requires = _.chain(arg).flatten().compact().uniq().value();
    }

    function setInit(initFn) {
      page.onInit = initFn;
    }

    function setCtrl(ctrlFn) {
      page.onCtrl = ctrlFn;
    }

    function formValid(form) {
      form.$setSubmitted();
      return form.$valid;
    }

    function setUntouched(form) {
      form.$setPristine();
      form.$setUntouched();
    }

    function isDialog() {
      return page.is_dialog;
    }

    function isInit() {
      return page.is_init;
    }

    function isFirst() {
      return page.is_first;
    }

    function emit(action, data) {
      if (_.isFunction(page.emitCallbacks[action])) {
        page.emitCallbacks[action](data);
      }
    }

    function on(action, callback) {
      if (_.isFunction(callback)) {
        page.broadcastCallbacks[action] = callback;
      }
    }

    function makeUrl(name, data) {
      var r = 'b' + page.path;
      if (name) {
        r += ':' + name;
      }
      data = _.defaults({}, data || {});
      var auths = bConfig.auths();
      for (var k in auths) {
        data['-' + k] = auths[k];
      }
      return r + '?' + $.param(data, true);
    }

    function makeUploadParamsUrl(name, data) {
      return bHttp.postData(bRoutes.UPLOAD_URL_PARAMS, data).then(
        (result) =>  {
          return makeUrl(name, {sha: result.data});
        },
        (error)=> {
          bAlert.open(error);
          return "";
        }
      );
    }

    function getGrid(name) {
      return makeGridApi(page.grid(name));
    }

    function isInFullscreen() {
      if (document.fullscreenElement) {
        return true;
      } else if (document.webkitFullscreenElement) {
        return true;
      } else return !!document.mozFullScreenElement;
    }

    function launchFullscreen(elem) {
      if (elem.requestFullScreen) {
        elem.requestFullScreen();
      } else if (elem.mozRequestFullScreen) {
        elem.mozRequestFullScreen();
      } else if (elem.webkitRequestFullScreen) {
        elem.webkitRequestFullScreen();
      }
    }

    function cancelFullscreen() {
      if (document.cancelFullScreen) {
        document.cancelFullScreen();
      } else if (document.mozCancelFullScreen) {
        document.mozCancelFullScreen();
      } else if (document.webkitCancelFullScreen) {
        document.webkitCancelFullScreen();
      }
    }

    function saveFile(file) {
      return bHttp.postFileAlone(file).then(result => {
        return {
          sha: result.data,
          name: file.name,
          size: file.size,
          type: file.type
        };
      });
    }

    function loadImage(sha, width, height) {
      let url = bRoutes.LOAD_IMAGE + '&sha=' + sha;
      let width_num = +width;
      let height_num = +height;
      // skips if width and height are not specified
      if (width_num >= 10 && height_num >= 10) {
        url += `&width=${ width_num }&height=${ height_num }`;
      }
      return url;
    }

    function loadImageSmall(sha) {
      return bRoutes.LOAD_IMAGE + '&sha=' + sha + "&type=S";
    }

    function loadImageMedium(sha) {
      return bRoutes.LOAD_IMAGE + '&sha=' + sha + "&type=M";
    }

    function loadImageLarge(sha) {
      return bRoutes.LOAD_IMAGE + '&sha=' + sha + "&type=L";
    }

    function loadFile(sha) {
      return bRoutes.LOAD_FILE + "?sha=" + sha;
    }

    function downloadFile(sha) {
      return bRoutes.DOWNLOAD_FILE + "?sha=" + sha;
    }

    function prefClear(callback, unblock) {
      bConfirm.confirm(bConfig.langs.pref_clear, function() {
        callback = callback ? callback : page.reload;
        $http.post(bRoutes.PREFERENCES_CLEAR, { form: page.path }, { unblock: !!unblock }).then(callback);
      });
    }

    return {
      id: () => page.id,
      require: setRequire,
      init: setInit,
      ctrl: setCtrl,
      title: setTitle,
      header: showPageBar,
      open: page.open,
      openDialog: page.openDialog,
      openReplace: page.openReplace,
      openClear: page.openClear,
      close: page.close,
      reload: page.run,
      bindHotkey: page.bindHotkey,
      previewFile: page.previewFile,
      faceCropper: page.faceCropper,
      post: page.post,
      query: page.query,
      grid: getGrid,
      pgGrid: page.pgGrid,
      dropzone: page.dropzone,
      getMap: page.getMap,
      storage: page.storage,
      valid: formValid,
      untouch: setUntouched,
      alert: bAlert.open,
      confirm: bConfirm.confirm,
      isDialog: isDialog,
      isInit: isInit,
      isFirst: isFirst,
      emit: emit,
      on: on,
      url: makeUrl,
      uploadParamsUrl: makeUploadParamsUrl,
      isInFullscreen: isInFullscreen,
      launchFullscreen: launchFullscreen,
      cancelFullscreen: cancelFullscreen,
      saveFile: saveFile,
      loadImage: loadImage,
      loadImageSmall: loadImageSmall,
      loadImageMedium: loadImageMedium,
      loadImageLarge: loadImageLarge,
      loadFile: loadFile,
      downloadFile: downloadFile,
      prefClear: prefClear
    };
  }

  function justifyName(name, prefix) {
    if (/^[:$]?[A-Za-z0-9_]+$/.test(name)) {
      if (/^[:$]/.test(name)) {
        return name;
      } else {
        return prefix + name;
      }
    } else {
      throw 'Invalid action name';
    }
  }

  function showElem(elem) {
    elem.find('[data-toggle="popover"]').popover();
    elem.show();
  }

  function formUrl(path, param) {
    var r = angular.copy(param);
    return path + '?' + $.param(r);
  }

  function notImplemented(key) {
    return function() {
      throw `${key} function is not implemented`;
    }
  }

  function Page(path, param, xparam) {
    var t = this;
    t.path = path;
    t.param = param;
    t.xparam = xparam;

    t.queries = {};
    t.gridScrolls = {};
    t.grids = {};
    t.pgGrids = {};
    t.maps = {};
    t.hotkeys = {};
    t.storageValue = {};

    t.emitCallbacks = {};
    t.broadcastCallbacks = {};

    //@overide functions
    t.openFunc        = notImplemented("open");
    t.openDialogFunc  = notImplemented("openDialog");
    t.openReplaceFunc = notImplemented("openReplace");
    t.openClearFunc   = notImplemented("openClear");
    t.closeFunc       = notImplemented("close");
    t.runFunc         = notImplemented("run");

    // open pages
    t.open        = function(...args) { t.openFunc(...args); }
    t.openDialog  = function(...args) { t.openDialogFunc(...args); }
    t.openReplace = function(...args) { t.openReplaceFunc(...args); }
    t.openClear   = function(...args) { t.openClearFunc(...args); }
    t.close       = function(...args) { t.closeFunc(...args); }
    t.run         = function(...args) { t.runFunc(...args); }

    t.addApi      = addApi;
    t.setDialog   = setDialog;
    t.setFirst    = setFirst;
    t.setTitle    = setTitle;
    t.setFavorite = _.noop;

    t.bindHotkey = bindHotkey;
    t.previewFile = previewFile;
    t.faceCropper = faceCropper;
    t.query = query;
    t.post = post;
    t.gridScroll = gridScroll;
    t.grid = grid;
    t.pgGrid = pgGrid;
    t.dropzone = dropzone;
    t.getMap = getMap;
    t.broadcast = broadcast;
    t.storage = storage;
    t.on = on;

    t.reload = reload;
    t.translate = translate;

    t.pureLangs = {};

    t.langs = {};
    t.langsNew = {};
    t.langsSuppress = [];

    t.is_init = true;
    t.is_first = true;
    t.show_bar = true;
    t.is_dialog = false;

    t.api = makeApi(t);
    t.api.prefClear.title = bConfig.langs.pref_clear;
    t.api.close.title = bConfig.langs.close;

    function addApi(api_key, func) {
      t.api[api_key] = func;
    }

    function setDialog(value) {
      t.is_dialog = !!value;
    }

    function setFirst(value) {
      t.is_first = !!value;
    }

    function setTitle(title) {
      t.title = title;
    }

    function storage(val) {
      if (arguments.length > 0) {
        t.storageValue = val;
      }
      return t.storageValue;
    }

    function bindHotkey(combination, callback) {
      assert(_.isString(combination) && combination, "Invalid hotkey combination");

      t.hotkeys[combination] = bHotkey(combination, callback);
    }

    function previewFile(file) {
      bPreview.open(file);
    }

    function faceCropper(file, onCrop, rounded, faceShaped) {
      bFaceCropper.open(file, onCrop, rounded, faceShaped);
    }

    function post(name, data, type, headers) {
      return bHttp.postData(t.path + justifyName(name, '$'), data, type, headers).then(function (r) {
        return r.data;
      });
    }

    function query(name) {
      assert(_.isString(name) && name, "Invalid query name");

      name = justifyName(name, ':');
      var key = name.substr(1);
      return !t.queries[key] ? t.queries[key] = bQuery(t.path + name) : t.queries[key];
    }

    function gridScroll(name, val) {
      assert(_.isString(name) && name, "Invalid grid name");

      name = t.path + ':' + name;
      return !t.gridScrolls[name] ? t.gridScrolls[name] = bGridScroll(name) : t.gridScrolls[name];
    }

    function grid(name) {
      assert(_.isString(name) && name, "Invalid grid name");

      return !t.grids[name] ? t.grids[name] = bGrid(query(name)) : t.grids[name];
    }

    function pgGrid(name) {
      assert(_.isString(name) && name, "Invalid pgGrid name");

      return !t.pgGrids[name] ? t.pgGrids[name] = bPgGrid(name) : t.pgGrids[name];
    }

    function dropzone(name) {
      // TODO review & multiselect
      assert(_.isString(name) && name, "Invalid dropzone name");

      var $dropzoneElem = t.elem.find(`b-dropzone[name="${name}"]`);

      if ($dropzoneElem.length > 0) {
        return $dropzoneElem.scope().$bDropzone;
      } else {
        console.error('Dropzone not found');
        return {};
      }
    }

    function getMap(name, $mapFrame) {
      assert(_.isString(name) && name, "Invalid map name");

      var g = t.maps[name];
      if (!g) {
        assert($mapFrame && $mapFrame.length, "Map frame is not given");
        g = bConfig.makeMapApi($mapFrame);
        t.maps[name] = g;
      }
      return g;
    }

    function broadcast(action, data) {
      if (_.isFunction(t.broadcastCallbacks[action])) {
        t.broadcastCallbacks[action](data);
      }
    }

    function on(action, callback) {
      if (_.isFunction(callback)) t.emitCallbacks[action] = callback;
    }

    function reload() {
      assert(_.isString(t.path) && t.path, "basePage path is not defined");

      t.id = _.uniqueId();
      t.formUrl = formUrl(t.path, t.param);
      t.saved = false;
      t.title = '';
      t.requires = [];
      t.onInit = null;
      t.onCtrl = null;
      t.qLoaded = $q.defer();

      t.qModel = post(':model', t.param, null, {
        formurl : t.formUrl.length > 2000 ? '' : t.formUrl
      });

      t.qContentLink = $q.defer();

      t.grids = {};
      t.pgGrids = {};
      t.maps = {};

      load().then(onDone, onFail);
    }

    function message(s, ps) {
      for (var i = 0; ps && i < ps.length; i++) {
        s = s.replace('$' + (i + 1), ps[i]);
      }
      return s;
    }

    function translate(key, ps) {
      key = (key || '').trim();
      if (!key) {
        console.error('Empty lang key');
        return key;
      }
      t.langsNew[key] = true;
      var v = t.langs[key];
      if (!v) {
        t.langs[key] = key;
        v = key;
      }
      return message(v, ps);
    }

    function translateApi(key) {
      key = translate(key);
      return function () {
        return message(key, _.toArray(arguments));
      }
    }

    translateApi.suppress = function () {
      _.each(arguments, function (k) {
        t.langsSuppress.push(k);
      });
    };

    function callInit(fn, scope, qModel) {
      if (_.isFunction(fn)) {
        try {
          $injector.invoke(fn, null, {
            scope: scope,
            qModel: qModel,
            param: angular.copy(t.param),
            xparam: angular.copy(t.xparam),
            t: translateApi
          });
        } catch (e) {
          console.error(e);
          return {
            reason: e,
            type: 'script',
            message: 'Script error: page.init <code>' + (e.message || e) + '</code> in ' + t.path
          };
        }
      }
    }

    function callCtrl(fn, scope, model) {
      var act = {
        post : post,
        S : t.open,
        D : t.openDialog,
        R : t.openReplace,
        C : t.openClear
      };
      var fi;

      if (_.isArray(model) && model.length === 4 && model[0] === '(^_^)') {
        t.setTitle(model[1].title);
        t.siblings = model[3];
        fi = makeFormInfo(act, model[1]);
        t.fi = fi;
        scope.fi = fi;
        model = model[2];

        t.setFavorite(fi.isFavorite);
      }

      if (_.isFunction(fn)) {
        try {
          $injector.invoke(fn, null, {
            scope : scope,
            model : model,
            param : angular.copy(t.param),
            xparam: angular.copy(t.xparam),
            fi : fi,
            t : translateApi
          });
        } catch (e) {
          console.error(e);
          return {
            reason : e,
            type : 'script',
            message : 'Script error: page.ctrl <code>' + (e.message || e) + '</code> in ' + t.path
          };
        }
      }
    }

    function makeScript(scr) {
      /*
        when 2nd argument passed to page.ctrl as 'autoscope'
        all public functions of context will be assigned to 'scope'
      */
      scr = scr || "";
      var ctrl = /(page\.ctrl\s*\(\s*function\s*\(.*?\)\s*{)([^]*)(}\s*\))/g;
      var rx_res = ctrl.exec(scr);
      if (rx_res) {
        var rx = /\Wfunction\s+(\w+)/g,
            eval_to_scope = '';
        while(res = rx.exec(rx_res[2])) {
          if (!res[1].startsWith("_")) {
            eval_to_scope += "  evalToScope('" + res[1] + "');\n";
          }
        }
        if (eval_to_scope.length > 0) {
          eval_to_scope = "\n  function evalToScope(fn) { try { scope[fn] = eval(fn); } catch(e) {}}\n" + eval_to_scope;
        }
        scr = scr.replace(ctrl, '$1$2' + eval_to_scope + '})');
      }
      return scr;
    }

    function onDone(data) {
      var scope = data.scope;

      scope.bPage = t;

      t.pureLangs = data.lang;
      t.custom_langs = angular.copy(data.custom_lang);
      t.langs = angular.copy(data.lang);
      t.tour = angular.copy(data.tour);

      _.each(t.custom_langs, (v, k) => {
        if (!!v) t.langs[k] = v;
      });

      t.elem = data.elem;
      t.elem.empty();
      t.elem.append(data.toolbar);
      t.elem.append(data.content);

      scope.page = t.api;

      t.api.$toolbar = t.elem.find("div.b-toolbar");
      t.api.$content = t.elem.find("div.b-content");

      var e = callScript(scope.page, data.script);
      if (e) {
        e.message += ' in ' + t.path;
        return onFail(e);
      }

      bRequire.load(...t.requires).then(x=> {
        if (t.is_init) {
          bindHotkey('alt+q', t.close);
          bindHotkey('alt+r', t.run);
        }

        e = callInit(t.onInit, scope, t.qModel);
        if (e)
          return onFail(e);

        $compile(t.elem.contents())(scope);

        t.qModel.then(function (model) {
          callCtrl(t.onCtrl, scope, model);
          if (e)
            return onFail(e);
          showElem(t.elem);
          t.qLoaded.resolve(data);
          t.is_init = false;
        }, onFail);
      });
    }

    function onFail(error) {
      t.qContentLink.promise.then(function (c) {
        c.elem.show();
        switch (error.type) {
          case "html404":
            c.elem.html('<ng-include src="\'page_not_found.html\'"/>');
            $compile(c.elem.contents())(c.scope);
            break;
          default:
            c.elem.html('<ng-include src="\'page_error.html\'"/>');
            bAlert.open(error);
        }
      });
    }

    function load() {
      var qHtml = bHttp.fetchHtml(t.path),
          qLang = $q.all([bHttp.fetchLang(t.path), bHttp.fetchCustomLang(t.path)]),
          qTour = bHttp.fetchTour(t.path);         

      function onHtmlDone(html) {
        const $q = $('<div></div>').html(html),
        script = makeScript($q.children('script[type=biruni],script[biruni]').first().text()), // TODO: remove [type="biruni"] after converting all html files to [biruni]
        toolbar = $q.children('div.b-toolbar').first(),
        content = $q.children('div.b-content').first();

        return qLang.then(function (lang) {
          var translates = {};
          for (let k in lang[0]) {
            let translate = '';

            if (typeof lang[0][k] === 'object') {
              translate = lang[0][k].translate;
              // DEPRECATED: after converting the values in the JSON files from string to object, the check for object in else is removed.
            } else {
              translate = lang[0][k]
            }
            translates[k] = translate;
          }

          return {
            script      : script,
            toolbar     : toolbar,
            content     : content,
            lang        : translates,
            custom_lang : lang[1]
          }
        });
      }

      function onLangDone(data) {
        return t.qContentLink.promise.then(function (link) {
          data.elem = link.elem;
          data.scope = link.scope;
          return data;
        });
      }

      function onTourDone(data) {
        return qTour.then(function(tour){
          data.tour = tour;
          return data;
        })
      }

      t.qLoaded.promise.then(() => {
        AppSignal.emit('bBasePage.load', {
          origin: window.location.origin,
          path: t.path,
          title: t.title,
          param: t.param,
          xparam: t.xparam,
        });
      });

      return qHtml
      .then(onHtmlDone)
      .then(onLangDone)
      .then(onTourDone);
    }
  }

  function makeFormInfo(act, fi) {
    var ls = _.mapMatrix(fi.actions || [], ['key', 'title', 'uri', 'type']),
    r = {};
    function create(key, uri, type) {
      if (uri) {
        return _.partial(act[type], uri);
      } else {
        var func = _.partial(act.post, key);

        return function(...args) {
          if (func.running) return $q(function() {return null;})
          func.running = true;
          return func(...args).finally(function() {
            func.running = false;
          });
        }
      }
    }
    for (var i = 0; i < ls.length; i++) {
      var m = ls[i];
      r[m.key] = create(m.key, m.uri, m.type);
      r[m.key].uri = m.uri;
      r[m.key].title = m.title;
    }
    r.isHead = fi.filial_head === 'Y';
    r.isFilial = fi.filial_head !== 'Y';
    r.isFavorite = fi.favorite == 'Y';
    r.form = fi.form;
    return r;
  }

  return function (path, param, xparam) {
    return new Page(path, param, xparam);
  };
});
biruni.factory('bPage', function (bBasePage) {
  return function (hash, path, param, xparam) {
    var base = bBasePage(path, param, xparam);

    base.pageType = function() { return "parent"; }

    base.hash = hash;
    base.subpages = {};

    function subpage(name) {
      assert(_.isString(name) && name, "Invalid subpage name");

      assert(base.subpages[name], `Subpage is not defined, name: ${name}`);

      return base.subpages[name];
    }

    function addSubpage(name, subpage) {
      assert(subpage, "Subpage is undefined");

      base.subpages[name] = subpage;
    }

    // add new functions

    base.subpage = subpage;
    base.addSubpage = addSubpage;

    // add api

    base.addApi("subpage", subpage);

    // @overide functions

    let reload = base.reload;
    base.reload = function() {
      $('html').animate({ scrollTop: 0 }, 200);
      base.subpages = {};
      reload();
    };

    let setTitle = base.setTitle;
    base.setTitle = function(title) {
      document.title = title;
      setTitle(title);
    }

    base.reload();

    return base;
  };
});biruni.factory('bSubpage', function (bBasePage) {

  return function (path, param, xparam) {
    var base = bBasePage(path, param, xparam);

    base.pageType = function() { return "subpage"; }

    let reload = base.reload;
    base.reload = function(__path, __param, __xparam) {
      if (arguments.length > 0 && !_.isEmpty(__path)) {
        base.path = __path;
        base.param = __param || {};
        base.xparam = __xparam || {};
      }
      reload();
    };


    return base;
  };
});biruni.factory('bFrame', function (bConfig, $location, bPage) {
  function parseUrl() {
    let url = $location.$$path, param = angular.copy($location.$$search), type, path, pure_param;
    if (url) {
      if (url.startsWith("/!")) {
        let ind = url.indexOf("/", 1);
        if (ind > 0) {
          let hash = parseInt(url.substring(2, ind), 36).toString();
          if (hash.length > 7) {
            type = "ready";
            param["-project_hash"] = hash.substr(5, 2);
            param["-filial_id"] = hash.substr(7);
          }
          path = url.substr(ind);
        }
      } else if (_.has(param, '-filial_id') && _.has(param, '-project_code')) {
        type = "normalize";
        path = url;
      }
    } else type = "redirect";

    pure_param = angular.copy(param);
    // remove unnecessary keys
    delete pure_param["-mobile"];
    delete pure_param["-filial_id"];
    delete pure_param["-project_hash"];
    delete pure_param["-project_code"];

    return {
      type: type,
      url: url,
      path: path,
      param: param,
      pure_param: pure_param
    };
  }

  function refreshIds() {
    f.pageIds = [];
    for (var i = 0; i < f.pages.length; i++) {
      if (i === f.pages.length - 1 || f.pages[i].saved) {
        f.pageIds.push(f.pages[i].id);
      }
    }
  }

  function onLocationChange(parsed_url) {
    let i = _.findIndex(f.pages, { hash: parsed_url.url });
    if (i > -1) {
      let p = f.pages[i];
      if (f.pages.length !== i + 1 && p.saved === false) {
        p.reload();
      }
      f.pages = _.first(f.pages, i + 1);
      p.qLoaded.promise.then(function () {
        p.saved = false;
        if (_.isFunction(p.onRestart)) {
          let rd = p.restartData;
          p.restartData = undefined;
          p.onRestart(rd);
        }
        document.title = p.title;
      });
    } else {
      f.pages = [bPage(parsed_url.url, parsed_url.path, parsed_url.pure_param || {}, {})];
    }

    refreshIds();
  }

  function open(path, param, fn, xparam, pure) {
    var p = _.last(f.pages);
    if (p && _.isFunction(fn)) {
      p.onRestart = _.once(fn);
    }
    var url = (pure ? '' : bConfig.pathPrefix()) + path;
    f.pages.push(bPage(url, path, param || {}, xparam || {}));
    $location.path(url);
    $location.search(param || {});
  }

  function openDialog(path, param, fn, xparam, pure) {
    _.last(f.pages).saved = true;
    open(path, param, fn, xparam, pure);
  }

  function openReplace(path, param, xparam, pure) {
    let subpage;
    if (f.pages.length > 0) {
      subpage = Object.values(f.pages[f.pages.length - 1].subpages).find(sb=>sb.path == path);
      if(!subpage){
        f.pages.pop();
      }
    }
    if (subpage) {
      subpage.run(path, param, xparam);
    } else {
      open(path, param, null, xparam, pure);
      $location.replace();
    }
  }

  function openClear(path, param, xparam, pure) {
    f.pages = [];
    refreshIds();
    open(path, param, null, xparam, pure);
  }

  function openWindow(uri, param) {
    var data = _.defaults({}, param || {});
    var auths = bConfig.auths();
    for (var k in auths) {
      data['-' + k] = auths[k];
    }
    window.open('b' + uri + '?' + $.param(data, true));
  }

  function close(data) {
    if (f.pages.length > 1) {
      var p = f.pages[f.pages.length - 2];
      p.restartData = data;
    }
    window.history.back();
  }

  function pageTitle() {
    if (f.pages.length > 0) {
      return f.pages[f.pages.length - 1].title;
    }
    return '';
  }

  function findPage(pageId) {
    return _.findWhere(f.pages, {
      id : pageId
    });
  }

  function breadcrumbPages() {
    return _.initial(f.pages).reverse();
  }

  function formSiblings() {
    return _.last(f.pages).siblings || [];
  }

  var f = {
    pages : [],
    pageIds : [],
    parseUrl: parseUrl,
    refreshIds: refreshIds,
    open : open,
    openDialog : openDialog,
    openReplace : openReplace,
    openClear : openClear,
    openWindow: openWindow,
    close : close,
    onLocationChange : onLocationChange,
    pageTitle : pageTitle,
    setFavorite: _.noop,
    findPage : findPage,
    breadcrumbPages : breadcrumbPages,
    formSiblings : formSiblings
  };

  return f;
});
biruni.factory('bHotkey', function ($timeout) {
  var key_info = [
    { "name": "backspace", "key": "Backspace", "code": "Backspace", "keyCode": 8 },
    { "name": "tab", "key": "Tab", "code": "Tab", "keyCode": 9 },
    { "name": "enter", "key": "Enter", "code": "Enter", "keyCode": 13 },
    { "name": "shift(left)", "key": "Shift", "code": "ShiftLeft", "keyCode": 16 },
    { "name": "shift(right)", "key": "Shift", "code": "ShiftRight", "keyCode": 16 },
    { "name": "ctrl(left)", "key": "Control", "code": "ControlLeft", "keyCode": 17 },
    { "name": "ctrl(right)", "key": "Control", "code": "ControlRight", "keyCode": 17 },
    { "name": "alt(left)", "key": "Alt", "code": "AltLeft", "keyCode": 18 },
    { "name": "alt(right)", "key": "Alt", "code": "AltRight", "keyCode": 18 },
    { "name": "pause/break", "key": "Pause", "code": "Pause", "keyCode": 19 },
    { "name": "caps lock", "key": "CapsLock", "code": "CapsLock", "keyCode": 20 },
    { "name": "escape", "key": "Escape", "code": "Escape", "keyCode": 27 },
    { "name": "space", "key": "", "code": "Space", "keyCode": 32 },
    { "name": "page up", "key": "PageUp", "code": "PageUp", "keyCode": 33 },
    { "name": "page down", "key": "PageDown", "code": "PageDown", "keyCode": 34 },
    { "name": "end", "key": "End", "code": "End", "keyCode": 35 },
    { "name": "home", "key": "Home", "code": "Home", "keyCode": 36 },
    { "name": "left arrow", "key": "ArrowLeft", "code": "ArrowLeft", "keyCode": 37 },
    { "name": "up arrow", "key": "ArrowUp", "code": "ArrowUp", "keyCode": 38 },
    { "name": "right arrow", "key": "ArrowRight", "code": "ArrowRight", "keyCode": 39 },
    { "name": "down arrow", "key": "ArrowDown", "code": "ArrowDown", "keyCode": 40 },
    { "name": "print screen", "key": "PrintScreen", "code": "PrintScreen", "keyCode": 44 },
    { "name": "insert", "key": "Insert", "code": "Insert", "keyCode": 45 },
    { "name": "delete", "key": "Delete", "code": "Delete", "keyCode": 46 },
    { "name": 0, "key": 0, "code": "Digit0", "keyCode": 48 },
    { "name": 1, "key": 1, "code": "Digit1", "keyCode": 49 },
    { "name": 2, "key": 2, "code": "Digit2", "keyCode": 50 },
    { "name": 3, "key": 3, "code": "Digit3", "keyCode": 51 },
    { "name": 4, "key": 4, "code": "Digit4", "keyCode": 52 },
    { "name": 5, "key": 5, "code": "Digit5", "keyCode": 53 },
    { "name": 6, "key": 6, "code": "Digit6", "keyCode": 54 },
    { "name": 7, "key": 7, "code": "Digit7", "keyCode": 55 },
    { "name": 8, "key": 8, "code": "Digit8", "keyCode": 56 },
    { "name": 9, "key": 9, "code": "Digit9", "keyCode": 57 },
    { "name": "a", "key": "a", "code": "KeyA", "keyCode": 65 },
    { "name": "b", "key": "b", "code": "KeyB", "keyCode": 66 },
    { "name": "c", "key": "c", "code": "KeyC", "keyCode": 67 },
    { "name": "d", "key": "d", "code": "KeyD", "keyCode": 68 },
    { "name": "e", "key": "e", "code": "KeyE", "keyCode": 69 },
    { "name": "f", "key": "f", "code": "KeyF", "keyCode": 70 },
    { "name": "g", "key": "g", "code": "KeyG", "keyCode": 71 },
    { "name": "h", "key": "h", "code": "KeyH", "keyCode": 72 },
    { "name": "i", "key": "i", "code": "KeyI", "keyCode": 73 },
    { "name": "j", "key": "j", "code": "KeyJ", "keyCode": 74 },
    { "name": "k", "key": "k", "code": "KeyK", "keyCode": 75 },
    { "name": "l", "key": "l", "code": "KeyL", "keyCode": 76 },
    { "name": "m", "key": "m", "code": "KeyM", "keyCode": 77 },
    { "name": "n", "key": "n", "code": "KeyN", "keyCode": 78 },
    { "name": "o", "key": "o", "code": "KeyO", "keyCode": 79 },
    { "name": "p", "key": "p", "code": "KeyP", "keyCode": 80 },
    { "name": "q", "key": "q", "code": "KeyQ", "keyCode": 81 },
    { "name": "r", "key": "r", "code": "KeyR", "keyCode": 82 },
    { "name": "s", "key": "s", "code": "KeyS", "keyCode": 83 },
    { "name": "t", "key": "t", "code": "KeyT", "keyCode": 84 },
    { "name": "u", "key": "u", "code": "KeyU", "keyCode": 85 },
    { "name": "v", "key": "v", "code": "KeyV", "keyCode": 86 },
    { "name": "w", "key": "w", "code": "KeyW", "keyCode": 87 },
    { "name": "x", "key": "x", "code": "KeyX", "keyCode": 88 },
    { "name": "y", "key": "y", "code": "KeyY", "keyCode": 89 },
    { "name": "z", "key": "z", "code": "KeyZ", "keyCode": 90 },
    { "name": "left window key", "key": "Meta", "code": "MetaLeft", "keyCode": 91 },
    { "name": "right window key", "key": "Meta", "code": "MetaRight", "keyCode": 92 },
    { "name": "select key (Context Menu)", "key": "ContextMenu", "code": "ContextMenu", "keyCode": 93 },
    { "name": "numpad 0", "key": 0, "code": "Numpad0", "keyCode": 96 },
    { "name": "numpad 1", "key": 1, "code": "Numpad1", "keyCode": 97 },
    { "name": "numpad 2", "key": 2, "code": "Numpad2", "keyCode": 98 },
    { "name": "numpad 3", "key": 3, "code": "Numpad3", "keyCode": 99 },
    { "name": "numpad 4", "key": 4, "code": "Numpad4", "keyCode": 100 },
    { "name": "numpad 5", "key": 5, "code": "Numpad5", "keyCode": 101 },
    { "name": "numpad 6", "key": 6, "code": "Numpad6", "keyCode": 102 },
    { "name": "numpad 7", "key": 7, "code": "Numpad7", "keyCode": 103 },
    { "name": "numpad 8", "key": 8, "code": "Numpad8", "keyCode": 104 },
    { "name": "numpad 9", "key": 9, "code": "Numpad9", "keyCode": 105 },
    { "name": "multiply", "key": "*", "code": "NumpadMultiply", "keyCode": 106 },
    { "name": "add", "key": "+", "code": "NumpadAdd", "keyCode": 107 },
    { "name": "subtract", "key": "-", "code": "NumpadSubtract", "keyCode": 109 },
    { "name": "decimal point", "key": ".", "code": "NumpadDecimal", "keyCode": 110 },
    { "name": "divide", "key": "/", "code": "NumpadDivide", "keyCode": 111 },
    { "name": "f1", "key": "F1", "code": "F1", "keyCode": 112 },
    { "name": "f2", "key": "F2", "code": "F2", "keyCode": 113 },
    { "name": "f3", "key": "F3", "code": "F3", "keyCode": 114 },
    { "name": "f4", "key": "F4", "code": "F4", "keyCode": 115 },
    { "name": "f5", "key": "F5", "code": "F5", "keyCode": 116 },
    { "name": "f6", "key": "F6", "code": "F6", "keyCode": 117 },
    { "name": "f7", "key": "F7", "code": "F7", "keyCode": 118 },
    { "name": "f8", "key": "F8", "code": "F8", "keyCode": 119 },
    { "name": "f9", "key": "F9", "code": "F9", "keyCode": 120 },
    { "name": "f10", "key": "F10", "code": "F10", "keyCode": 121 },
    { "name": "f11", "key": "F11", "code": "F11", "keyCode": 122 },
    { "name": "f12", "key": "F12", "code": "F12", "keyCode": 123 },
    { "name": "num lock", "key": "NumLock", "code": "NumLock", "keyCode": 144 },
    { "name": "scroll lock", "key": "ScrollLock", "code": "ScrollLock", "keyCode": 145 },
    { "name": "audio volume mute", "key": "AudioVolumeMute", "code": "", "keyCode": 173 },
    { "name": "audio volume down", "key": "AudioVolumeDown", "code": "", "keyCode": 174 },
    { "name": "audio volume up", "key": "AudioVolumeUp", "code": "", "keyCode": 175 },
    { "name": "media player", "key": "LaunchMediaPlayer", "code": "", "keyCode": 181 },
    { "name": "launch application 1", "key": "LaunchApplication1", "code": "", "keyCode": 182 },
    { "name": "launch application 2", "key": "LaunchApplication2", "code": "", "keyCode": 183 },
    { "name": "semi-colon", "key": ";", "code": "Semicolon", "keyCode": 186 },
    { "name": "equal sign", "key": "=", "code": "Equal", "keyCode": 187 },
    { "name": "comma", "key": ",", "code": "Comma", "keyCode": 188 },
    { "name": "dash", "key": "-", "code": "Minus", "keyCode": 189 },
    { "name": "period", "key": ".", "code": "Period", "keyCode": 190 },
    { "name": "forward slash", "key": "/", "code": "Slash", "keyCode": 191 },
    { "name": "Backquote/Grave accent", "key": "`", "code": "Backquote", "keyCode": 192 },
    { "name": "open bracket", "key": "[", "code": "BracketLeft", "keyCode": 219 },
    { "name": "back slash", "key": "\\", "code": "Backslash", "keyCode": 220 },
    { "name": "close bracket", "key": "]", "code": "BracketRight", "keyCode": 221 },
    { "name": "single quote", "key": "'", "code": "Quote", "keyCode": 222 }
  ];
  var hotkeys = {};

  function Hotkey(combination, callback, is_global) {
    assert(!hotkeys[combination], `hotkey combination(${combination}) exist in global keys`);

    if (is_global) hotkeys[combination] = true;

    var t = this;
    t.mod_keys = {};
    t.keys = String(combination || '').toLowerCase().split('+');
    t.lastkeyCode = _.find(key_info, k => String(k.key).toLowerCase() == _.last(t.keys))['keyCode'];

    if (typeof(callback.isPrevent) === "function") {
      t.callback = event=> {
        if (callback.isPrevent()) event.preventDefault();
        $timeout(callback);
      }
    } else {
      t.callback = event=> {
        event.preventDefault();
        $timeout(callback);
      };
    }

    t.apply = function(event) {
      let is_special = _.every(['ctrl', 'alt', 'shift', 'meta'], c => t.mod_keys[c] == event[c + 'Key']);
      if (is_special && event.keyCode == t.lastkeyCode) t.callback(event);
    }

    _.each(['ctrl', 'alt', 'shift', 'meta'], function(c) {
      t.mod_keys[c] = _.indexOf(t.keys, c) > -1;
    });
  }

  return function(combination, callback, is_global) {
    return new Hotkey(combination, callback, is_global);
  };
});
biruni.factory('bPreview', function (bConfig, bRoutes, bHttp, $sce) {
  let $pv = $('#biruniPreview');
  let p = {};

  bConfig.onLocationChange(close);

  p.open = open;
  p.close = close;
  p.rotateImage = rotateImage;
  p.scale = scale;

  let scaleValue = 1;
  let rotateValue = 0;
  resetImage();

  function resetImage() {
    p.file_name = '';
    p.file_type = '';
    p.file_src = '';
    p.download_link = '';
  }

  function resetLayout() {
    scale(0);
    rotateImage(0);
  }

  function rotateImage(r) {
    if (r === 0) {
      rotateValue = 0; //reset
    } else {
      rotateValue += r;
    }
    if (p.file_type === 'image') {
      $pv.find('img').css('transform', `rotate(${rotateValue}deg) scale(${scaleValue})`);
    } else {
      $pv.find('video').css('transform', `rotate(${rotateValue}deg) scale(${scaleValue})`);
    }
  }

  function scale(sc) {
    // increase
    if (sc === 1) {
      if (scaleValue >= 1) scaleValue += 0.5;
      else scaleValue *= 2;
    } else if (sc === -1) {
      if (scaleValue > 1) scaleValue -= 0.5;
      else scaleValue /= 2;
    } else {
      scaleValue = 1; // reset
    }

    if (p.file_type === 'image') {
      $pv.find('img').css('transform', `rotate(${rotateValue}deg) scale(${scaleValue})`);
    } else {
      $pv.find('video').css('transform', `rotate(${rotateValue}deg) scale(${scaleValue})`);
    }
  }

  function openOnlyoffice(file) {
    if (!file.sha) {
      p.file_type = 'none';
      return;
    }
    p.file_name = '';
    p.file_src = '';
    p.download_link = '';
    bHttp
      .postData(bRoutes.RUN_ONLYOFFICE, {
        sha: file.sha,
        embedded: file.embedded || 'Y',
      })
      .then(
        result => {
          const blob = new Blob([result.data], { type: 'text/html' });
          p.file_src = $sce.trustAsResourceUrl(URL.createObjectURL(blob));
        },
        err => {
          p.file_type = 'none';
        }
      );
  }

  function openMedia(file) {
    if (file.sha) {
      p.file_src = bRoutes.LOAD_FILE + '?sha=' + file.sha;
      p.download_link = bRoutes.DOWNLOAD_FILE + '?sha=' + file.sha;
    } else {
      p.file_src = p.download_link = URL.createObjectURL(file);
    }
  }

  function getFileExt(filename) {
    // Get the last index of the dot (.)
    const dotIndex = filename.lastIndexOf('.');
    // If dotIndex is -1, it means there is no dot in the file name
    if (dotIndex === -1) return '';
    // Return the substring after the last dot
    return filename.substring(dotIndex + 1);
  }

  function getDocumentType(ext) {
    switch (ext.toLowerCase()) {
      case 'csv':
      case 'xls':
      case 'xlsb':
      case 'xlsm':
      case 'xlsx':
      case 'xlt':
      case 'xltm':
      case 'xltx':
      case 'ods':
      case 'fods':
      case 'fodt':
        return 'cell';
      case 'djvu':
      case 'epub':
      case 'fb2':
      case 'htm':
      case 'html':
      case 'mht':
      case 'oxps':
      case 'rtf':
      case 'txt':
      case 'xml':
      case 'doc':
      case 'docm':
      case 'docx':
      case 'docxf':
      case 'dot':
      case 'dotm':
      case 'dotx':
        return 'word';
      case 'fodp':
      case 'odp':
      case 'oform':
      case 'otp':
      case 'ott':
      case 'pot':
      case 'potm':
      case 'potx':
      case 'pps':
      case 'ppsm':
      case 'ppsx':
      case 'ppt':
      case 'pptm':
      case 'pptx':
        return 'slide';
      case 'pdf':
        return 'pdf';
      default:
        return 'Invalid extension';
    }
  }

  function open(file) {
    p.file_name = file?.name;
    p.file_type = /image/.test(file.type)      ? 'image'      :
                  /video/.test(file.type)      ? 'video'      :
                  /onlyoffice/.test(file.type) ? 'onlyoffice' : 'none';

    if (p.file_name) {
      let ext = getFileExt(p.file_name);
      let doc_type = getDocumentType(ext);
      if (doc_type !== 'Invalid extension') p.file_type = 'onlyoffice';
    }

    switch(p.file_type) {
      case 'onlyoffice': openOnlyoffice(file); break;
      case 'image':
      case 'video': openMedia(file); break;
    }

    $pv.fadeIn(200).addClass('opened');
    resetLayout();
  }

  function close() {
    $pv.removeClass('opened').fadeOut(200);
    resetImage();
  }

  return p;
});
biruni.factory('bFaceCropper', function ($rootScope, $timeout, bConfig, bRoutes, bRequire) {
  bRequire.load('cropper');

  var $modal = $('#biruniFaceCropper');
  var $photo = $modal.find('.crop_face_photo');
  var cropboxZoomDist = 5;
  var cropboxMoveDist = 2;
  var onCrop = () => {};
  var isRounded = false;
  var isFaceShaped = false;

  var p = {};
  p.file_name = null;
  p.file_type = null;
  p.file_src = null;
  p.cropper = null;
  p.open = open;
  p.crop = crop;
  p.imageRotate = imageRotate;
  p.toggleShape = toggleShape;
  p.toggleMask = toggleMask;
  p.close = close;
  p.onKeyDown = onKeyDown;

  bConfig.onLocationChange(close);
  $photo.on('load', initCropper);

  function open($file, onCropCallBack = () => {}, rounded = false, faceShaped = false) {
    if (!$file) return;
    destroyCropper();
    p.file_name = $file?.name || String(moment().format('DD-MM-YYYY-hh-mm-ss')) + '.jpg';
    p.file_type = $file?.type && /image/.test($file.type) ? 'image' : 'none';
    p.file_src = $file?.sha ? bRoutes.LOAD_FILE + '?sha=' + $file.sha : URL.createObjectURL($file);
    onCrop = onCropCallBack;
    isRounded = rounded;
    isFaceShaped = faceShaped;
    $modal.fadeIn(200).addClass('opened').focus();
    $modal.blur(() => $modal.focus());
  }

  function close() {
    $modal.removeClass('opened').fadeOut(200);
    destroyCropper();
    p.file_name = null;
    p.file_type = null;
    p.file_src = null;
    onCrop = () => {};
  }

  function highlightButton(btn, highlighted) {
    if (highlighted) $(btn).addClass('btn-light text-dark').removeClass('btn-outline-dark text-white');
    else $(btn).addClass('btn-outline-dark text-white').removeClass('btn-light text-dark');
  }

  function setCropperStyle(isShape, isMask) {
    let style = $('.cropper-view-box, .cropper-face').css(['background-image', 'border-radius']);
    if (isShape) {
      if (style['border-radius'] == '50%') {
        style['border-radius'] = 'unset';
        highlightButton('#shapeButton', false);
      } else {
        style['border-radius'] = '50%';
        highlightButton('#shapeButton', true);
      }
    }
    if (isMask) {
      if (style['background-image'] != 'none') {
        style['background-image'] = 'none';
        highlightButton('#maskButton', false);
      } else {
        style['opacity'] = '1';
        style['background-color'] = 'unset';
        style['background-position'] = 'center';
        style['background-size'] = 'contain';
        style['background-repeat'] = 'no-repeat';
        style['background-image'] = `url('data:image/svg+xml;utf8,${encodeURIComponent( '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 512.00 512.00" xml:space="preserve"><defs><mask id="face"><rect x="0" y="0" width="512.00" height="512.00" fill="white"/><path fill="black" d="M359.812,435.662c-19.166-7.168-40.989-26.526-40.989-40.965c0-9.559,0-21.502,0-37.885 c12.287-13.647,30.718-33.79,36.861-68.603c14.335-5.12,22.526-13.311,32.766-49.148c10.895-38.165-16.383-36.861-16.383-36.861 s0-20.478,0-38.221c0-30.038-13.983-118.775-116.055-118.775c-102.056,0-116.039,88.737-116.039,118.775 c0,17.742,0,38.221,0,38.221s-27.278-1.304-16.383,36.861c10.224,35.837,18.415,44.028,32.75,49.148 c6.144,34.813,24.59,54.956,36.877,68.603c0,16.382,0,28.326,0,37.885c0,14.439-23.566,34.822-40.989,40.965 c-28.062,9.895-98.04,16.871-115.319,76.338h438.181C457.749,452.701,387.666,446.086,359.812,435.662z"></path></mask></defs><rect x="0" y="0" width="512.00" height="512.00" fill="#2773c0" fill-opacity="0.35" mask="url(#face)"></rect></svg>' )}')`;
        highlightButton('#maskButton', true);
      }
    }
    $('.cropper-view-box, .cropper-face').css(style);
  }

  function initCropper() {
    if (!p.file_type == 'image') return;
    p.cropper = new Cropper($photo[0], {
      viewMode: 0,
      dragMode: 'move',
      aspectRatio: 1 / 1,
      checkOrientation: false,
      guides: false,
      center: false,
      background: false,
      autoCropArea: 0.5,
      movable: true,
      rotatable: true,
      wheelZoomRatio: 0.1, // default value
      cropBoxMovable: true,
      cropBoxResizable: true,
      toggleDragModeOnDblclick: false,
      ready: function () {
        $('.point-e, .point-n, .point-w, .point-s').remove();
        $('.cropper-point').css({ 'height': '12px', 'width': '12px', 'margin': '-5px' });
        $('.cropper-drag-box.cropper-move.cropper-modal').css({ 'opacity': '.4' });
        setCropperStyle(isRounded, isFaceShaped);
      },
    });
  }

  function destroyCropper() {
    if (!p.cropper) return;
    p.cropper.destroy();
    $photo.removeAttr('src');
  }

  function crop() {
    if (!p.cropper) return close();
    p.cropper.getCroppedCanvas().toBlob(blob => {
      let photo = new File([blob], p.file_name, { lastModified: Date.now(), type: blob.type });
      photo.size = blob.size;
      photo.$ngfBlobUrl = URL.createObjectURL(photo);
      onCrop(photo);
      close();
      $timeout(() => $rootScope.$digest());
    }, 'image/jpeg', 0.6);
  }

  function imageRotate(degree) {
    if (!p.cropper) return;
    p.cropper.rotate(degree);
  }

  function toggleShape() {
    if (!p.cropper) return;
    setCropperStyle(true, false);
  }

  function toggleMask() {
    if (!p.cropper) return;
    setCropperStyle(false, true);
  }

  function cropboxZoom(zAxis, moveFaster = false) {
    if (!p.cropper) return;
    let data = p.cropper.getCropBoxData();
    let dist = moveFaster ? zAxis * 10 : zAxis;
    p.cropper.setCropBoxData({
      width: data.width + dist,
      height: data.height + dist,
      left: data.left - dist / 2,
      top: data.top - dist / 2,
    });
  }

  function cropboxMove(xAxis, yAxis, moveFaster = false) {
    if (!p.cropper) return;
    let data = p.cropper.getCropBoxData();
    data.left += moveFaster ? xAxis * 20 : xAxis;
    data.top += moveFaster ? yAxis * 20 : yAxis;
    p.cropper.setCropBoxData(data);
  }

  function onKeyDown($event) {
    const kc_escape = 27;
    const kc_enter = 13;
    const kc_bracketleft = 219;
    const kc_bracketright = 221;
    const kc_arrowup = 38;
    const kc_arrowdown = 40;
    const kc_arrowleft = 37;
    const kc_arrowright = 39;

    if (!_.contains([kc_escape, kc_enter, kc_bracketleft, kc_bracketright, kc_arrowup, kc_arrowdown, kc_arrowleft, kc_arrowright], $event.keyCode)) return;

    $event.preventDefault();
    $event.stopPropagation();

    switch ($event.keyCode) {
      case kc_escape: close(); break;
      case kc_enter: crop(); break;
      case kc_bracketleft: cropboxZoom(-cropboxZoomDist, $event.altKey || $event.ctrlKey); break;
      case kc_bracketright: cropboxZoom(cropboxZoomDist, $event.altKey || $event.ctrlKey); break;
      case kc_arrowup: cropboxMove(0, -cropboxMoveDist, $event.altKey || $event.ctrlKey); break;
      case kc_arrowdown: cropboxMove(0, cropboxMoveDist, $event.altKey || $event.ctrlKey); break;
      case kc_arrowleft: cropboxMove(-cropboxMoveDist, 0, $event.altKey || $event.ctrlKey); break;
      case kc_arrowright: cropboxMove(cropboxMoveDist, 0, $event.altKey || $event.ctrlKey); break;
    }
  }

  return p;
});
biruni.factory('bContentMaker', function($q, $compile, $rootScope, $timeout) {
  function Maker() {
    var scope = $rootScope.$new(true);

    function render(text, data) {
      let deferred = $q.defer();
      let elem = angular.element(`<div>${text}</div>`);
      
      _.each(data, (v, k) => scope[k] = v);
      $compile(elem)(scope);
      $timeout(() => deferred.resolve(elem[0].outerHTML));

      return deferred.promise;
    }
    
    return {
      render: render
    };
  }

  return function() {
    return new Maker();
  }
});biruni.factory('bSessionStorage', function () {
  function supportsSessionStorage() {
    return ('sessionStorage' in window) && window['sessionStorage'] !== null;
  }

  function set(key, val) {
    if (!supportsSessionStorage()) {
      return;
    }
    window.sessionStorage.setItem(key, val);
  }

  function get(item) {
    if (!supportsSessionStorage()) {
      return;
    }
    return window.sessionStorage.getItem(item);
  }

  function remove(item) {
    if (!supportsSessionStorage()) {
      return;
    }
    window.sessionStorage.removeItem(item);
  }

  return {
    set    : set,
    get    : get,
    remove : remove
  };
});biruni.directive('bNumber', function ($filter) {
  function parseNumber(v, d) {
    try {
      if (v) {
        return parseInt(v);
      } else {
        return d;
      }
    } catch (e) {
      return d;
    }
  }

  function transformValue(val, type) {
    var transformed = val.replace(/[,]/g, '.').replace(/[^0-9.-]/g, '');
    if (transformed) {
      if (type == "signed") {
        transformed = transformed.replace(/[.]/, '#').replace(/[.]/g, '').replace(/[#]/, '.');
        transformed = transformed[0] + transformed.substr(1).replace(/[-]/g, '');
      } else {
        transformed = transformed.replace(/[.]/, '#').replace(/[.]/g, '').replace(/[#]/, '.').replace(/[-]/g, '');
      }
    }
    return transformed;
  }

  function parseModelVal(val, scale, fill_with_zero) {
    val = formatNumber(val, scale, fill_with_zero).replace(/\s/g, '');
    if (scale && /[.]/.test(val)) val =  val.replace(/[0]+$/, '');
    if (val.slice(-1) == '.') val = val.slice(0, -1);
    return val;
  }

  var formatNumber = $filter('bNumber'),
      NUMBER_REGEXP = /^\-?[0-9 ]*[.]?[0-9 ]*$/;

  var default_precision = 14,
      default_scale = 6;

  function link(scope, elem, attr, ctrl) {
    var precision = default_precision,
        scale = default_scale,
        fill_with_zero = !_.isUndefined(attr.fillWithZero);

    if (NUMBER_REGEXP.test(attr.precision)) {
      precision = parseNumber(attr.precision, default_precision);
    } else {
      scope.$watch(attr.precision, x => precision = parseNumber(x, default_precision));
    }

    if (NUMBER_REGEXP.test(attr.scale)) {
      scale = parseNumber(attr.scale, default_scale);
    } else {
      scope.$watch(attr.scale, function(x) {
        scale = parseNumber(x, default_scale);
        ctrl.$setViewValue(formatNumber(ctrl.$viewValue, scale, fill_with_zero));
      });
    }

    function parser(value) {
      if (value) {
        var transformed = transformValue(value, attr.bNumber);
        if (transformed != value) {
          ctrl.$setViewValue(transformed);
          ctrl.$render();
        }
        return parseModelVal(transformed, scale, fill_with_zero);
      }
      return value;
    }

    function validateNumber(modelValue, viewValue) {
      if (ctrl.$isEmpty(modelValue)) {
        return true;
      }
      return NUMBER_REGEXP.test(viewValue);
    }

    function validatePrecision(modelValue, viewValue) {
      if (ctrl.$isEmpty(modelValue)) {
        return true;
      }
      var v = viewValue.replace(/[- ]/g, '').split('.')[0];
      return v.length <= precision || v == '0';
    }

    function validateScale(modelValue, viewValue) {
      if (ctrl.$isEmpty(modelValue)) {
        return true;
      }
      var v = viewValue.replace(/[- ]/g, '').split('.')[1];
      return !v || v.length <= scale;
    }

    elem.css({
      'text-align' : 'right'
    });

    ctrl.$parsers.push(parser);
    ctrl.$validators.number = validateNumber;
    ctrl.$validators.precision = validatePrecision;
    ctrl.$validators.scale = validateScale;

    function OnFocus() {
      if (NUMBER_REGEXP.test(ctrl.$viewValue)) {
        elem.val(parseModelVal(ctrl.$viewValue, scale, fill_with_zero));
      } else {
        elem.val(ctrl.$viewValue);
      }
    }

    function OnBlur() {
      if (NUMBER_REGEXP.test(ctrl.$viewValue)) {
        var v = formatNumber(ctrl.$viewValue, scale, fill_with_zero);
        ctrl.$setViewValue(v);
        elem.val(v);
      }
    }

    elem.on('blur', OnBlur);
    elem.on('focus', OnFocus);

    scope.$watch(attr['ngModel'], function () {
      if (document.activeElement != elem[0]) {
        OnBlur();
      }
    });
  }

  return {
    restrict : 'A',
    require : '^ngModel',
    link : link
  };
});biruni.directive('bInputmask', function (bRequire) {
  function link(scope, elem, attr) {
    var mask = attr.bInputmask;

    bRequire.load("inputmask").then(function() {
      if (!_.isEmpty(mask)) {
        elem.inputmask({
          mask: mask,
          autoUnmask: true,
          clearMaskOnLostFocus: false
        });
      } else {
        console.error("mask is empty");
      }
    });
  }

  return {
    restrict : 'A',
    require : '?ngModel',
    link : link
  };
});
 biruni.directive('bTelinput', function (bRequire, bConfig, $timeout) {
  function link(scope, elem, attr, ctrl) {
    let initialCountry = attr.initialCountry;

    bRequire.load("intlTelInput",).then(function() {
      if (!initialCountry)
        initialCountry = bConfig.countryCode();

      initialCountry = initialCountry.toLowerCase();

      let iti = intlTelInput(elem[0], {
        formatOnDisplay: true,
        containerClass: 'd-block',
        showSelectedDialCode: true,
        initialCountry: initialCountry,
        countrySearch: false,
        nationalMode: false,
        utilsScript: 'assets/intl-tel-input/js/utils.js',
        preferredCountries: ['uz'],
      });

      iti.promise.then(() => {
        if (ctrl) {
          ctrl.$validators.validNumber = function(value) {
            if (attr.required || value || elem[0].value.length > 0) {
              return iti.isValidNumber();
            } else {
              return true;
            }
          };
  
          ctrl.$parsers.push(function (value) {
            if (value) {
              $timeout(function() {
                iti.setNumber(value);
              });
            }
            return iti.getNumber();
          });
  
          ctrl.$formatters.push(function (value) {
            if (value) {
              if(value.charAt(0) !== '+') {
                value = '+' + value;
              }
              $timeout(function() {
                iti.setNumber(value);
                ctrl.$setViewValue(iti.getNumber());
              });
            }
          });
          
          elem.on("countrychange", function() {
            ctrl.$setViewValue(iti.getNumber());
          });
  
          ctrl.$processModelValue(); // called to apply new $formatters after
        }
      });
    });
  }

  return {
    restrict : 'A',
    require : '?ngModel',
    link : link
  };
});
biruni.directive('bDatePicker', function (bConfig, $timeout) {
  function link(scope, elem, attr, ctrl) {
    /* static  */ const model_format = attr.bDatePicker || 'DD.MM.YYYY';
    /* static  */ const view_format = attr.viewFormat;
    /* static  */ const pos_direction = attr.direction || 'left';
    /* static  */ const input_placeholder = attr.placeholder || bConfig.langs.select_date;
    /* dynamic */ const min_date = attr.minDate;
    /* dynamic */ const max_date = attr.maxDate;
    /* dynamic */ const ng_model = attr.ngModel;
    let useStrict = false;
    let isCalendarOpen = false;

    try {
      elem.datetimepicker({
        locale: bConfig.langCode(),
        useCurrent: false,
        useStrict: useStrict,
        format: model_format,
        widgetPositioning: {
          vertical: 'auto',
          horizontal: pos_direction,
        },
      });
    } catch (e) {
      console.error(e.message);
      elem.datetimepicker({
        locale: 'en',
        useCurrent: false,
        useStrict: useStrict,
        format: model_format,
        widgetPositioning: {
          vertical: 'auto',
          horizontal: pos_direction,
        },
      });
    }

    elem.attr('placeholder', input_placeholder);
    $timeout(() => setDateFromNgModel(ctrl.$modelValue, useStrict), 300);
    $timeout(() => {
      useStrict = true;
      elem.data('DateTimePicker')?.useStrict(true);
    }, 700);

    if (min_date) {
      scope.$watch(min_date, function (val) {
        const oldValue = ctrl.$modelValue;
        setDateFromNgModel(null, useStrict);
        val = val ? moment(val, model_format) : false;
        if (val._isValid) elem.data('DateTimePicker')?.minDate(val);
        setDateFromNgModel(oldValue, useStrict);
      });
    }

    if (max_date) {
      scope.$watch(max_date, function (val) {
        const oldValue = ctrl.$modelValue;
        setDateFromNgModel(null, useStrict);
        val = val ? moment(val, model_format) : false;
        if (val._isValid) elem.data('DateTimePicker')?.maxDate(val);
        setDateFromNgModel(oldValue, useStrict);
      });
    }

    if (ctrl) {
      const setDateFromNgModel_lazy = _.debounce(setDateFromNgModel, 600, true);
      scope.$watch(ng_model, function (value) {
        setDateFromNgModel_lazy(value, useStrict);
      });

      elem.on('dp.change', function (k) {
        $timeout(() => {
          const date = elem.data('DateTimePicker')?.date();
          setDateFromWidget(date, useStrict);
        });
      });

      elem.on('dp.show', function (k) {
        isCalendarOpen = true;
        $timeout(() => setDateFromNgModel(ctrl.$modelValue, useStrict));
      });

      elem.on('dp.hide', function (k) {
        isCalendarOpen = false;
        $timeout(() => setDateFromNgModel(ctrl.$modelValue, useStrict));
      });

      elem.on('dp.error', function (k) {
        elem.val(ctrl.$modelValue);
        $timeout(() => {
          ctrl.$setValidity('isValidMoment', false);
          elem.val(ctrl.$modelValue);
        });
      });
    }

    // --------------------------------------------------------------------------------
    // Utility functions
    // --------------------------------------------------------------------------------
    function isFocused() {
      return elem.is(':focus') || isCalendarOpen;
    }

    function isValidDate(date, format, forceStrict = false) {
      if (_.isEmpty(date)) return true;
      if (moment.isMoment(date)) return date.isValid();
      return (
        _.isEmpty(format) //
          ? moment(String(date), null, forceStrict)
          : moment(String(date), format, forceStrict)
      )?.isValid();
    }

    function getMoment(date, format, forceStrict = false) {
      if (_.isEmpty(date) || !isValidDate(date, format, forceStrict)) return null;
      if (moment.isMoment(date)) return date;
      return _.isEmpty(format) //
        ? moment(String(date), null, forceStrict)
        : moment(String(date), format, forceStrict);
    }

    function fmtDate(date, format, forceStrict = false) {
      if (_.isEmpty(date) || !isValidDate(date, format, forceStrict)) return '';
      const momentObj = getMoment(date, format, forceStrict);
      return (
        _.isEmpty(format) //
          ? momentObj.format('DD.MM.YYYY')
          : momentObj.format(format)
      )
        .split(' ')
        .map(word => word[0].toUpperCase() + word.slice(1))
        .join(' ');
    }

    // --------------------------------------------------------------------------------
    // API functions
    // --------------------------------------------------------------------------------
    function setDateFromNgModel(dateStr, forceStrict = false) {
      // set input as touched + changed
      ctrl.$setTouched();
      ctrl.$setDirty();
      // get widget moment and new ng-model moment
      const widgetMoment = elem.data('DateTimePicker')?.date();
      // ng-model data set to empty string or null
      if (_.isEmpty(dateStr)) {
        ctrl.$setValidity('isValidMoment', true);
        if (widgetMoment !== null) elem.data('DateTimePicker')?.date(null);
        elem.val(null);
        return;
      }
      // ng-model data set to invalid date
      if (!isValidDate(dateStr, model_format, forceStrict)) {
        ctrl.$setValidity('isValidMoment', false);
        elem.val(dateStr);
        return;
      }
      // ng-model data set to valid date
      ctrl.$setValidity('isValidMoment', true);
      // update the widget moment if ng-model moment is changed
      if (widgetMoment?.format(model_format) !== dateStr) elem.data('DateTimePicker')?.date(getMoment(dateStr, model_format));
      // update the input view if ng-model moment is changed
      elem.val(fmtDate(getMoment(dateStr, model_format), (!isFocused() && view_format) || model_format));
    }

    function setDateFromWidget(dateMoment, forceStrict = false) {
      // set input as touched + changed
      ctrl.$setTouched();
      ctrl.$setDirty();
      // widget data set to empty string or null
      if (_.isEmpty(dateMoment)) {
        ctrl.$setValidity('isValidMoment', true);
        return;
      }
      // widget data set to invalid date
      if (!isValidDate(dateMoment, model_format, forceStrict)) {
        ctrl.$setValidity('isValidMoment', false);
        return;
      }
      // widget data set to valid date
      ctrl.$setValidity('isValidMoment', true);
      // update the ng-model moment if widget moment is changed
      const ngModelDate = fmtDate(dateMoment, model_format, forceStrict);
      if (ctrl.$modelValue !== ngModelDate) ctrl.$setViewValue(ngModelDate);
      // update the input view if widget moment is changed
      elem.val(fmtDate(dateMoment, (!isFocused() && view_format) || model_format));
    }
  }

  return {
    restrict: 'A',
    require: '?ngModel',
    link: link,
  };
});
biruni.directive('bDateRangePicker', function(bConfig, $parse) {
  function link(scope, elem, attrs) {
    moment.locale(bConfig.langCode());

    var $setBeginDate = $parse(attrs.begin).assign;
    var $setEndDate   = $parse(attrs.end).assign;

    var langs = bConfig.langs,
        $div  = elem.find('div'),
        $span = $div.find('span'),
        _start = '',
        _end = '',
        ranges = {},
        locale = {},
        format = "DD.MM.YYYY";

    function fillParams() {
      ranges[langs.dr_today] = [moment(), moment()];
      ranges[langs.dr_yesterday] = [moment().subtract(1, 'days'), moment().subtract(1, 'days')];
      ranges[langs.dr_last_7_days] = [moment().subtract(6, 'days'), moment()];
      if (attrs.hasOwnProperty('halfMonth')) {
        ranges[langs.dr_first_half_month] = [moment().startOf('month'), moment().startOf('month').add(14, 'days')];
        ranges[langs.dr_second_half_month] = [moment().startOf('month').add(15, 'days'), moment().endOf('month')];
      }
      ranges[langs.dr_last_30_days] = [moment().subtract(29, 'days'), moment()];
      ranges[langs.dr_this_month] = [moment().startOf('month'), moment().endOf('month')];
      ranges[langs.dr_last_month] = [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')];

      locale['format'] = format;
      locale['applyLabel'] = langs.dr_apply;
      locale['cancelLabel'] = langs.dr_cancel;
      locale['customRangeLabel'] = langs.dr_custom_range;
      locale['daysOfWeek'] = moment.weekdaysShort().map(x => x.toUpperCase());
      locale['monthNames'] = moment.months().map(x => x.toUpperCase());
      locale['firstDay'] = 1;
    }

    function initial() {
      if(attrs.class) {
        $div.addClass(attrs.class);
      }
      fillParams();
      $div.daterangepicker({
        opens : attrs.align || 'right',
        showDropdowns : false,
        showWeekNumbers : true,
        ranges : ranges,
        buttonClasses : ['btn'],
        applyClass : 'blue',
        cancelClass : 'btn-default',
        format : format,
        locale : locale
      },
      callback
      );
    }

    function viewDate(start, end) {
      $span.text(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
    }

    function callback(start, end) {
      _start = start.format(format);
      _end   = end.format(format);

      $setBeginDate(scope, _start);
      $setEndDate(scope, _end);
      if(attrs.onChange) {
        $parse(attrs.onChange)(scope, {start : _start,
                                       end   : _end});
      }
      viewDate(start,end);
    }

    function refresh() {
      if(_start && _end) {
        var start = moment(_start, format);
        var end = moment(_end, format);
        $div.data('daterangepicker').setStartDate(start);
        $div.data('daterangepicker').setEndDate(end);
        viewDate(start, end);
      }
    }

    scope.$watch(attrs.begin, function(value) {
      if(value) {
        _start = value;
        refresh();
      }
    });

    scope.$watch(attrs.end, function(value) {
      if(value) {
        _end = value;
        refresh();
      }
    });

    scope.$watchCollection(attrs.custom, function(value) {
      if (value) {
        ranges = [];
        if (!!value.length) {
          _.each(value, x => {
            ranges[x.name()] = [x.begin_date, x.end_date];
          });

          $div.daterangepicker({
            opens : attrs.align || 'right',
            showDropdowns : false,
            showWeekNumbers : true,
            ranges : ranges,
            buttonClasses : ['btn'],
            applyClass : 'blue',
            cancelClass : 'btn-default',
            format : format,
            locale : locale
          },
          callback
          );
        }
      }
    });

    initial();
  }

  return {
    restrict : 'E',
    scope : true,
    template : function(tElem, tAttr) {
      return '<div class="btn btn-default">'
                  + '<i class="fa fa-calendar"></i> &nbsp;'
                  + '<span class="uppercase"></span> &nbsp;'
                  + '<b class="fa fa-angle-down"></b>'
              + '</div>';
    },
    link : link
  }
});biruni.directive('bPage', function (bFrame) {
  function link(scope, elem) {
    elem.hide();
    var page = bFrame.findPage(scope.bPageID);
    var reload = page.reload;

    // @overide
    page.openFunc = bFrame.open;
    page.openDialogFunc = bFrame.openDialog;
    page.openReplaceFunc = bFrame.openReplace;
    page.openClearFunc = bFrame.openClear;
    page.closeFunc = bFrame.close;
    page.setFavorite = bFrame.setFavorite;

    page.runFunc = function() {
      reload();
      bFrame.refreshIds();
    }

    page.setDialog(bFrame.pages.length > 1 && bFrame.pages[bFrame.pages.length - 2].saved);
    page.setFirst(bFrame.pages.length <= 1);

    page.qContentLink.resolve({
      scope : scope,
      elem : elem
    });
    scope.a = null;
  }

  return {
    restrict : 'E',
    link : link,
    scope : true
  }
});
biruni.directive('bSubpage', function(bSubpage, bFrame, $parse) {

  function controller($scope, $attrs) {
    let parent = $scope.bPage;
    $scope.bParentPage  = parent;
    $scope.bPage = null;

    assert(parent.pageType() == "parent", "subpage cannot create inner subpage");

    parent.addSubpage($attrs.name, bSubpage());
  }

  function link(scope, elem, attr) {
    elem.hide();
    var parent = scope.bParentPage;
    assert(parent.pageType() == "parent", "subpage cannot create inner subpage");
    var formGetter = $parse(attr.form);
    var paramGetter = $parse(attr.param);
    var xparamGetter = $parse(attr.xparam);

    var subpage = parent.subpage(attr.name);

    //@overide
    subpage.openFunc        = bFrame.openDialog;
    subpage.openDialogFunc  = bFrame.openDialog;
    subpage.openReplace     = bFrame.openReplace;

    subpage.runFunc = function(...args) {
      subpage.reload(...args);
      subpage.qContentLink.resolve({
        scope: scope,
        elem: elem
      });
    }

    /**
     * Subpage cannot be dialog.
     * Even if subpage parent is dialog it cannot return data
     */
    subpage.setDialog(false);

    subpage.setFirst(true);

    scope.bParentPage = parent;
    parent.qLoaded.promise.then(function() {
      let form = formGetter(scope);
      if (form) {
        let param = paramGetter(scope);
        let xparam = xparamGetter(scope);

        subpage.run(form, param, xparam);
      }
    });

  }

  return {
    restrict: 'E',
    controller: controller,
    link: link,
    scope: true
  }
});biruni.directive('bGrid', function ($rootScope, $parse, $compile, $http, $timeout, $q, bAlert, bStorage, bRoutes) {
  let docMouseMove;
  let docMouseUp;
  let downEvents = 'mousedown touchstart';
  let moveEvents = 'mousemove touchmove';
  let upEvents = 'mouseup touchend'
  let hasTouch = hasTouchDevice();

  function getX(e) {
    return e.pageX ?? (e.touches && e.touches[0]?.pageX) ?? (e.changedTouches && e.changedTouches[0].pageX);
  }

  function parse(attr) {
    if (attr) {
      return $parse(attr);
    }
  }

  function applyProps(elem) {
    elem.find('.tbl').find('.tbl-header,.tbl-body').css('min-width', elem.data().width);
  }

  function justifyBtnPosition(elem, tbl) {
    elem.css('bottom', Math.max(tbl.offsetHeight - tbl.clientHeight - 2, 0));
  }

  function makeScroll(tbl, gridScroll, curId) {
    // Set to old scroll position if possible
    var preventScroll;

    if (curId != gridScroll.id()) {
      let scroll = gridScroll.scroll();
      if (String(scroll)) {
        preventScroll = true;
        tbl.scrollTop(scroll);
      }
    }
    gridScroll.id(curId);

    let isScrollToTopEnabled = false;
    let hParent = tbl.parent();
    let tblBody = tbl.find(".tbl-body");
    let scrollToTopBtn = $('<button class="tbl-scroll-to-top-btn"><i class="fas fa-chevron-up"></i></button>')
    .on("click", function() {
      tbl.get(0).scrollTo({
        top: 0,
        behavior: "smooth"
      });
    });

    let scrollToTopContainer = $('<div class="scroll-to-top-container"></div>').append(scrollToTopBtn).append('<div class="scroll-to-top-shadow"></div>');
    tbl.on("scroll", function() {
      if (!isScrollToTopEnabled && tbl.scrollTop() > 450) {
        tblBody.addClass('tbl-body-scroll-active');
        scrollToTopContainer.addClass("visible");
        isScrollToTopEnabled = true;
      } else if (isScrollToTopEnabled && tbl.scrollTop() <= 450) {
        isScrollToTopEnabled = false;
        tblBody.removeClass('.tbl-body-scroll-active')
        scrollToTopContainer.removeClass("visible");
      }
      if (preventScroll) {
        preventScroll = false;
      } else {
        gridScroll.scroll(tbl.scrollTop());
      }
      if (isScrollToTopEnabled) justifyBtnPosition(scrollToTopContainer, tbl.get(0));
    });
    hParent.append(scrollToTopContainer);
  }

  function enableResizers(table, grid) {
    var headerCells = table.find('.tbl-header-cell:not(.tbl-empty-cell)');
    var resizingCell,
        startOffset,
        sizeArray;

    docMouseMove = function (e) {
      if (resizingCell) {
        if (!hasTouch) e.preventDefault();
        sizeArray = table.css("grid-template-columns").split(" ");
        let tableWidth = table.find('.tbl-header').outerWidth();
        let pos = startOffset + getX(e);
        let calc = Math.max(pos / tableWidth * 100, 4); // 4 - the largest int, which is smaller than the size of col-1
        if (tableWidth) sizeArray[resizingCell.index()] = parseFloat(calc).toFixed(2) + "%";
        table.css("grid-template-columns", sizeArray.join(" "));
      }
    };
    docMouseUp = function () {
      if (resizingCell) {
        resizingCell.removeClass("active");
        table.css("user-select", "auto");
        if (grid.g.withCheckbox) sizeArray.shift();
        grid.g.cols = _.map(grid.g.cols, function (col, idx) {
          return {
            name: col.name,
            size: sizeArray[idx]
          };
        });
        grid.saveSettingChanges();
        resizingCell = undefined;

        let scrollToTopBtn = table.parent().find(".scroll-to-top-container");
        justifyBtnPosition(scrollToTopBtn, table.find(".tbl-body").get(0));
      }
    };
    _.each(headerCells, function(th) {
      let grip = $('<div></div>').addClass("tbl-cell-resizer");
      grip.on(downEvents, function (e) {
        e.preventDefault();
        resizingCell = $(this).closest('.tbl-header-cell');
        resizingCell.addClass("active");
        table.css("user-select", "none");
        startOffset = parseFloat(th.offsetWidth - getX(e));
      });
      if (hasTouch) grip.addClass("resizer-active");
      $(th).append(grip);
    });

    $(document).on(moveEvents, docMouseMove).on(upEvents, docMouseUp);
  }

  /** Calculate table's maxHeight */
  function calcTableMaxHeight(elem) {
    let headerHeight = ($(window).innerWidth() > 991 ? $("#kt_header").outerHeight(true) : $("#kt_header_mobile").outerHeight(true)) || 0;
    let subheaderHeight = $('.subheader').outerHeight(true) || 0;
    let toolbarHeight = elem.closest('b-page').find('.b-toolbar').outerHeight(true) || 0;
    let contentPadding = (parseFloat($('#kt_content').css('padding-bottom')) || 0) + (parseFloat($('#kt_content').css('padding-top')) || 0);
    let footerHeight = $('.footer').outerHeight(true) || 0;
    let tableContainerMaxHeight = $(window).innerHeight() - headerHeight - subheaderHeight - toolbarHeight - contentPadding - footerHeight;
    return tableContainerMaxHeight
  }

  function render(elem, html, query, grid, scope, attr, gridScroll, curId, newId, oldId) {
    if (newId && newId != oldId) {
      elem.html(html());
      const maxHeight = calcTableMaxHeight(elem);
      elem.append($compile(`
      <b-grid-filter-panel
        ng-style="{
                  'order': o.g.filterPanelDirection == 'left' ? '1' : '3',
                  'width': o.g.filterPanelWidth + 'px',
                  'padding': o.g.filterPanelDirection == 'left' ? '0px 5px 0px 0px' : '0px 0px 0px 5px'
                  }"
        style="max-height: ${maxHeight}px; position: relative;"
        ng-if="o.g.showFilterPanel && o.g.openFilterPanel"
        name="${attr.name}"/>`)(scope));
      var table = elem.find('.tbl');
      table.css('max-height', maxHeight + 'px');
      elem.css('display', 'flex');
      elem.show();
      elem.find('.tbl-header [sort-header]').click(function () {
        var name = $(this).attr('sort-header'),
          sortCol = _.first(query.sort()),
          sortDir = _.first(sortCol);
        if (sortDir === '-') {
          sortCol = sortCol.substring(1);
        }
        if (sortCol === name) {
          if (sortDir === '-') {
            query.sort([]);
          } else {
            query.sort(['-' + name]);
          }
        } else {
          query.sort([name]);
        }
        grid.refreshCheck();
        query.fetch();
      });

      enableResizers(table, grid);
      table.hScroll();
      makeScroll(table, gridScroll, curId);

      applyProps(elem.data({
        width: attr.minWidth ?? 880
      }));
    }

    scope.$on('$destroy', function() {
      $(document).off(moveEvents, docMouseMove);
      $(document).off(upEvents, docMouseUp);
    });
  }

  function showAction($t, grid, scope) {
    var acn = '.tbl-row-action';
    var $elem = $t.find('sliding');
    var $a = $elem.find(acn);

    if ($a.length == 0) {
      $elem.append(grid.g.actionHtml);
      $a = $elem.find(acn);
      var s = scope.$new(false);
      s.row = grid.rowAt($t.index());
      $compile($a.contents())(s);
    }
    $a.show();
  }

  function showRows($t, grid, scope, event) {
    var $elem = $t.find('sliding');
    var $rests;
    if ($(event.target).closest('.tbl-row-action').length == 0) {
      if ($elem.hasClass('opened-slider')) {
        $elem.removeClass('opened-slider');
        $elem.addClass('closed-slider');
        $elem.slideUp(100);
        $t.removeClass('open');
      } else {
        $rests = $t.parent().find('sliding.opened-slider');
        $rests.removeClass('opened-slider');
        $rests.addClass('closed-slider');
        $rests.slideUp(100);
        $rests.closest('.tbl-row-menu').removeClass('open');

        $elem.removeClass('closed-slider');
        $elem.addClass('opened-slider');
        $elem.slideDown(200);
        $t.addClass('open');
      }

      $elem.css({ display: 'flex' });
    }
  }

  function checkRow(elem) {
    elem.find('[data-bcheck]').click();

    var openSlider = elem.parent().find('sliding.opened-slider');

    if (openSlider.length > 0) {
      openSlider.removeClass('opened-slider');
      openSlider.addClass('closed-slider');
      openSlider.slideUp(100);
      openSlider.closest('.tbl-row-menu').removeClass('open');

      var openRow = openSlider.closest('.tbl-row-menu');

      if (!elem.is(openRow)) {
        var checkbox = openRow.parent().find('[data-bcheck]');
        if (!checkbox.prop('checked')) checkbox.click();
      }
    }
  }

  function onRowClick(scope, grid, event) {
    event.preventDefault();

    if (event.ctrlKey) {
      checkRow($(this));
      return;
    }

    if (grid.g.actionHtml) {
      scope.$apply(_.partial(showAction, $(this), grid, scope));
    }
    scope.$apply(_.partial(showRows, $(this), grid, scope, event));
  }

  function onRowDoubleClick(scope, gridRowAt, doubleClick, event) {
    event.preventDefault();
    if (_.isFunction(doubleClick)) {
      var val = {
        row: gridRowAt($(this).index())
      };
      scope.$apply(_.partial(doubleClick, scope, val));
    }
  }

  function onCellClick(scope, grid, event) {
    event.preventDefault();
    event.stopPropagation();
    var cb = grid.g.fields[$(this).attr('cn')];
    if (cb && cb.onClick) {
      if (_.isString(cb.onClick)) {
        cb = parse(cb.onClick);
      }
      var val = {
        row: grid.rowAt($(this).closest('.tbl-row').index())
      };
      scope.$apply(_.partial(cb, scope, val));
    }
  }

  function composeOnCheck(scope, onCheck, checkedApi, indices) {
    if (onCheck) {
      onCheck(scope, {
        checked: checkedApi(indices)
      });
    }
  }

  function whenCheck(elem, scope, onCheck, event) {
    event.stopPropagation();
    if (event.target.tagName != "INPUT") return;
    var checkAll = elem.find('input[bcheckall]');
    var checkboxes = elem.find('input[data-bcheck]');
    var indices = _.chain(checkboxes)
      .filter(function (x) {
        return x.checked;
      })
      .map(function (x) {
        return parseInt(x.dataset.bcheck);
      })
      .value();

    checkAll.prop('indeterminate', indices.length > 0 && indices.length != checkboxes.length);
    checkAll.prop('checked', indices.length > 0);

    scope.$apply(_.partial(onCheck, indices));
  }

  function whenCheckAll(elem, scope, onCheck, event) {
    var ch = this.checked;
    elem.find('input[data-bcheck]').each(function () {
      this.checked = ch;
    });
    whenCheck(elem, scope, onCheck, event);
  }

  function splitNames(xs) {
    if (xs) {
      return _.chain(xs.split(','))
        .invoke('trim')
        .compact()
        .value();
    }
    return [];
  }

  function setFieldFlags(grid, fieldNames, flagNames) {
    _.each(fieldNames, function (fn) {
      var f = grid.getField(fn);
      _.each(flagNames, function (n) {
        f[n] = true;
      });
    });
  }

  function translateFields(g, translate) {
    var prefix = g.translateKey;
    if (_.isUndefined(prefix)) {
      prefix = g.name + '.';
    }
    _.each(g.fields, function (f) {
      if (f.column || f.searchable) {
        f.label = translate(prefix + f.name);
      } else if (f.filter) {
        f.label = translate(prefix + (f.decorateWith || f.name));
      }
    });
  }

  function evalGridData(grid) {
    var path = grid.query().path(),
        s = bStorage.json(path);

    if (s.cols && _.every(s.cols, x => grid.g.fields[x.name])) {
      grid.g.cols = s.cols;
    }

    grid.g.openFilterPanel = s.openFilterPanel == true;
    grid.g.filterPanelDirection = s.filterPanelDirection ?? 'right';
    grid.g.filterPanelWidth = s.filterPanelWidth ?? 400;

    if (s.search && _.every(s.search, function (n) {
      var f = grid.g.fields[n];
      return f && (f.search || f.searchable);
    })) {
      _.each(grid.g.fields, function (field) {
        field.search = _.contains(s.search, field.name);
      });
      grid.query().searchFields(s.search);
    }

    grid.disableRevokedColumns();
  }

  function ctrl($scope, $attrs) {
    var grid = $scope.bPage.grid($attrs.name);
    $scope.row = {};

    function setFlags(names, flagNames) {
      names = names ? names.trim() : '';
      if (names.startsWith("{{") && names.endsWith("}}")) {
        names = $parse(names.substr(2, names.length - 4))($scope);
      }
      setFieldFlags(grid, splitNames(names), flagNames);
    }

    setFlags($attrs.required, ['required']);
    setFlags($attrs.search, ['search', 'searchable']);
    setFlags($attrs.searchable, ['searchable']);
    setFlags($attrs.extraColumns, ['column']);

    var searchNames =
      _.chain(grid.g.fields)
        .where({
          search: true
        })
        .pluck('name')
        .value();

    grid.query().searchFields(searchNames);

    var sortFields = splitNames($attrs.sort);
    if (sortFields.length) grid.query().sort(sortFields);

    grid.g.name = $attrs.name;
    grid.g.translateKey = $attrs.translateKey;
    this.grid = grid;
  }

  function loadGridData(path, grid) {
    if ($rootScope.is_debug) return $q.all([]);
    return $http.post(bRoutes.LOAD_GRID_DATA, {
      path: path
    }).then(function (result) {
      if (!_.isEmpty(result.data.revoked_columns)) {
        _.each(grid.g.fields, function(f, c) {
          f.revoked = !f.required && _.indexOf(result.data.revoked_columns, c) > -1;
        });
      }
      if (result.data.settings) {
        const settings = JSON.parse(result.data.settings);
        bStorage.json(path, settings);
      } else {
        bStorage.text(path, null);
      }
    }, function (error) {
      console.error('grid setting loader', error);
    });
  }

  function link(scope, elem, attr, ctrl) {
    var gridScroll = scope.bPage.gridScroll(attr.name);
    var curId = _.uniqueId();
    var grid = ctrl.grid;
    grid.onCheck = parse(attr.onCheck);

    var query = grid.query(),
        onDblclick = parse(attr.onDblclick),
        onCheck = _.partial(composeOnCheck, scope, grid.onCheck, grid.checkedApi, _),
        htmlTable = _.partial(grid.htmlTable, !!attr.onCheck);

    translateFields(grid.g, scope.bPage.translate);

    if (attr.onCheck) {
      grid.g.withCheckbox = true;
      grid.refreshCheck = function () {
        grid.onCheck(scope, {
          checked: grid.checkedApi([])
        });
      }
    } else {
      grid.refreshCheck = _.noop;
    }

    loadGridData(query.path(), grid).finally(function () {
      evalGridData(grid);
      scope.$watch(query.fetching, _.partial(render, elem, htmlTable, query, grid, scope, attr, gridScroll, curId));
      if (grid.g.enabled) {
        grid.fetch().then(null, function (result) {
          bAlert.open(result);
        });
      }
    });

    elem.on('click', '.tbl > .tbl-body > .tbl-row', _.partial(onRowClick, scope, grid, _));
    elem.on('click', '.tbl > .tbl-body a.b-grid-cell', _.partial(onCellClick, scope, grid, _));
    elem.on('dblclick', '.tbl > .tbl-body > .tbl-row:not(.no-data-row)', _.partial(onRowDoubleClick, scope, grid.rowAt, onDblclick, _));

    elem.on('click', 'input[bcheckall]', _.partial(whenCheckAll, elem, scope, onCheck, _));
    elem.on('click', '.tbl > .tbl-body .checkbox', _.partial(whenCheck, elem, scope, onCheck, _));
    elem.on('dblclick', '.tbl > .tbl-body .checkbox', function (e) {
      e.stopPropagation();
    });

    $(window).resize(function () {
      scope.$apply(function () {
        grid.g.showFilterPanel = window.innerWidth > 776;
      });
    });

    scope.o = grid;
    scope.bPage.qLoaded.promise.then(_.partial(onCheck, []));
  }

  return {
    restrict: 'E',
    scope: true,
    controller: ctrl,
    link: link
  };
});
biruni.directive('bCol', function () {
  return {
    restrict : 'E',
    require : '^bGrid',
    link : {
      pre : function (scope, elem, attr, ctrl) {
        ctrl.grid.addCol({
          name: attr.name,
          size: attr.size ? attr.size : 1,
          asHtml: attr.asHtml,
          img: attr.img,
          sortBy: attr.sortBy,
          format: attr.format,
          scale: attr.scale ? parseInt(attr.scale) : undefined,
          align: attr.align,
          onClick: attr.onClick
        }, elem);
      }
    }
  };
});
biruni.directive('bAction', function () {
  return {
    restrict : 'E',
    require : '^bGrid',
    compile : function (el) {
      const html = el.html();
      return function (scope, el, attr, ctrl) {
        ctrl.grid.setActionHtml(html);
      }
    }
  };
});
biruni.directive('bFilter', function () {

  return {
    restrict : 'E',
    require : '^bGrid',
    link : {
      pre : function (scope, el, attr, ctrl) {
        ctrl.grid.addFilter(attr.name, attr.decorateWith, attr.checkboxLimit, attr.directive, attr.hasOwnProperty('extra'), attr.treeWithParent, attr.dateLevel);
      }
    }
  };
});
biruni.directive('bGridFilterPanel', function(bConfig, bQuery, bGridFilter,  $timeout) {
  function link(scope, elem, attr) {
    const grid = scope.bPage.grid(attr.name),
        query = grid.query();
    var   md; // remember mouse down info
    elem.find('.splitter')[0].onmousedown = onMouseDown;

    function onMouseDown(e) {
      md = {e, width: grid.g.filterPanelWidth};

      document.onmousemove = onMouseMove;
      document.onmouseup = () => {
          document.onmousemove = document.onmouseup = null;
          grid.saveSettingChanges();
      }
      e.preventDefault();
    }

    function onMouseMove(e) {
      let dx = e.clientX - md.e.clientX;
  
      if (grid.g.filterPanelDirection == 'right') {
        grid.g.filterPanelWidth = md.width - dx;
      } else {
        grid.g.filterPanelWidth = md.width + dx;
      }
      
      if (grid.g.filterPanelWidth < 305) grid.g.filterPanelWidth = 305;
      else if (grid.g.filterPanelWidth > 800) grid.g.filterPanelWidth = 900;

      elem.css('width', grid.g.filterPanelWidth + 'px')
    }

    function toogleDirection() {
      grid.g.filterPanelDirection = grid.g.filterPanelDirection == 'left' ? 'right' : 'left';
      grid.saveSettingChanges();
    }

    function focusNesFilter() {
      $timeout(()=> {
        elem.find('.add-new-field-wrapper').find('input').focus();
      });  
    }

    const query_name = attr.name + '_grid_filter';
    let q = scope.bPage.queries[query_name];

    if (!q) {
      q = bQuery(query.path());
      q.param(query.param());
      q.column(['code', 'name']);
      scope.bPage.queries[query_name] = q;
    }
    bGridFilter.loadFilterData(query, grid, query_name, scope.bPage);
 
    scope.a = {
      bConfig: bConfig,
      bGridFilter: bGridFilter,
      grid: grid
    };

    scope.toogleDirection = toogleDirection;
    scope.focusNesFilter = focusNesFilter;
  }

  return {
    restrict: 'E',
    scope: true,
    link: link,
    templateUrl: 'b-grid-filter-panel.html'
  };
});
biruni.directive('bGridController', function (bConfig, bGridFilter, bSortForm, bFrame, bQuery, bForms, bConstants) {

  function link(scope, elem, attr) {
    const grid = scope.bPage.grid(attr.name),
      query = grid.query(),
      o = {
        bConfig: bConfig,
        grid: grid
      };

    scope.o = o;

    scope.bPage.bindHotkey("F3", function () {
      elem.find("input").focus();
    });
    scope.bPage.bindHotkey("F4", openFilter);
    scope.bPage.bindHotkey("F7", reload);
    scope.bPage.bindHotkey("F8", openSortForm);
    scope.bPage.bindHotkey("F9", openGridSetting);

    o.startPage = 1;

    evalResult();
    scope.$watch(query.fetching, evalResult);

    function evalResult() {
      const r = query.result(),
        pn = r.offset / r.limit + 1;

      o.searchValue = query.searchValue();
      o.searchValueOld = o.searchValue;
      o.hasSearch = !!query.searchFields().length;
      o.filterClass = query.hasFilterValues() ? 'text-warning' : 'text-default';
      o.limit = r.limit;
      o.rowPerPageTitle = (Math.min(r.limit, r.count - r.offset) || 0) + ' / ' + r.count;
      o.curPageNo = pn;
      o.maxPage = r.maxPage;
      o.pages = _.range(1, o.maxPage + 1);
    }

    function reload() {
      query.fetch();
      grid.refreshCheck();
    }

    function changeLimit(v) {
      if (o.limit == v) return;
      query.limit(v);
      query.pageNo(1);
      reload();
    }

    function slidePageNo(shift) {
      if (shift && hasNextPage()) {
        o.startPage++;
      } else if (!shift && hasPrevPage()) {
        o.startPage--;
      }
    }

    function hasPrevPage() {
      return o.startPage > 1;
    }

    function hasNextPage() {
      return o.startPage <= o.maxPage - 5;
    }

    function changePageNo(v) {
      query.pageNo(v);
      reload();
    }

    function openFilter() {
      const query_name = attr.name + '_grid_filter';
      let q = scope.bPage.queries[query_name];

      if (!q) {
        q = bQuery(query.path());
        q.param(query.param());
        q.column(['code', 'name']);
        scope.bPage.queries[query_name] = q;
      }
      bGridFilter.open(query, grid, query_name, scope.bPage);
    }

    function search() {
      query.searchValue(o.searchValue);
      reload();
    }

    function onSearchKeyDown($event) {
      if ($event.keyCode == 13) {
        o.searchValueOld = o.searchValue;
        query.offset(0);
      }
    }

    function onSearchBlur() {
      o.searchValueOld = o.searchValue;
      query.offset(0);
    }

    function openSortForm() {
      bSortForm.open(grid);
    }

    function openGridSetting() {
      let path = query.path();
      path = path.substring(0, path.indexOf(':'));
      bFrame.open(bForms.GRID_SETTING, {
        name: attr.name
      }, undefined, {
        path: path
      });
    }

    function exportExcel() {
      const cols = _.chain(grid.g.cols)
        .flatten()
        .map(function (c) {
          if (c.name) {
            let img = grid.getField(c.name).img;
            if (img) img = img.join(';');
            let size = String(c.size).endsWith('%') ? (parseFloat(c.size) / bConstants.CELL_SHARE).toFixed(6) : parseFloat(c.size);
            return {
              name: c.name,
              label: grid.g.fields[c.name].label,
              size,
              img
            };
          }
        })
        .compact()
        .value();
      query.exportExcel(cols, scope.bPage.title);
    }

    function toggleFilterPanel(){
      grid.g.openFilterPanel = !grid.g.openFilterPanel;
      grid.saveSettingChanges();
    }

    scope.$watch('o.searchValueOld', function (v, o) {
      if (v !== o) {
        query.searchValue(v);
        reload();
      }
    });

    scope.reload = reload;
    scope.search = search;
    scope.openFilter = openFilter;
    scope.changeLimit = changeLimit;
    scope.slidePageNo = slidePageNo;
    scope.hasPrevPage = hasPrevPage;
    scope.hasNextPage = hasNextPage;
    scope.exportExcel = exportExcel;
    scope.changePageNo = changePageNo;
    scope.onSearchBlur = onSearchBlur;
    scope.openSortForm = openSortForm;
    scope.onSearchKeyDown = onSearchKeyDown;
    scope.openGridSetting = openGridSetting;
    scope.toggleFilterPanel = toggleFilterPanel;
  }

  return {
    restrict: 'E',
    scope: true,
    link: link,
    templateUrl: 'b-grid-controller.html'
  };
});
biruni.directive('bScrollable', function() {
  return {
    restrict: 'A',
    scope: true,
    link: function(scope, elem) {
      elem.hScroll();
    }
  }
});biruni.directive('bQlikpage', function ($sce, $http, bConfig, bRoutes, bAlert) {
  function notify(result) {
    let message = _.isString(result.data) ? result.data : result;
    bAlert.open(message);
  }

  function link(scope, elem, attr) {
    scope.$watch(attr.source, function(source) {
      if (!source) return;
      $http.post(bRoutes.QLIK_AUTH, _.pick(bConfig.auths(), 'project_code', 'filial_id'))
           .then(function() {
              scope.src = $sce.trustAsResourceUrl(source);
            })
           .catch(notify);
    });
  }

  return {
      restrict: 'E',
      link: link,
      template: function (elem, attr) {
        let width = attr.width ? attr.width : '100%';
        let height = attr.height ? attr.height : '1000px';

        return '<iframe ng-src="{{ src }}" style="height:' + height + ';width:' + width + ';border:none;overflow:hidden;" seamless></iframe>';
      }
  };
});biruni.directive('bSupersetPage', function ($http, $timeout, bFrame, bRoutes, bAlert, bRequire, bSessionStorage) {
  function getForm() {
    return bFrame.parseUrl().path;
  }

  function getGuestToken(form) {
    if (bSessionStorage.get('locked')) return '';
    return $http.post(bRoutes.SUPERSET_GET_GUEST_TOKEN, {
      form: form
    }).then((result) => result.data)
      .catch((exception) => {
        bAlert.open(exception.data)
      });
  }

  async function getDashboardInfo(form) {
    return await $http.post(bRoutes.SUPERSET_GET_DASHBOARD_INFOS, {
      form: form
    }).then((result) => result.data)
      .catch((exception) => {
        bAlert.open(exception.data)
      });
  }

  async function ctrl($scope, $attrs) {
    let hideTitle = !!$attrs.hideTitle ? $attrs.hideTitle === 'true' : true;
    let filtersExpanded = !!$attrs.filtersExpanded ? $attrs.filtersExpanded === 'true' : false;

    let form = getForm();
    let dashboard = await getDashboardInfo(form);
    
    bRequire.load('superset').then(() => {
      $timeout(() => {
        supersetEmbeddedSdk.embedDashboard({
          id: dashboard.dashboard_id, // given by the Superset embedding UI
          supersetDomain: dashboard.superset_domain,
          mountPoint: document.getElementById(dashboard.dashboard_id), // any html element that can contain an iframe
          fetchGuestToken: async () => await getGuestToken(form),
          dashboardUiConfig: { // dashboard UI config: hideTitle, hideTab, hideChartControls, filters.visible, filters.expanded (optional), urlParams (optional)
              hideTitle: hideTitle,
              filters: {
                  expanded: filtersExpanded,
              }
          },
          // optional additional iframe sandbox attributes
          iframeSandboxExtras: []
        });
      })
    }).catch(bAlert.open);

    $scope.dashboard_id = dashboard.dashboard_id;
  }

  return {
    restrict: 'E',
    scope: true,
    controller: ctrl,
    template: () => {
      return '<div id="{{ dashboard_id }}"></div>';
    }
  }
});biruni.directive('bWhenScrolled', function () {
    return {
        restrict: 'A',
        scope: true,
        link: function (scope, elm, attr) {
            let raw = elm[0];
            if (attr.bWhenScrolled) {
                function run() {
                    if (raw.scrollTop + raw.offsetHeight >= 0.95 * raw.scrollHeight) {
                        scope.$apply(attr.bWhenScrolled);
                    }
                }

                elm.bind('scroll', run);
                elm.bind('touchmove', run);
            }
        }
    }
});
biruni.directive('r', function () {
  return {
    required : 'E',
    template : '<i style="color:red">*</i>'
  };
});
biruni.directive('t', function ($rootScope, $compile) {

  function compile(elem, attr) {
    var txt = elem.text();

    function translate(scope) {
      return scope.bPage.translate;
    }

    function preLink(scope, elem, attr) {
      if ($rootScope.is_debug) {
        var tdev = $("<tdev>").attr("key", txt);
        elem.after(tdev);
        $compile(tdev)(scope);
      }
      translate(scope)(txt, []);
    }

    function postLink(scope, elem, attr) {
      var ps = [];
      for (var i = 0; i < 10; i++) {
        var p = attr['p' + (i + 1)];
        if (p) {
          ps.push('');
          watch(p, i);
        } else {
          break;
        }
      }

      function watch(p, i) {
        scope.$watch(p, function (v) {
          ps[i] = v;
          update();
        });
      }

      function update() {
        elem.text(translate(scope)(txt, ps));
      }
      update();

      if ($rootScope.is_debug) scope.updateTranslate = update;
    }

    return {
      pre  : preLink,
      post : postLink
    }
  }

  return {
    restrict : 'E',
    scope: true,
    compile : compile
  };
});
biruni.directive('bMap', function () {

  function link(scope, elem, attr) {
    scope.bPage.getMap(attr.name, elem.find('iframe'));
  }

  return {
    required : 'E',
    link : link,
    template : function (elem, attr) {
      var width = attr.width ? attr.width : '100%';
      var height = attr.height ? attr.height : '100%';

      return '<iframe style="border: 0;overflow: auto;" width="' + width + '"  height="' + height + '" src="about:blank"></iframe>';
    }
  };
});
biruni.directive('bMaxlength', function() {

  function link(scope, elem, attr) {
    var threshold = 5;

    if (elem.attr('b-number') != undefined) {
      threshold = 0;
    }

    elem.attr('maxlength', attr.bMaxlength);
    elem.maxlength({
      alwaysShow: false,
      threshold: threshold,
      warningClass: "badge badge-danger",
      limitReachedClass: "badge badge-danger",
      twoCharLinebreak: false
    });
  }

  return {
    restrict: 'A',
    scope: true,
    link: link
  }
});biruni.directive('bEditor', function ($parse, bRequire, bConfig, $timeout) {
  function link(scope, elem, attr, ctrl) {
    bRequire.load('ckeditor5').then(function() {
      var model = $parse(attr.model),
          setter = model.assign;

      function setData(editor) {
        setter(scope, editor.getData());
      }

      function launchEditor(editor) {
        $timeout(function() {
          editor.model.document.on('change:data', _ => {
            setData(editor)
          });

          scope.$watch(attr.model, function (newValue, oldValue) {
            if (newValue && !angular.equals(newValue, editor.getData())) {
              editor.setData(newValue);
            }
          });
        });
      }

      InlineEditor.create(elem[0], {
        toolbar: {
          items: [
            'undo',
            'redo',
            '|',
            'heading',
            '|',
            'bold',
            'italic',
            'underline',
            'strikethrough',
            '|',
            'fontColor',
            'alignment',
            '|',
            'bulletedList',
            'numberedList',
            'indent',
            'outdent',
            '|',
            'link',
            'imageUpload',
            'insertTable',
            'code',
            '|',
            'exportWord'
          ]
        },
        language: bConfig.langCode(),
        image: {
          toolbar: [
            'imageTextAlternative',
            'imageStyle:full',
            'imageStyle:side'
          ]
        },
        table: {
          contentToolbar: [
            'tableColumn',
            'tableRow',
            'mergeTableCells'
          ]
        }
      }).then(launchEditor).catch(error => {
        console.error(error);
      });
    });
  }

  return {
    restrict: 'E',
    link: link
  };
});
biruni.directive('bPagination', function ($parse, bConfig) {
  function link(scope, elem, attr, ctrl, transclude) {

    var pageItemsSetter = $parse(attr.to).assign || _.noop;
    var filteredSetter = $parse(attr.filtered).assign || _.noop;
    var $modal = elem.find('.modal').first();
    $modal.modal({
      backdrop : false,
      keyboard : true,
      show : false
    });
    var fp = {};

    var o = {
      bConfig : bConfig,
      limits : [1, 10, 50, 100, 500, 1000],
      columnList : [],
      filtered : [],
      pageItems : [],
      items : [],
      pageNumbers : [],
      currentLimit : 10,
      lastLimit : 10,
      currentPage : 1,
      lastPage : 1,
      maxPage : 0,
      searchValue : '',
      oldSearchValue : '',
      hasSearch : false,
      hasFilter : false,
      hasColumnList : false,
      isViewAll : true,
      rowPerPageTitle : '',
      small : attr.small != undefined
    };

    function clearSearchValue() {
      o.searchValue = '';
      onSearch();
    }

    function getPageItems() {
      var left = Math.max((o.currentPage - 1) * o.currentLimit, 0),
      right = Math.min(o.currentPage * o.currentLimit, o.filtered.length);
      return o.filtered.slice(left, right);
    }

    function getPageNumbers() {
      var r = [];
      for (var i = Math.max(1, o.currentPage - 4); i <= Math.min(o.maxPage, o.currentPage + 4); i++)
        r.push(i);
      return r;
    }

    function getMaxPage() {
      return Math.trunc((o.filtered.length + o.currentLimit - 1) / o.currentLimit);
    }

    function reloadPageItems() {
      o.pageItems = getPageItems();
      o.pageNumbers = getPageNumbers();
      o.rowPerPageTitle = String(o.pageItems.length) + ' / ' + String(o.filtered.length);
      pageItemsSetter(scope, o.pageItems);
    }

    function reloadFiltered() {
      o.filtered = _.filter(o.items, filterItem);
      o.maxPage = getMaxPage();
      o.currentPage = Math.max(1, Math.min(o.currentPage, o.maxPage));
      filteredSetter(scope, o.filtered);
    }

    function changeCurrentPage() {
      if (o.currentPage != o.lastPage) {
        o.lastPage = o.currentPage;
        reloadPageItems();
      }
    }

    function filterCondition(item, data) {
      return true;
    }

    function searchCondition(item, search) {
      return true;
    }

    function filterItem(item) {
      return searchCondition(item, String(o.searchValue)) && filterCondition(item, fp);
    }

    function refreshPagination(items) {
      if (items) {
        o.items = items;
      }
      reloadFiltered();
      reloadPageItems();
    }

    function onSearch() {
      if (o.searchValue != o.oldSearchValue) {
        o.oldSearchValue = o.searchValue;
        o.currentPage = 1;
        o.lastPage = 1;
        refreshPagination();
      }
    }

    function isNullFilterParams() {
      var is = true;
      _.each(fp, function (val) {
        if (val)
          is = false;
      });
      return is;
    }

    function styleForCurrentPage(i) {
      return i == o.currentPage ? {
        'font-weight' : '900'
      }
       : {};
    }

    function styleForCurrentLimit(i) {
      return i == o.currentLimit ? {
        'font-weight' : '900'
      }
       : {};
    }

    function hasPrevPage() {
      return o.currentPage > 1;
    }

    function hasNextPage() {
      return o.currentPage < o.maxPage;
    }

    function changePage(p) {
      o.currentPage = parseInt(p);
      changeCurrentPage();
    }

    function nextPage() {
      o.currentPage = Math.min(o.currentPage + 1, o.maxPage);
      changeCurrentPage();
    }

    function prevPage() {
      o.currentPage = Math.max(o.currentPage - 1, 1);
      changeCurrentPage();
    }

    function lastPage() {
      o.currentPage = o.maxPage;
      changeCurrentPage();
    }

    function firstPage() {
      o.currentPage = 1;
      changeCurrentPage();
    }

    function changeLimit(limit) {
      o.currentLimit = parseInt(limit);
      if (o.currentLimit != o.lastLimit) {
        o.currentPage = Math.trunc((o.currentPage - 1) * o.lastLimit / o.currentLimit) + 1;
        o.lastLimit = o.currentLimit;
        o.lastPage = o.currentPage;
        refreshPagination();
      }
    }

    function onSearchKeyPress($event) {
      if ($event.charCode == 13) {
        onSearch();
      }
    }

    function openFilter() {
      $modal.modal('show');
    }

    function onClose() {
      $modal.modal('hide');
    }

    function onFilter() {
      o.isViewAll = isNullFilterParams();
      refreshPagination();
      onClose();
    }

    function onViewAll() {
      o.isViewAll = true;
      _.each(fp, function (val, key) {
        fp[key] = null;
      });
      refreshPagination();
      onClose();
    }

    function openColumnList() {
      if(o.hasColumnList)
      o.columnList = $parse(attr.columnList)(scope);
    }

    scope.o = o;
    scope.nextPage = nextPage;
    scope.prevPage = prevPage;
    scope.lastPage = lastPage;
    scope.firstPage = firstPage;
    scope.changePage = changePage;
    scope.onClose = onClose;
    scope.onFilter = onFilter;
    scope.onViewAll = onViewAll;
    scope.openFilter = openFilter;
    scope.changeLimit = changeLimit;
    scope.hasPrevPage = hasPrevPage;
    scope.hasNextPage = hasNextPage;
    scope.onSearchBlur = onSearch;
    scope.onSearchKeyPress = onSearchKeyPress;
    scope.styleForCurrentPage = styleForCurrentPage;
    scope.styleForCurrentLimit = styleForCurrentLimit;
    scope.openColumnList = openColumnList;

    scope.$watch(attr.limits, function(value) {
       if(value) {
          _.chain(value)
            .values()
            .each(function(item){
              if(_.isArray(item)) o.limits = item;
              else {
                o.currentLimit = item;
              }
            });
        if(!o.currentLimit) o.currentLimit = o.limits[0];
       }
    });

    if(!_.isUndefined(attr.columnList)) {
      o.hasColumnList = true;
    }

    if (!_.isUndefined(attr.searchBy)) {
      o.hasSearch = true;
      scope.$watch(attr.searchBy, function (value) {
        if(value) {
          searchCondition = value;
          if(!_.isUndefined(attr.clearSearchValue)) {
            $parse(attr.clearSearchValue).assign(scope, clearSearchValue);
          }
        }
      });
    }

    if (!_.isUndefined(attr.filterBy)) {
      o.hasFilter = true;
      scope.$watch(attr.filterBy, function (value) {
        filterCondition = value;
      });
    }



    scope.$watchCollection(attr.from, function (value) {
      if (value) {
        refreshPagination(value);
      }
    });

    transclude(function (clone, scopeInner) {
      scopeInner.fp = fp;
      elem.find('.modal .form-container').append(clone);
    });

  }

  return {
    restrict : 'E',
    scope : true,
    link : link,
    transclude : true,
    templateUrl : 'b-pagination.html'
  };
});
biruni.directive('bInput', function($rootScope, bConfig, AppSession, bAlert, bHttp, bFrame, $q, $document, $parse, bStorage, $http, bRoutes, $templateCache, $timeout) {
  var keydownHandler = null;

  $document.on('keydown', function(e) {
    if (keydownHandler) {
      keydownHandler(e);
    }
  });

  function link(scope, elem, attr) {
    var f = {
      searchValue: '',
      rows: [],
      langs: bConfig.langs,
      isAdd: false,
      isView: false,
      readonly: false,
      showHint: false,
      noRows: false,
      hasMoreRows: false,
      // Use only for query, when localData attribute is not provided
      queryFetching: false
    },
    delayDelete = false; // used to delay the deletion of selected values when backspace is pressed in the search

    f.showMultiple = showMultiple;
    f.onMultipleClick = onMultipleClick;

    f.getPlaceholder = getPlaceholder;
    f.onInputFocus = onInputFocus;
    f.onInputBlur = onInputBlur;
    f.onDeleteMousedown = onDeleteMousedown;
    f.onDeleteClick = onDeleteClick;
    f.onClearAllClick = onClearAllClick;
    f.onSaveDefaultValue = onSaveDefaultValue;
    f.onDeleteDefaultValue = onDeleteDefaultValue;
    f.onMouseOver = onMouseOver;
    f.onSelectClick = onSelectClick;
    f.onAddClick = onAddClick;
    f.onViewClick = onViewClick;
    f.onMoreClick = onMoreClick;

    scope._$bInput = f;

    var inputElement = elem.find('input').first();
    var hintElement = elem.find('.b-input > .hint');

    elem.on('mousedown', '.hint', function (e) {
      e.preventDefault();
    });

    var lastOrderNo = null;

    var isMultiple = false;
    var query = null;
    var isLocalData = false;
    var localData = [];
    var localDataReady = [];
    var multipleShowCount = -1; // if more than @multipleShowCount items are selected, they will be hidden if not in focus
    var tryDeleteMultiple = false;
    var placeholder = f.langs.input_placeholder;
    var inputFocused = false;
    var showOnFocus = true;
    var allowUpdate = false;
    var justSelected = false;

    var autoFill = false;
    var limit = 10;
    var lastLimit = limit;
    var pageNo = null;
    var maxPage = null;

    // Use only for query, when localData attribute is not provided
    var column = [];
    var sort = [];

    var search = [];

    const MIN_FILL_LIMIT = 2; // Mimimal limit for checking that results are more than 1

    let settingCode;

    if (isLocalData = attr.localData != undefined) {
      scope.$watchCollection(attr.localData, function (x) {
        localData = x;
        if (inputFocused) {
          update();
        }
      });
      settingCode = "b-input-local:" + scope.$id;
    } else {
      if (attr.name == undefined) {
        bAlert.open('bInput: attribute @name is required if attribute @local-data is not defined!');
        return;
      } else {
        if (attr.runPage == undefined) {
          query = !scope.bPage ? _.last(bFrame.pages).query(attr.name) : scope.bPage.query(attr.name);
        } else {
          let page = $parse(attr.runPage)(scope);
          query = page.query(attr.name);
        }
      }
      let path = query.path();
      let k = path.lastIndexOf("+")
      if (k > 0) {
        let p = path.lastIndexOf(":");
        if (p > 0) {
          path = path.substring(0, k) + path.substring(p)
        } else {
          path = path.substring(0, k);
        }
      }
      settingCode = path + (attr.referName ? '#' + attr.referName : '');
    }
    if($rootScope.is_debug){
      settingCode += ':filial_id:' + AppSession.si.filial.id;
    }

    if (attr.model == undefined) {
      bAlert.open('bInput: attribute @model is required!');
      return;
    }

    var autoChangeQuery = null;
    var autoSelectRow = null;
    var autoDeleteRow = null;

    if (attr.multiple == undefined) {
      /**
       * This code block is designed for "Single" b-input directive
       */
      f.modelKeySelected = false;
      var isModelKey = false;

      var modelAlias = null;
      var modelSetter = null;

      var model = attr.model.replace(/\s/g, '').split('|');
      if (model[1]) {
        modelAlias = model[1];
        modelSetter = $parse(model[0]).assign;
        sort.push(modelAlias);
        search.push(modelAlias);
        if (!isLocalData) column.push(modelAlias);
      }
      scope.$watch(model[0], function (value) {
        let oldValue = f.model;
        f.model = value == undefined ? '' : value;
        f.searchValue = f.model;
        if (value || oldValue) onSearchChange();
        else inputFocused && inputElement.focus();
      });

      if (isModelKey = attr.modelKey != undefined) {
        var modelKeyAlias = null;
        var modelKeySetter = null;

        var modelKey = attr.modelKey.replace(/\s/g, '').split('|');
        if (modelKey[1]) {
          modelKeyAlias = modelKey[1];
          modelKeySetter = $parse(modelKey[0]).assign;
          if (!isLocalData) column.push(modelKeyAlias);
        }
        scope.$watch(modelKey[0], function (value) {
          f.modelKey = value == undefined ? '' : value;
          f.modelKeySelected = f.modelKey != '';
          if (f.modelKeySelected) {
            inputElement[0].maxLength = null;
          } else {
            inputElement[0].removeAttribute('maxLength');
          }
        });
      }

      if (attr.required != undefined) {
        if (attr.required == '') f.required = true;
        else scope.$watch(attr.required, x => f.required = !!x);
      }

      if (attr.requiredKey != undefined) {
        if (attr.requiredKey == '') f.requiredKey = true;
        else scope.$watch(attr.requiredKey, x => f.requiredKey = !!x);
      }

      autoChangeQuery = function () {
        query.searchValue(f.searchValue);
      };
      autoSelectRow = function (row) {
        modelSetter(scope, row[modelAlias]);
        if (isModelKey) {
          modelKeySetter(scope, row[modelKeyAlias]);
        }
      };
      autoDeleteRow = function () {
        if (onDelete) {
          onDelete(scope);
        } else {
          modelSetter(scope, '');
          if (isModelKey) modelKeySetter(scope, '');
        }
      };
    } else {
      /**
       * This code block is designed for "Multiple" b-input directive
       */
      isMultiple = true;
      var dublicates = false;
      multipleShowCount = parseInt(attr.multiple || multipleShowCount);
      scope.$watch(() => f.searchValue, function (nw, old) {
        if (old.length && nw.length == 0) {
          delayDelete = true;
          $timeout(() => delayDelete = false, 500);
        }
        onSearchChange();
      });
      var modelSetter = $parse(attr.model).assign;
      scope.$watchCollection(attr.model, value => f.model = value || []);
      var modelKey = attr.modelKey;
      if (!isLocalData && modelKey) column.push(modelKey);

      f.label = attr.label;
      if (f.label == undefined) {
        f.label = 'name';
      }
      if (!isLocalData) column.push(f.label);
      search.push(f.label);
      sort.push(f.label);

      var closeOnSelect = false;
      if (attr.closeOnSelect != undefined) closeOnSelect = true;
      if (attr.modelKey != undefined && attr.dublicates != undefined) {
        bAlert.open('bInput: attribute @dublicates cannot be defined if attribute @model-key exists!');
        return;
      }
      if (attr.dublicates != undefined) dublicates = true;

      autoChangeQuery = function () {
        query.searchValue(f.searchValue);
        if (modelKey != undefined) {
          let where = null;
          if (f.model.length > 0) where = [modelKey, '<>', _.pluck(f.model, modelKey)];
          query.where(where);
        }
      };
      autoSelectRow = function (row, index) {
        f.model.push(row);
        modelSetter(scope, f.model);
        if (!dublicates) f.rows.splice(index, 1);
      };
      autoDeleteRow = function (row, index) {
        if (onDelete) {
          onDelete(scope, {row: row, index: index});
        } else {
          f.model.splice(index, 1);
        }
      };
    }

    if (!isLocalData && attr.column != undefined) column = column.concat(...attr.column.replace(/\s/g, '').split(','));
    if (column.length) {
      column = query.column().concat(column);
      query.column(column);
    }

    if (!isLocalData) {
      if (attr.sort != undefined) sort = attr.sort.replace(/\s/g, '').split(',');
      if (sort.length) query.sort(sort);
    }

    if (attr.search != undefined) search = search.concat(...attr.search.replace(/\s/g, '').split(','));
    if (!isLocalData && search.length) {
      query.searchFields(search);
    }

    var onChange = null;
    var onSelect = null;
    var onDelete = null;
    var onAdd = null;
    var onView = null;

    if (!isLocalData && attr.onChange != undefined) onChange = $parse(attr.onChange);
    if (attr.onSelect != undefined) onSelect = $parse(attr.onSelect);
    if (attr.onDelete != undefined) onDelete = $parse(attr.onDelete);

    if (attr.onAdd != undefined) {
      onAdd = $parse(attr.onAdd);
      f.onAddClick = onAddClick;
      scope.$watch(attr.isAdd, x => f.isAdd = x);
    }
    if (attr.onView != undefined) {
      onView = $parse(attr.onView);
      f.onViewClick = onViewClick;
      scope.$watch(attr.isView, x => f.isView = x);
    }

    if (attr.limit != undefined) scope.$watch(attr.limit, x => limit = x);
    if (attr.hideOnFocus != undefined) showOnFocus = false;
    if (attr.autoFill != undefined) {
      if (attr.autoFill == '') {
        autoFill = true;
        tryAutoFill();
      } else {
        scope.$watch(attr.autoFill, x => {
          autoFill = !!x;
          tryAutoFill();
        });
      }
    }
    if (attr.readonly != undefined) {
      if (attr.readonly == '') f.readonly = true;
      else scope.$watch(attr.readonly, x => f.readonly = !!x);
    }
    if (attr.placeholder != undefined) scope.$watch(attr.placeholder, x => placeholder = x);

    function autoFillInput() {
      autoFill = false;
      if (f.rows.length == 1) {
        runOnSelect(f.rows[0], 0);
        justSelected = false;
      }
    }

    function tryAutoFill() {
      $timeout(function () {
        if (autoFill && !f.modelKey) {
          var oldLimit = limit;
          limit = MIN_FILL_LIMIT;
          isLocalData ? updateLocalData(autoFillInput) : updateQuery(autoFillInput);
          lastLimit = limit = oldLimit;
        }
      });
    }

    function checkParams() {
      return (isMultiple || !f.modelKeySelected || !f.model) && !f.readonly && (f.searchValue != '' || showOnFocus);
    }

    function clear() {
      pageNo = 1;
      lastLimit = limit;
      f.noRows = true;
      f.hasMoreRows = false;
      f.activeRowIndex = -1;
      f.rows = [];
    }

    function evalQueryResult() {
      let result = query.result();

      pageNo = query.pageNo();
      maxPage = result.maxPage;
      f.hasMoreRows = maxPage > pageNo;

      if (result.table && result.table.length > 0) {
        f.rows = f.rows.concat(result.table);
        f.noRows = false;
      }
    }

    function genOrderNo() {
      return lastOrderNo = _.uniqueId('order');
    }

    function fetchTable() {
      let $promise = $q.defer();
      let orderNo = genOrderNo();
      query.fetch(null, attr.referName).then(function () {
        if (orderNo != lastOrderNo) $promise.reject();
        else $promise.resolve();
      }, bAlert.open);
      return $promise.promise;
    }

    function updateQuery(onDone) {
      if (onChange) {
        onChange(scope, {query: query, value: f.searchValue});
      } else {
        autoChangeQuery();
      }
      query.pageNo(1);
      query.limit(limit);
      bHttp.unblockOnce();
      f.queryFetching = true;
      f.activeRowIndex = -1;
      fetchTable().then(function () {
        if (inputFocused || autoFill) {
          clear();
          evalQueryResult();
          onDone();
        }
      }).finally(function () {
        f.queryFetching = false;
      });
    }

    function evalLocalData() {
      maxPage = Math.floor((localDataReady.length + lastLimit - 1) / lastLimit);
      f.hasMoreRows = maxPage > pageNo;

      let result = localDataReady.slice((pageNo - 1) * lastLimit, pageNo * lastLimit);

      return result;
    }

    function updateLocalData(onDone) {
      clear();
      localDataReady = localData;
      if (isMultiple && modelKey) {
        let selectedRows = _.pluck(f.model, modelKey);
        localDataReady = _.reject(localDataReady, row => _.contains(selectedRows, row[modelKey]));
      }
      if (f.searchValue != '' && search.length) {
        let searchValue = f.searchValue.toLowerCase();
        localDataReady = _.filter(localDataReady, row => _.find(search, searchKey => (row[searchKey] + '').toLowerCase().indexOf(searchValue) > -1));
      }
      if (localDataReady.length) {
        f.rows = evalLocalData();
        f.noRows = false;
      }
      onDone();
    }

    function update() {
      if (allowUpdate) {
        isLocalData ? updateLocalData(showHint) : updateQuery(showHint);
      }
    }

    function onSearchChange() {
      if (inputFocused) {
        if (justSelected) {
          justSelected = false;
          if (!isMultiple) return;
        }
        if (!isMultiple && f.modelKeySelected) {
          autoDeleteRow();
        }
        if (checkParams()) {
          allowUpdate = true;
          update();
        } else {
          allowUpdate = false;
          hideHint();
        }
      }
    }

    function showMultiple() {
      return tryDeleteMultiple || inputFocused || multipleShowCount == -1 || (f.model || []).length <= multipleShowCount;
    }

    function onMultipleClick() {
      inputElement.focus();
    }

    function getPlaceholder() {
      if (isMultiple) {
        return showMultiple() ? placeholder : '';
      } else {
        return placeholder;
      }
    }

    function onInputFocus() {
      inputFocused = true;
      keydownHandler = keydownCallback;
      if (checkParams()) {
        allowUpdate = true;
        update();
      }
    }

    function onInputBlur() {
      inputFocused = false;
      keydownHandler = null;
      hideHint();
    }

    function onDeleteMousedown() {
      tryDeleteMultiple = true;
      checkDefaultValueEquals();
    }

    function onDeleteClick(row, index) {
      if (isMultiple) tryDeleteMultiple = false;
      autoDeleteRow(row, index);
      $timeout(()=>inputElement.focus());
      checkDefaultValueEquals();
    }

    function onClearAllClick() {
      f.model.splice(0, f.model.length);
      allowUpdate = true;
      inputElement.focus();
      checkDefaultValueEquals();
    }

    function onMouseOver(index) {
      f.activeRowIndex = index;
    }

    function runOnSelect(row, index) {
      justSelected = true;
      if (onSelect) {
        onSelect(scope, {row: row});
        if (isMultiple && !dublicates) f.rows.splice(index, 1);
      } else {
        autoSelectRow(row, index);
      }
      checkDefaultValueEquals();
    }

    function onSelectClick(row, index) {
      if (f.queryFetching) return;
      runOnSelect(row, index);
      if (!isMultiple) {
        hideHint();
      } else {
        inputElement.select();
        if (closeOnSelect) {
          hideHint();
        } else if (!f.rows.length && f.hasMoreRows) {
          onMoreClick();
        } else if (f.activeRowIndex == f.rows.length) {
          f.activeRowIndex--;
        }
      }
      setTimeout(controlHint, 5);
    }

    function onAddClick() {
      onAdd(scope, {value: f.searchValue});
      hideHint();
    }

    function onViewClick() {
      onView(scope, {value: f.searchValue});
      hideHint();
    }

    function moreQuery() {
      if (f.queryFetching) return;
      if (pageNo <= maxPage) {
        query.pageNo(++pageNo);
        query.limit(lastLimit);
        bHttp.unblockOnce();
        f.queryFetching = true;
        fetchTable().then(function () {
          if (inputFocused) {
            let count = f.rows.count;
            evalQueryResult();
            if (f.rows.count > count) {
              f.activeRowIndex++;
              scrollIntoView();
            }
          }
        }).finally(function () {
          f.queryFetching = false;
        });
      }
    }

    function moreLocalData() {
      pageNo++;
      let count = f.rows.count;
      f.rows = f.rows.concat(evalLocalData());
      if (f.rows.count > count) {
        f.activeRowIndex++;
        scrollIntoView();
      }
    }

    function onMoreClick() {
      isLocalData ? moreLocalData() : moreQuery();
    }

    function getElementRect(elem) {
      elem = elem[0] == undefined ? elem : elem[0];
      return elem.getBoundingClientRect();
    }

    function controlHint() {
      var inputElemRect = getElementRect(inputElement);
      var bInput = inputElement.closest('.b-input');

      // Finds the above and the below available space of input inside the container
      function getAvailableSpace(container, input) {
        const containerRect = container[0].getBoundingClientRect();
        const inputRect = input[0].getBoundingClientRect();
        return {
          above: inputRect.top - containerRect.top,
          below: containerRect.bottom - inputRect.bottom
        };
      }
      
      // Finds a suitable scrollable parent container
      function getParentContainer() {
        const minHeight = 300; // Minimum space required above or below the input
        let currentParent = bInput.scrollParent();

        // Traverse up the DOM tree to find a scrollable parent with sufficient height
        while (currentParent.length && currentParent[0] !== document) {
          const space = getAvailableSpace(currentParent, bInput);
          if (space.above >= minHeight || space.below >= minHeight) {
            return currentParent;
          }
          currentParent = currentParent.scrollParent();
        }

        // If no suitable container found, use the window object
        return $(window);
      }

      // Finds a suitable scrollable parent container
      var scrollParent = getParentContainer();

      // Reposition the hint element when the scrollable parent is scrolled
      scrollParent.scroll(function (ev) {
        hintElement.position({
          of: bInput,
          my: 'left top',
          at: 'left bottom',
          collision: 'fit flipfit',
          within: $(this),
        });
      });
      // Set initial styles for the hint element
      hintElement.css({
        opacity: 1,
        width: attr.hintWidth || inputElemRect.width,
      });
      // Initial positioning of the hint element
      hintElement.position({
        of: bInput,
        my: 'left top',
        at: 'left bottom',
        collision: 'fit flipfit',
        within: $(scrollParent),
      });
    }

    function showHint() {
      f.showHint = true;
      hintElement.css({opacity: 0});
      setTimeout(controlHint, 5);
      if (f.rows.length) f.activeRowIndex = 0;
    }

    function hideHint() {
      f.showHint = false;
    }

    function scrollIntoView() {
      $timeout(() => {
        let target = elem.find('.hint-item.active')[0];
        target.parentNode.scrollTop = target.offsetTop - target.parentNode.offsetTop;
      });
    }

    function rowUp() {
      if (f.activeRowIndex > 0) {
        f.activeRowIndex--;
        scrollIntoView();
      }
    }

    function rowDown() {
      if (f.activeRowIndex + 1 < f.rows.length) {
        f.activeRowIndex++;
        scrollIntoView();
      } else if (f.hasMoreRows) {
        onMoreClick();
      }
    }

    function keydownCallback(e) {
      if (f.queryFetching || f.readonly) return;
      switch (e.keyCode) {
        // arrow up
        case 38:
          if (elem.find('.hint-body').is(':hover')) return;
          e.preventDefault();
          rowUp();
          break;
        // arrow down
        case 40:
          if (elem.find('.hint-body').is(':hover')) return;
          e.preventDefault();
          rowDown();
          break;
        // enter
        case 13:
          e.preventDefault();
          if (f.activeRowIndex > -1 && f.activeRowIndex < f.rows.length) {
            onSelectClick(f.rows[f.activeRowIndex], f.activeRowIndex);
          }
          break;
        // backspace
        case 8:
          if (isMultiple) {
            if (f.searchValue == '' && f.model.length && !delayDelete) {
              let index = f.model.length - 1;
              onDeleteClick(f.model[index], index);
            }
          }
          break;
        // escape
        case 27:
          hideHint();
          break;
      }
      scope.$apply();
    }

    function checkDefaultValueEquals() {
      if (isMultiple) {
        f.isValueEqualsDefaultValue = JSON.stringify(f.model) === JSON.stringify(f.defaultValueModel);
      }
    }

    function tryToSetDefaultValue(data) {
      if (!f.model || _.isEmpty(f.model)) {
        function resetQueryWhere() {
          query.where(null);
          if (onChange) {
            onChange(scope, {query: query, value: f.searchValue});
          } else {
            autoChangeQuery();
          }
        }
        resetQueryWhere();

        let keyField;
        if (modelKeyAlias) {
          keyField = modelKeyAlias;
        } else if (modelKey) {
          if (Array.isArray(modelKey)) {
            keyField = modelKey[0];
          } else {
            keyField = modelKey;
          }
          if (keyField.includes(".")) {
            keyField = keyField.substring(keyField.lastIndexOf(".") + 1);
          }
        }

        if (isMultiple) {
          if (keyField) {
            let a = [keyField, "=", _.pluck(data.model, keyField)];
            if (query.where()) {
              query.where(["and", [query.where(), a]]);
            } else {
              query.where(a);
            }
          }
          fetchTable().then(function () {
            let result = query.result().table;

            if (result.length == data.model.length) {
              f.defaultValueModel = result;
              for (let item of result) {
                runOnSelect(item);
              }
              checkDefaultValueEquals();
            } else {
              onDeleteDefaultValue();
            }
            resetQueryWhere();
          }, function () {
            resetQueryWhere();
          });
        } else {
          if (keyField) {
            let a = [keyField, "=", data.modelKey];
            if (query.where()) {
              query.where(["and", [query.where(), a]]);
            } else {
              query.where(a);
            }
          }
          fetchTable().then(function () {
            let result = query.result().table[0];
            f.defaultValueModel = data.model;
            f.defaultValueModelKey = data.modelKey;
            runOnSelect(result);
            resetQueryWhere();
          }, function () {
            resetQueryWhere();
          })
        }
      }
    }

    function loadDefaultValue() {
      if ($rootScope.is_debug) {
        let data = bStorage.json(settingCode);
        data = typeof data == 'string' ? JSON.parse(data) : undefined;
        if (!_.isEmpty(data)) {
          if (Array.isArray(data.model) && data.model.length == 0) return;
          tryToSetDefaultValue(data);
        }
      } else {
        $http.post(bRoutes.LOAD_USER_SETTING, {
          setting_code: settingCode
        }).then(function (result) {
          if (result.data) {
            if (Array.isArray(result.data.model) && result.data.model.length == 0) return;
            tryToSetDefaultValue(result.data);
          }
        }, function (error) {
          console.error('b-input default value loader', error);
        });
      }
    }

    function onDeleteDefaultValue() {
      if ($rootScope.is_debug) {
        f.defaultValueModel = undefined;
        f.defaultValueModelKey = undefined;
        bStorage.text(settingCode, null);
        checkDefaultValueEquals();
      } else {
        $http.post(bRoutes.SAVE_USER_SETTING, {
          setting_code: settingCode
        }).then(function () {
          f.defaultValueModel = undefined;
          f.defaultValueModelKey = undefined;
          checkDefaultValueEquals()
        }, function (error) {
          console.error('unable to delete default value', error);
        });
      }
    }

    function onSaveDefaultValue() {
      if (!f.model) return;
      let settingValue = JSON.stringify({
        model: f.model,
        modelKey: f.modelKey
      });
      if ($rootScope.is_debug) {
        f.defaultValueModel = angular.copy(f.model);
        f.defaultValueModelKey = angular.copy(f.modelKey);
        bStorage.json(settingCode, settingValue);
        checkDefaultValueEquals()
      } else {
        $http.post(bRoutes.SAVE_USER_SETTING, {
          setting_code: settingCode,
          setting_value: settingValue
        }).then(function () {
          f.defaultValueModel = angular.copy(f.model);
          f.defaultValueModelKey = angular.copy(f.modelKey);
          checkDefaultValueEquals()
        }, function (error) {
          console.error('unable to save default value', error);
        });
      }
    }

    if ('pinable' in attr) {
      let order = $parse(attr['pinable'])();
      if(!order){
        order = 1;
      }
      $timeout(loadDefaultValue, 500 * order);
    }
  }

  function template(elem, attr) {
    let headerHtml = elem.find('header').html();
    let inputHtml = null;
    let readonly = '';
    let deleteIcon = attr.deleteIcon || 'fa fa-times';
    let tSavePin = bConfig.langs.input_save_pin_value;
    let tRemovePinned = bConfig.langs.input_remove_pin_value;

    if (attr.multiple == undefined) {
      let model = attr.model.split('|')[0].trim();
      let inputIconClass = '';
      let inputIconSpan = '';
      let pinButton = '';

      readonly = attr.readonly == undefined ? '' : 'ng-readonly="_$bInput.readonly"';

      if ('pinable' in attr) {
        pinButton = `<button type="button" class='pin-button'>
                       <i class="edit fas fa-thumbtack cursor-pointer text-hover-primary fa-rotate-270" 
                          ng-show="!_$bInput.readonly && _$bInput.modelKeySelected && _$bInput.modelKey == _$bInput.defaultValueModelKey"
                          ng-click="_$bInput.onDeleteDefaultValue()"
                          b-toggle="tooltip" data-delay='{"show":"1000"}' title="${tRemovePinned}"></i>
                       <i class="edit fas fa-thumbtack cursor-pointer text-hover-primary"
                          ng-show="!_$bInput.readonly && _$bInput.modelKeySelected && _$bInput.modelKey != _$bInput.defaultValueModelKey"
                          ng-click="_$bInput.model && _$bInput.onSaveDefaultValue()"
                          b-toggle="tooltip" data-delay='{"show":"1000"}' title='${tSavePin}'></i>
                     </button>`;
      }

      if (attr.inputIcon != undefined) {
        inputIconSpan = `
          <span class="icon-left">
            <span>
              <i class="${attr.inputIcon}"></i>
            </span>
          </span>
        `;
      }

      // validate
      let validate = [];

      if (attr.required != undefined && attr.model != undefined) {
        validate.push('model: !_$bInput.required || !!_$bInput.model');
      }

      if (attr.requiredKey != undefined && attr.modelKey != undefined) {
        validate.push('modelKey: !_$bInput.requiredKey || !!_$bInput.modelKey');
      }

      validate = validate.length ? 'b-validate="{' + validate.join(', ') + '}"' : '';

      inputHtml = `
        <div class="simple">
          ${pinButton}
          ${inputIconSpan}
          <input type="text"
                 class="form-control"
                 placeholder="{{ _$bInput.getPlaceholder() }}"
                 ng-model="${model}"
                 ng-focus="_$bInput.onInputFocus()"
                 ng-blur="_$bInput.onInputBlur()"
                 ${readonly}
                 ${validate}>
          <span class="icon-right">
          <span>
              <i ng-show="_$bInput.queryFetching && !_$bInput.showHint" class="spinner"></i>
              <i class="edit ${deleteIcon}" ng-show="!_$bInput.readonly && _$bInput.modelKeySelected" ng-click="_$bInput.onDeleteClick()"></i>
            </span>
          </span>
        </div>
      `;
    } else {
      readonly = attr.readonly == undefined ? '' : 'ng-show="!_$bInput.readonly"';
      let pinButton = '';
      if ('pinable' in attr) {
        pinButton = `<button type="button" class='pin-button'>
                       <i class="edit fas fa-thumbtack cursor-pointer text-hover-primary fa-rotate-270" 
                          ng-show="!_$bInput.readonly && _$bInput.model.length > 0 && _$bInput.isValueEqualsDefaultValue"
                          ng-click="_$bInput.onDeleteDefaultValue()"
                          b-toggle="tooltip" data-delay='{"show":"1000"}' title="${tRemovePinned}"></i>
                       <i class="edit fas fa-thumbtack cursor-pointer text-hover-primary"
                          ng-show="!_$bInput.readonly && _$bInput.model.length > 0 && !_$bInput.isValueEqualsDefaultValue"
                          ng-click="_$bInput.model && _$bInput.onSaveDefaultValue()"
                          b-toggle="tooltip" data-delay='{"show":"1000"}' title="${tSavePin}"></i>
                     </button>`;
      }

      inputHtml = `
        <div class="multiple form-control" ng-class="{padding: _$bInput.showMultiple() && _$bInput.model.length, readonly: _$bInput.readonly}">
          <a class="btn btn-secondary" ng-show="_$bInput.showMultiple()" ng-repeat="row in _$bInput.model track by $index">
            <span>
              <i class="fa fa-times" ng-if="!_$bInput.readonly" ng-mousedown="_$bInput.onDeleteMousedown()" ng-click="_$bInput.onDeleteClick(row, $index)"></i>
              <span>{{ row[_$bInput.label] }}</span>
            </span>
          </a>
          <span class="title" ng-click="_$bInput.onMultipleClick()" ng-hide="_$bInput.showMultiple()">{{ _$bInput.model.length }}&nbsp;{{ _$bInput.langs.input_selected }}</span>
          <input type="text"
                 class="form-control"
                 placeholder="{{ _$bInput.getPlaceholder() }}"
                 ng-model="_$bInput.searchValue"
                 ng-focus="_$bInput.onInputFocus()"
                 ng-blur="_$bInput.onInputBlur()"
                 ${readonly}/>
          <span class="clear-button">
            <span><i class="edit ${deleteIcon}" ng-show="!_$bInput.readonly && _$bInput.model.length > 0" ng-click="_$bInput.onClearAllClick()"></i></span>
          </span>
          ${pinButton}
        </div>
      `;
    }

    return _.template($templateCache.get('b-input.html'))({
      inputHtml: inputHtml,
      headerHtml: headerHtml == undefined ? '' : '<div class="hint-header"><div class="form-row">' + headerHtml + '</div></div>',
      rowHtml: elem.find('content').html() || elem.html()
    });
  }

  return {
    restrict: 'E',
    scope: true,
    link: link,
    template: template
  };
});
biruni.directive('bToggle', function (bConfig, $parse, $templateCache, $compile, $timeout) {

  function link(scope, elem, attr, ngModel) {
    var container = attr.container;

    if (container) {
      if (!container.startsWith('body')) container = 'b-page:last-child ' + container;
    } else {
      container = 'b-page:last-child';
    }

    function compile(popover) {
      elem.on('inserted.bs.popover', function(){
        $compile(popover.tip)(scope);
      });
      elem.on('remove', function () {
        $(this).popover('dispose');
      });
    }

    if (attr.bToggle === 'popover') {
      $timeout(function() {
        elem.popover();
        compile(elem.data()["bs.popover"]);
      });
    } else if (attr.bToggle === 'tooltip') {
      $timeout(function() {
        elem.tooltip();
        elem.on('remove', function () {
          $(this).tooltip('dispose');
        });
      });
    } else {
      var c = {};

      c.clickYes = _.partial($parse(attr.onClickYes), scope);
      c.clickNo = _.partial($parse(attr.onClickNo), scope);

      scope._$toggle = c;

      var langs = bConfig.langs,
          temp = $templateCache.get('b-mini-confirm.html');

      var content = _.template(temp)({
        yesText : attr.yesText || langs.yes,
        yesBtnClass : attr.yesBtnClass || 'btn btn-default',
        yesIconClass : attr.yesIconClass || '',
        noText : attr.noText || langs.no,
        noBtnClass : attr.noBtnClass || 'btn btn-default',
        noIconClass : attr.noIconClass || ''
      });

      elem.popover({
        title : function(){
          return $(this)[0].dataset.title;
        },
        content : content,
        container : container,
        delay : {'show' : 0, 'hide' : 200},
        html : eval(attr.html || true),
        placement : attr.placement || 'left',
        viewport : {'selector' : attr.viewport || '.page-content', 'padding' : 10},
        trigger : attr.trigger || 'focus'
      });

      compile(elem.data()["bs.popover"]);
    }

    scope.$on('$destroy', function() {
      if (attr.bToggle === 'tooltip') {
        elem.tooltip('hide');
      } else {
        elem.popover('hide');
      }
    });
  }

  return {
    restrict : 'A',
    scope : true,
    link : link
  };
});
biruni.directive('bTreeSelect', function (bConfig, $document, $parse, $templateCache, $timeout) {
  var keydownHandler = null;

  $document.on('keydown', function (e) {
    if (keydownHandler) {
      keydownHandler(e);
    }
  });

  function link(scope, elem, attr) {
    var origin;
    var currentOrigin;
    var isMultiple = false;
    var inputFirstFocused = false;
    var inputElem = elem.find('input.form-control').first();
    var hintElement = elem.find('.hint');
    var bTreeViewNode = elem.find('.b-tree-view');
    var hideLimit = parseInt(attr.hideLimit) || 10;
    var row_limit = parseInt(attr.rowLimit) || 200;
    var groups = {};

    var onChange = $parse(attr.onChange);
    var onSelect = $parse(attr.onSelect);

    var keys = {
      id: attr.idKey || 'id',
      text: attr.labelKey || 'name',
      parent: attr.parentKey || 'parent_id'
    };

    var f = {
      searchValue: undefined,
      model: null,
      langs: bConfig.langs,
      showHint: false,
      disabled: false,
      onlyLeaf: false,
      required: false,
      inputBlurred: false,
      isAdd: false,
      isView: false,
      pageNo: 0,
      hasMore: false,

      inputElemFocus,
      getPlaceholder,
      onInputFocus,
      onInputBlur,
      showMore,
      clearAll,
    };

    f.onAddClick = onAddClick;
    f.onViewClick = onViewClick;

    scope._$bTree = f;

    elem.on('mousedown', '.hint', function(ev) {
      ev.preventDefault();
    });

    scope.$watchCollection(attr.origin, function(value) {
      if (value) {
        origin = [];
        f.searchValue = '';
        bTreeViewNode.html('');
        pushToOrigin('');
        currentOrigin = origin;

        function pushToOrigin(parent) {
          return _.reduce(value, function(m, x) {
            if (x[keys.parent] == parent) {
              origin.push(x);
              groups[x[keys.id]] = pushToOrigin(x[keys.id]) && f.onlyLeaf;
              return true;
            }
            return m;
          }, false);
        }
      }
    });

    scope.$watch(() => f.searchValue, search);
    scope.$watch(attr.disabled, x => f.disabled = x);

    if (_.has(attr, 'onlyLeaf')) f.onlyLeaf = true;
    if (_.has(attr, 'required')) f.required = true;

    let onAdd = null;
    let onView = null;
    let model = attr.model.replace(/\s/g, '');
    let modelSetter = $parse(model).assign;
    let autoSelectRow;
    let autoDeleteRow;
    let placeholder = f.langs.input_placeholder;

    if (attr.placeholder != undefined) scope.$watch(attr.placeholder, x => placeholder = x);

    function inputElemFocus() {
      inputElem.focus();
    }

    if (attr.onAdd != undefined) {
      onAdd = $parse(attr.onAdd);
      f.onAddClick = onAddClick;
      scope.$watch(attr.isAdd, x => f.isAdd = x);
    }

    if (attr.onView != undefined) {
      onView = $parse(attr.onView);
      f.onViewClick = onViewClick;
      scope.$watch(attr.isView, x => f.isView = x);
    }

    if (attr.multiple == undefined) {
      autoSelectRow = function(row) {
        modelSetter(scope, row[keys.id]);

        if (onSelect) {
          onSelect(scope, { row: row });
        }
      }

      autoDeleteRow = function() {
        modelSetter(scope, '');
      }

      var delayOnChange = _.after(2, function() {
        if (onChange) {
          onChange(scope);
        }
      });

      scope.$watch(attr.model, function(x) {
        // TODO check two times initializing
        let row = _.findWhere(origin, { [keys.id]: x });

        if (row) {
          _.each(origin, x => x.selected = false);
          f.model = row[keys.id];
          f.searchValue = row[keys.text];
          f.modelSelected = true;
          row.selected = true;
          bTreeViewNode.find(`#child-${f.model}`).children('.radio').find('input').prop('checked', true);
        } else {
          clearTreeView([f.model]);
          f.model = '';
          f.searchValue = '';
          f.modelSelected = false;
        }

        delayOnChange();
      });
    } else {
      isMultiple = true;

      autoSelectRow = function(datas) {
        !_.isArray(datas) && (datas = [datas]);
        _.each(datas, function(row) {
          let ind = _.indexOf(f.model, row[keys.id]);
          if (row.selected && ind == -1) {
            f.model.push(String(row[keys.id]));
          } else if (!row.selected && ind != -1) {
            f.model.splice(ind, 1);
          }
        });

        modelSetter(scope, f.model);

        if (onSelect) {
          onSelect(scope, { rows: datas });
        }
      }

      scope.$watchCollection(attr.model, function(val) {
        if (!_.isEmpty(val)) {
          _.each(origin, function(x) {
            x.selected = _.any(val, y => x[keys.id] == y);
            if (x.selected) {
              bTreeViewNode.find(`#child-${x[keys.id]}`).children('.checkbox').find('input').prop('checked', true);
            }
          });
        }
        if ((!val || _.isEmpty(val)) && !_.isEmpty(f.model)) {
          clearTreeView(f.model);
        }
        f.model = _.map(val, String) || [];

        if (onChange) {
          onChange(scope);
        }
      });
    }

    function clearAll() {
      _.each(origin, x => x.selected = false);
      if (isMultiple) {
        f.model = [];
      } else {
        f.model = '';
      }
      modelSetter(scope, f.model);
      inputElemFocus();
    }

    function setHasMore() {
      let len = currentOrigin?.length || 0;
      len -= f.pageNo * row_limit;
      f.hasMore = Math.ceil(len / row_limit) > 1;
    }

    function showMore() {
      f.pageNo++;
      setHasMore();
      addTreeView();
    }

    function getRow(id) {
      return _.findWhere(origin, _.object([keys.id], [id]));
    }

    function clearTreeView(model) {
      if (inputFirstFocused) {
        _.each(model, function(x) {
          let row = getRow(x);
          if (row) row.selected = false;
        });
      } else {
        _.each(model, function(x) {
          let row = getRow(x);
          if (row) row.selected = false;
        });
      }
    }

    function initHint() {
      f.pageNo = 0;
      setHasMore();
      bTreeViewNode.html('');
    }

    function onInputFocus() {
      keydownHandler = keydownCallback;

      if (!inputFirstFocused) {
        inputFirstFocused = true;
      }
      initHint();
      addTreeView();
      showHint();
    }

    function onInputBlur() {
      keydownHandler = null;
      f.inputBlurred = true;
      hideHint();
    }

    function onAddClick() {
      onAdd(scope);
      hideHint();
    }

    function onViewClick() {
      onView(scope);
      hideHint();
    }

    function keydownCallback(e) {
      if (e.keyCode == 27) {
        hideHint();
      } else if (e.keyCode == 8) {
        !isMultiple && f.modelSelected && onDeleteClick();
      }
      scope.$apply();
    }

    function treeViewNode(li, check) {
      let ul = $(li).children('ul');
      let sum = 1;

      if (ul.length == 0) return 1;

      _.each(ul.children('li'), function(x) {
        let res = { show: false };
        sum += treeViewNode(x, res);

        if (res.show || $(x).children('label').find('input').prop('checked')) {
          check.show = true;
        }
      });

      var limit = ($(li).parent('#root-').length > 0 ? 5 : 1) * hideLimit;

      if (!check.show && sum > limit) {
        ul.hide();
        ul.siblings('i').removeClass('fa-minus').addClass('fa-plus');
      }

      return sum;
    }

    function controlHint() {
      var elem = inputElem.closest('.b-tree-select');
      var scrollParent = elem.scrollParent();

      scrollParent.scroll(function(ev) {
        hintElement.position({
          of: elem,
          my: 'left top',
          at: 'left bottom',
          collision: 'fit flipfit',
          within: $(this)
        });
      });
      hintElement.css({
        opacity: 1,
        width: inputElem.outerWidth()
      });
      hintElement.position({
        of: elem,
        my: 'left top',
        at: 'left bottom',
        collision: 'fit flipfit'
      });
    }

    function showHint() {
      f.showHint = true;
      hintElement.css({ opacity: 0 });
      setTimeout(controlHint, 5);
    }

    function hideHint() {
      f.showHint = false;
    }

    function getPlaceholder() {
      return placeholder;
    }

    function onDeleteClick() {
      let row = _.findWhere(origin, { [keys.id]: f.model });
      row.selected = false;
      autoDeleteRow();
      !inputElem.is(':focus') && inputElem.focus();
    }

    function inputClicked(ev) {
      ev.preventDefault();
      let curElem = ev.currentTarget.firstElementChild;
      if (curElem.disabled) return;
      curElem.checked = !curElem.checked;
      let li = $(ev.currentTarget).closest('li');
      let data = getRow(li[0].id.substr(6));
      data.selected = curElem.checked;
      if (!isMultiple && curElem.checked) {
        _.each(origin, function(x) {
          if (x.selected) x.selected = false;
        });
        $timeout(function() {
          $(inputElem).blur();
        });
      }
      if (!isMultiple && !curElem.checked) {
        scope.$apply(_.partial(autoDeleteRow));
      } else {
        scope.$apply(_.partial(autoSelectRow, data));
        if (attr.optionCheckChilds != undefined && $(ev.currentTarget.previousSibling).hasClass('fa-plus')) {
          checkChilds($(ev.target).closest('li'), true);
        }
      }
      _.some(origin, x => x[keys.id] == data[keys.id] && (x.selected = curElem.checked));
    }

    function checkSpanText(ulNode, checked) {
      ulNode.find('.check-childs').each(function(i, spanElem) {
        if (checked) {
          spanElem.innerText = bConfig.langs.ts_uncheck_all;
          $(spanElem).removeClass('check-all');
        } else {
          spanElem.innerText = bConfig.langs.ts_check_all;
          $(spanElem).addClass('check-all');
        }
      });
    }

    function checkChilds(ev, optionCheckChilds = false) {
      let node = optionCheckChilds ? $(ev).find('ul') : $(ev.target).closest('ul');
      let checked = optionCheckChilds ? $(ev).find('.check-childs').hasClass('check-all') : $(ev.target).hasClass('check-all');
      checkSpanText(node, checked);
      let datas = [];
      node.find('input').each(function(i, input) {
        let inputNode = $(input);
        let liNode = inputNode.closest('li');
        let ulNode = inputNode.closest('ul');
        if (!optionCheckChilds && liNode.is(':hidden') || ulNode && ulNode.is(':hidden').length > 0 || input.disabled) return;
        input.checked = checked;
        let data = getRow(liNode[0].id.substr(6)); // "child-" prefix size is 6
        data.selected = checked;
        datas.push(data);
        _.some(origin, x => x[keys.id] == data[keys.id] && (x.selected = checked));
      });
      scope.$apply(_.partial(autoSelectRow, datas));
    }

    function addTreeView() {
      let inputClass = isMultiple ? 'checkbox' : 'radio';
      let from = f.pageNo * row_limit;
      let to = (f.pageNo + 1) * row_limit;
      currentOrigin.slice(from, to).forEach(function(node, idx) {
        let ulRoot = bTreeViewNode.find(`#root-${node[keys.parent]}`);
        if (!ulRoot.length) {
          ulRoot = $(`<ul id="root-${node[keys.parent]}"></ul>`);
          if (isMultiple && node[keys.parent] != '') {
            let checks = $(`<span class="text-muted check-childs check-all">${f.langs.ts_check_all}</span>`);
            checks.bind('click', checkChilds);
            ulRoot.append(checks);
          }
        }
        let input = $(`<input type="${inputClass}" />`);
        let is_group = groups[node[keys.id]] || node.is_group;
        input[0].checked = node.selected;
        input[0].disabled = node.disabled || is_group;
        !isMultiple && input[0].setAttribute('name', attr.name || 'b-tree-radio');
        let label = $(`<label class="${inputClass}"></label>`);
        label.bind('click', inputClicked).append(input).append(`<span>${node[keys.text]}</span>`);

        if (is_group) {
          label.addClass("group");
        }

        let liNode = $(`<li id="child-${node[keys.id]}"></li>`);
        let ulChild = bTreeViewNode.find(`#root-${node[keys.id]}`);
        ulChild.length && liNode.append(ulChild);
        ulRoot.append(liNode.append(label));
        let liRoot = bTreeViewNode.find(`#child-${node[keys.parent]}`);
        if (liRoot.length) {
          liRoot.append(ulRoot);
          if (liRoot.children().length == 2) {
            let iNode = $('<i class="fa fa-minus"></i>');
            iNode.click(function(ev) {
              $(ev.target).nextAll('ul').stop().slideToggle(100);
              if (iNode.hasClass('fa-plus')) {
                iNode.removeClass('fa-plus');
                iNode.addClass('fa-minus');
              } else {
                iNode.addClass('fa-plus');
                iNode.removeClass('fa-minus');
              }
            }).mouseover(function(ev) {
              $(ev.target).closest('li').css('background', '#f5faff');
            }).mouseleave(function(ev) {
              $(ev.target).closest('li').css('background', 'transparent');
            });
            liRoot.prepend(iNode);
          }
        } else {
          bTreeViewNode.append(ulRoot);
        }
      });
      // Collapse elements with more children
      _.each(bTreeViewNode.find('#root-').children('li'), function(li) {
        treeViewNode(li, { show: false });
      });
    }

    function toLower(val) {
      return String(val || '').toLowerCase();
    }

    function checkWord(searchValue, row) {
      return searchValue && toLower(row[keys.text]).indexOf(toLower(searchValue)) > -1;
    }

    function search() {
      if (!inputFirstFocused) return;
      let searchValue = !f.modelSelected ? f.searchValue : '';
      if (!searchValue) {
        currentOrigin = origin;
      } else {
        let enabled = {};
        _.each(origin, function(x) {
          if (checkWord(searchValue, x)) {
            enabled[x[keys.id]] = true;
            let id = x[keys.parent];
            while (id) {
              enabled[id] = true;
              let par = _.find(origin, z => z[keys.id] == id);
              id = par[keys.parent];
            }
          }
        });
        currentOrigin = _.filter(origin, x => enabled[x[keys.id]]);
      }
      initHint();
      addTreeView();
    }
  }

  function template(elem, attr) {
    let inputHtml = null;
    if (attr.multiple == undefined) {
      inputHtml = `
        <div class="simple">
          <input type="text"
                 class="form-control"
                 placeholder="{{ _$bTree.getPlaceholder() }}"
                 ng-model="_$bTree.searchValue"
                 ng-focus="_$bTree.onInputFocus()"
                 ng-blur="_$bTree.onInputBlur()"
                 ng-disabled="_$bTree.disabled"
                 ng-required="_$bTree.required" />
          <span class="clear-button" ng-show="!_$bTree.disabled && _$bTree.model.length > 0" ng-click="_$bTree.clearAll()">
            <span><i class="edit fa fa-times"></i></span>
          </span>
        </div>
      `;
    } else {
      inputHtml = `
        <div class="multiple form-control" ng-class="{'blurred': _$bTree.inputBlurred && _$bTree.required, 'empty': _$bTree.required && !_$bTree.model.length}">
          <span class="title" ng-click="_$bTree.inputElemFocus()" ng-hide="!_$bTree.model.length">
            {{ _$bTree.model.length }}&nbsp;{{ _$bTree.langs.input_selected }}
          </span>
          <input type="text"
                 class="form-control"
                 placeholder="{{ _$bTree.getPlaceholder() }}"
                 ng-model="_$bTree.searchValue"
                 ng-focus="_$bTree.onInputFocus()"
                 ng-blur="_$bTree.onInputBlur()"
                 ng-disabled="_$bTree.disabled"
                 ng-required="_$bTree.required && !_$bTree.model.length" />
          <span class="clear-button" ng-show="!_$bTree.disabled && _$bTree.model.length > 0" ng-click="_$bTree.clearAll()">
            <span><i class="edit fa fa-times"></i></span>
          </span>
        </div>
      `;
    }
    return _.template($templateCache.get('b-tree-select.html'))({ inputHtml: inputHtml });
  }


  return {
    restrict: 'E',
    scope: true,
    link: link,
    template: template
  };
});
biruni.directive('bPgGrid', function($rootScope, $compile, $parse, $timeout, bStorage, bConstants, $http, bRoutes) {
  let docMouseMove;
  let docMouseUp;
  let downEvents = 'mousedown touchstart';
  let moveEvents = 'mousemove touchmove';
  let upEvents = 'mouseup touchend';
  let hasTouch = hasTouchDevice();

  let keyInfo = [
    { "name": "backspace", "key": "Backspace", "code": "Backspace", "keyCode": 8 },
    { "name": "tab", "key": "Tab", "code": "Tab", "keyCode": 9 },
    { "name": "enter", "key": "Enter", "code": "Enter", "keyCode": 13 },
    { "name": "pause/break", "key": "Pause", "code": "Pause", "keyCode": 19 },
    { "name": "caps lock", "key": "CapsLock", "code": "CapsLock", "keyCode": 20 },
    { "name": "escape", "key": "Escape", "code": "Escape", "keyCode": 27 },
    { "name": "space", "key": "", "code": "Space", "keyCode": 32 },
    { "name": "page up", "key": "PageUp", "code": "PageUp", "keyCode": 33 },
    { "name": "page down", "key": "PageDown", "code": "PageDown", "keyCode": 34 },
    { "name": "end", "key": "End", "code": "End", "keyCode": 35 },
    { "name": "home", "key": "Home", "code": "Home", "keyCode": 36 },
    { "name": "left arrow", "key": "ArrowLeft", "code": "ArrowLeft", "keyCode": 37 },
    { "name": "up arrow", "key": "ArrowUp", "code": "ArrowUp", "keyCode": 38 },
    { "name": "right arrow", "key": "ArrowRight", "code": "ArrowRight", "keyCode": 39 },
    { "name": "down arrow", "key": "ArrowDown", "code": "ArrowDown", "keyCode": 40 },
    { "name": "print screen", "key": "PrintScreen", "code": "PrintScreen", "keyCode": 44 },
    { "name": "insert", "key": "Insert", "code": "Insert", "keyCode": 45 },
    { "name": "delete", "key": "Delete", "code": "Delete", "keyCode": 46 },
    { "name": 0, "key": 0, "code": "Digit0", "keyCode": 48 },
    { "name": 1, "key": 1, "code": "Digit1", "keyCode": 49 },
    { "name": 2, "key": 2, "code": "Digit2", "keyCode": 50 },
    { "name": 3, "key": 3, "code": "Digit3", "keyCode": 51 },
    { "name": 4, "key": 4, "code": "Digit4", "keyCode": 52 },
    { "name": 5, "key": 5, "code": "Digit5", "keyCode": 53 },
    { "name": 6, "key": 6, "code": "Digit6", "keyCode": 54 },
    { "name": 7, "key": 7, "code": "Digit7", "keyCode": 55 },
    { "name": 8, "key": 8, "code": "Digit8", "keyCode": 56 },
    { "name": 9, "key": 9, "code": "Digit9", "keyCode": 57 },
    { "name": "a", "key": "a", "code": "KeyA", "keyCode": 65 },
    { "name": "b", "key": "b", "code": "KeyB", "keyCode": 66 },
    { "name": "c", "key": "c", "code": "KeyC", "keyCode": 67 },
    { "name": "d", "key": "d", "code": "KeyD", "keyCode": 68 },
    { "name": "e", "key": "e", "code": "KeyE", "keyCode": 69 },
    { "name": "f", "key": "f", "code": "KeyF", "keyCode": 70 },
    { "name": "g", "key": "g", "code": "KeyG", "keyCode": 71 },
    { "name": "h", "key": "h", "code": "KeyH", "keyCode": 72 },
    { "name": "i", "key": "i", "code": "KeyI", "keyCode": 73 },
    { "name": "j", "key": "j", "code": "KeyJ", "keyCode": 74 },
    { "name": "k", "key": "k", "code": "KeyK", "keyCode": 75 },
    { "name": "l", "key": "l", "code": "KeyL", "keyCode": 76 },
    { "name": "m", "key": "m", "code": "KeyM", "keyCode": 77 },
    { "name": "n", "key": "n", "code": "KeyN", "keyCode": 78 },
    { "name": "o", "key": "o", "code": "KeyO", "keyCode": 79 },
    { "name": "p", "key": "p", "code": "KeyP", "keyCode": 80 },
    { "name": "q", "key": "q", "code": "KeyQ", "keyCode": 81 },
    { "name": "r", "key": "r", "code": "KeyR", "keyCode": 82 },
    { "name": "s", "key": "s", "code": "KeyS", "keyCode": 83 },
    { "name": "t", "key": "t", "code": "KeyT", "keyCode": 84 },
    { "name": "u", "key": "u", "code": "KeyU", "keyCode": 85 },
    { "name": "v", "key": "v", "code": "KeyV", "keyCode": 86 },
    { "name": "w", "key": "w", "code": "KeyW", "keyCode": 87 },
    { "name": "x", "key": "x", "code": "KeyX", "keyCode": 88 },
    { "name": "y", "key": "y", "code": "KeyY", "keyCode": 89 },
    { "name": "z", "key": "z", "code": "KeyZ", "keyCode": 90 },
    { "name": "select key (Context Menu)", "key": "ContextMenu", "code": "ContextMenu", "keyCode": 93 },
    { "name": "numpad 0", "key": 0, "code": "Numpad0", "keyCode": 96 },
    { "name": "numpad 1", "key": 1, "code": "Numpad1", "keyCode": 97 },
    { "name": "numpad 2", "key": 2, "code": "Numpad2", "keyCode": 98 },
    { "name": "numpad 3", "key": 3, "code": "Numpad3", "keyCode": 99 },
    { "name": "numpad 4", "key": 4, "code": "Numpad4", "keyCode": 100 },
    { "name": "numpad 5", "key": 5, "code": "Numpad5", "keyCode": 101 },
    { "name": "numpad 6", "key": 6, "code": "Numpad6", "keyCode": 102 },
    { "name": "numpad 7", "key": 7, "code": "Numpad7", "keyCode": 103 },
    { "name": "numpad 8", "key": 8, "code": "Numpad8", "keyCode": 104 },
    { "name": "numpad 9", "key": 9, "code": "Numpad9", "keyCode": 105 },
    { "name": "multiply", "key": "*", "code": "NumpadMultiply", "keyCode": 106 },
    { "name": "add", "key": "+", "code": "NumpadAdd", "keyCode": 107 },
    { "name": "subtract", "key": "-", "code": "NumpadSubtract", "keyCode": 109 },
    { "name": "decimal point", "key": ".", "code": "NumpadDecimal", "keyCode": 110 },
    { "name": "divide", "key": "/", "code": "NumpadDivide", "keyCode": 111 },
    { "name": "f1", "key": "F1", "code": "F1", "keyCode": 112 },
    { "name": "f2", "key": "F2", "code": "F2", "keyCode": 113 },
    { "name": "f3", "key": "F3", "code": "F3", "keyCode": 114 },
    { "name": "f4", "key": "F4", "code": "F4", "keyCode": 115 },
    { "name": "f5", "key": "F5", "code": "F5", "keyCode": 116 },
    { "name": "f6", "key": "F6", "code": "F6", "keyCode": 117 },
    { "name": "f7", "key": "F7", "code": "F7", "keyCode": 118 },
    { "name": "f8", "key": "F8", "code": "F8", "keyCode": 119 },
    { "name": "f9", "key": "F9", "code": "F9", "keyCode": 120 },
    { "name": "f10", "key": "F10", "code": "F10", "keyCode": 121 },
    { "name": "f11", "key": "F11", "code": "F11", "keyCode": 122 },
    { "name": "f12", "key": "F12", "code": "F12", "keyCode": 123 },
    { "name": "num lock", "key": "NumLock", "code": "NumLock", "keyCode": 144 },
    { "name": "scroll lock", "key": "ScrollLock", "code": "ScrollLock", "keyCode": 145 },
    { "name": "audio volume mute", "key": "AudioVolumeMute", "code": "", "keyCode": 173 },
    { "name": "audio volume down", "key": "AudioVolumeDown", "code": "", "keyCode": 174 },
    { "name": "audio volume up", "key": "AudioVolumeUp", "code": "", "keyCode": 175 },
    { "name": "media player", "key": "LaunchMediaPlayer", "code": "", "keyCode": 181 },
    { "name": "launch application 1", "key": "LaunchApplication1", "code": "", "keyCode": 182 },
    { "name": "launch application 2", "key": "LaunchApplication2", "code": "", "keyCode": 183 },
    { "name": "semi-colon", "key": ";", "code": "Semicolon", "keyCode": 186 },
    { "name": "equal sign", "key": "=", "code": "Equal", "keyCode": 187 },
    { "name": "comma", "key": ",", "code": "Comma", "keyCode": 188 },
    { "name": "dash", "key": "-", "code": "Minus", "keyCode": 189 },
    { "name": "period", "key": ".", "code": "Period", "keyCode": 190 },
    { "name": "forward slash", "key": "/", "code": "Slash", "keyCode": 191 },
    { "name": "Backquote/Grave accent", "key": "`", "code": "Backquote", "keyCode": 192 },
    { "name": "open bracket", "key": "[", "code": "BracketLeft", "keyCode": 219 },
    { "name": "back slash", "key": "\\", "code": "Backslash", "keyCode": 220 },
    { "name": "close bracket", "key": "]", "code": "BracketRight", "keyCode": 221 },
    { "name": "single quote", "key": "'", "code": "Quote", "keyCode": 222 }
  ];

  let metaKeyInfo = [
    { "name": "shift", "key": "Shift", "code": "Shift", "keyCode": 16 },
    { "name": "ctrl", "key": "Control", "code": "Control", "keyCode": 17 },
    { "name": "alt", "key": "Alt", "code": "Alt", "keyCode": 18 },
    { "name": "meta", "key": "Meta", "code": "Meta", "keyCode": 91 }
  ];

  function getKeyCodeFromKey(key) {
    if(_.isUndefined(key)) return [];

    let keys = String(key).toLowerCase().split('+');

    if (keys.length > 2) {
      console.error('Combination of two keys is allowed only');
      return [];
    }

    let metaKey = keys.length > 1 ? keys[0] : false;
    let modifierKeyCode = _.find(keyInfo, e => String(e.key).toLowerCase() == _.last(keys))['keyCode'];

    if (metaKey && !_.find(metaKeyInfo, k => k.name.toLowerCase() === metaKey)) {
      console.error('Meta key must be in Ctrl, Shift, Alt')
      return [];
    }
    return [metaKey, modifierKeyCode];
  }

  function getX(e) {
    return e.pageX ?? (e.touches && e.touches[0]?.pageX) ?? (e.changedTouches && e.changedTouches[0].pageX);
  }

  function parse(attr) {
    if (attr) {
      return $parse(attr);
    }
  }

  function splitNames(xs) {
    if (xs) {
      return _.chain(xs.split(','))
              .invoke('trim')
              .compact()
              .map(x => (x[x.length - 1] == '?') ? x.slice(0, x.length - 1) : x)
              .value();
    }
    return [];
  }

  function splitSearchNull(search, searchable) {
    return _.chain([...(search || "").split(','), ...(searchable || "").split(',')])
            .invoke('trim')
            .compact()
            .uniq()
            .filter(x => (x[x.length - 1] == '?'))
            .map(x => x.slice(0, x.length - 1))
            .value();
  }

  function composeOnCheck(scope, onCheck, checkedApi, indexes) {
    if (onCheck) {
      onCheck(scope, {
        checked: checkedApi(indexes)
      });
    }
  }

  function whenCheck(elem, scope, onCheck, event) {
    event.stopPropagation();
    var checkAll = elem.find('input[bcheckall]');
    var checkboxes = elem.find('input[data-bcheck]');
    var indexes = _.chain(checkboxes)
      .filter('checked')
      .map(function (x) {
        return parseInt(x.dataset.bcheck);
      })
      .value();

    checkAll.prop('indeterminate', indexes.length > 0 && indexes.length != checkboxes.length);
    checkAll.prop('checked', indexes.length > 0);

    scope.$apply(_.partial(onCheck, indexes));
  }

  function whenCheckAll(elem, scope, onCheck, event) {
    var ch = this.checked;
    elem.find('input[data-bcheck]').each(function () {
      this.checked = ch;
    });
    whenCheck(elem, scope, onCheck, event);
  }

  function whenSort(scope, elem, onSort, pgGrid, event) {
    event.stopPropagation();
    pgGrid.uncheckAll();
    onSort($(this).attr('sort'));
    scope.$apply();
  }

  function saveSetting(data) {
    if ($rootScope.is_debug) {
      bStorage.json(data.setting_code, data.setting_value);
    } else {
      data.setting_value = JSON.stringify(data.setting_value);
      $http.post(bRoutes.SAVE_USER_LARGE_SETTING, data).then(_, function (error) {
        console.error('unable to save settings', error);
      });
    }
  }

  function getSearch(g) {
    return _.chain(g.fields).filter('search').pluck('name').value();
  }

  function getSearchNull(g) {
    return _.chain(g.fields).filter('search_null').pluck('name').value();
  }

  function parseElems(scope, html, attr, translate, pgGrid) {
    function isAttrTruthy(key) {
      if (_.has(attr, key)) {
        let value = $parse(attr[key])(scope);
        return _.isUndefined(value) || value === '' || !!value;
      } else return false;
    }

    var g = pgGrid.g;
    if (!g.isInit) {
      var headers = [];

      if (attr.sort) g.defaultSort = splitNames(attr.sort);
      if (attr.search) g.defaultSearch = splitNames(attr.search);
      if (attr.searchable) g.defaultSearchable = splitNames(attr.searchable);
      if (attr.search || attr.searchable) g.defaultSearchNull = splitSearchNull(attr.search, attr.searchable);

      g.hasNavigate = isAttrTruthy('bNavigate');
      g.naviRight = attr.naviRight;
      g.naviLeft = attr.naviLeft;
      g.naviUp = attr.naviUp || 'ArrowUp';
      g.naviDown = attr.naviDown || 'ArrowDown';

      var cols = [];

      function extractCols(x) {
        if (!x.attr('access') || $parse(x.attr('access'))(scope)) {
          cols.push({
            name: x.attr('name'),
            size: parseInt(g.customColSizes[x.attr('name')] || x.attr('size'))
          });
          g.fields.push({
            name: x.attr('name'),
            label: translate(`pg.${pgGrid.getLabelName() || pgGrid.getName()}.${x.attr('name')}`),
            sort: _.contains(g.defaultSort, x.attr('name')),
            search: _.contains(g.defaultSearch, x.attr('name')),
            search_null: _.contains(g.defaultSearchNull, x.attr('name')),
            searchable: _.contains(g.defaultSearch, x.attr('name')) || _.contains(g.defaultSearchable, x.attr('name')),
            format: x.attr('format'),
            date_format: x.attr('date-format'),
            required: x.attr('required') != undefined,
            static: g.isStatic || x.attr('static') != undefined,
            column: true,
            child: x.html().trim(),
            header: undefined,
            onNavigate: x.attr('on-navigate')
          });
        }
      }

      _.each($(html), function(col) {
        var x = $(col);

        if (col.nodeName == 'B-PG-ROW') {
          _.each(x.children(), function(cell) {
            if (cell.nodeName == 'B-PG-COL') {
              let c = $(cell);
              extractCols(c);
            }
          });
        } else if (col.nodeName == 'B-PG-COL') {
          extractCols(x);
        } else if (col.nodeName == 'B-PG-EXTRA-COL') {
          if (!x.attr('access') || $parse(x.attr('access'))(scope)) {
            g.fields.push({
              name: x.attr('name'),
              label: translate(`pg.${pgGrid.getLabelName() || pgGrid.getName()}.${x.attr('name')}`),
              sort: _.contains(g.defaultSort, x.attr('name')),
              search: _.contains(g.defaultSearch, x.attr('name')),
              search_null: _.contains(g.defaultSearchNull, x.attr('name')),
              searchable: _.contains(g.defaultSearch, x.attr('name')) || _.contains(g.defaultSearchable, x.attr('name')),
              format: x.attr('format'),
              date_format: x.attr('date-format'),
              required: false,
              static: g.isStatic || x.attr('static') != undefined,
              column: true,
              child: x.html().trim(),
              header: undefined,
              onNavigate: x.attr('on-navigate')
            });
          }
        } else if (col.nodeName == 'B-FREE-COL') {
          if (g.colsDefault.length) g.freeColAlign = 'bottom';
          g.freeCols.push({
            size: x.attr('size'),
            child: x.html().trim()
          });
        } else if (col.nodeName == 'B-PG-HEADER') {
          headers.push({
            name: x.attr('name'),
            child: x.html().trim()
          });
        } else if (col.nodeName == 'B-PG-FILTER') {
          let dw = x.attr('decorate-with');
          g.filterFields.push({
            name: x.attr('name'),
            type: dw ? 'number' : x.attr('type') || 'text',
            equal: !!dw || (x.attr('directive') == 'equal'),
            decorateWith: dw
          });
        }
      });

      _.each(g.filterFields, function(f) {
        if (_.findIndex(g.fields, { name: f.name }) == -1) {
          g.fields.push({
            name: f.name,
            label: translate(`pg.${pgGrid.getLabelName() || pgGrid.getName()}.${f.decorateWith || f.name}`),
            required: false,
            column: false
          });
        }
      })

      if (cols.length > 0) {
        g.colsDefault = cols;
      }

      _.each(headers, function(x) {
        var field = _.findWhere(g.fields, {name: x.name});
        if (field) {
          field.header = x.child.replace(/::label/, field.label);
        }
      });

      g.isInit = true;
    } else {
      _.each(g.fields, c => c.search = _.contains(g.defaultSearch, c.name));
    }

    var s = bStorage.json(g.storageKey);

    if (s.cols && _.every(s.cols, x => _.findWhere(g.fields, { name: x.name }))) {
      g.cols = s.cols
    } else {
      g.cols = angular.copy(g.colsDefault);
    }

    if (s.search && _.every(s.search, function (n) {
      var f = _.findWhere(g.fields, { name: n });
      return f && (f.search || f.searchable);
    })) {
      _.each(g.fields, function (field) {
        field.search = _.contains(s.search, field.name);
      });
    }
    g.search = getSearch(g);
    g.searchNull = getSearchNull(g);
  }

  function uncheckAll(pgGrid, elem) {
    if (pgGrid.onCheck) {
      elem.find('input[data-bcheck]').each(function () {
        this.checked = false;
      });

      elem.find('input[bcheckall]').each(function () {
        this.checked = false;
        this.indeterminate = false;
      });

      pgGrid.onCheck([]);
    }
  }

  function onFilter(scope, setter, items) {
    setter(scope, items);
  }

  function ctrl($scope, $attrs) {
    var name = $attrs.name.trim();
    if (name.startsWith("{{") && name.endsWith("}}")) {
      name = $parse(name.substr(2, name.length - 4))($scope);
    }

    var pgGrid = $scope.bPage.pgGrid(name);
    var currentLimit = $attrs.limit ? parseInt($attrs.limit): null;
    if (currentLimit) pgGrid.g.currentLimit = currentLimit;

    pgGrid.g.labelName = ($attrs.labelName || "").trim();
    pgGrid.g.rownum = ($attrs.rownum || "rownum").trim();
    pgGrid.g.path = $scope.bPage.path;
    pgGrid.g.storageKey = pgGrid.g.path + ':pg_' + pgGrid.getName();
    pgGrid.g.withCheckbox = !!$attrs.onCheck;
    pgGrid.g.isStatic = $attrs.static != undefined;

    if ($attrs.filteredData) {
      pgGrid.g.onFilter = _.partial(onFilter, $scope, $parse($attrs.filteredData).assign);
    }

    $scope.bPage.qLoaded.promise.then(pgGrid.reload);

    this.pgGrid = pgGrid;
  }

  function compile(element) {
    var innerHTML = element.html();
    element.empty();

    function link(scope, elem, attr, ctrl) {
      var pgGrid = ctrl.pgGrid;
      pgGrid.reinitSettings();
      pgGrid.uncheckAll(_.partial(uncheckAll, pgGrid, elem));
      pgGrid.onCheck = _.partial(composeOnCheck, scope, parse(attr.onCheck), pgGrid.checkedApi, _);

      if (attr.countableColumns){
        pgGrid.g.countableColumns = splitNames(attr.countableColumns);
      }

      function applyProps(elem) {
        elem.find('.tbl').css({
          'min-height': elem.data().min_height,
          'max-height': elem.data().max_height
        }).find('.tbl-header,.tbl-body').css({
          'min-width': elem.data().width
        });
      }

      if (!_.isUndefined(attr.freeColEnabled)) {
        scope.$watch(attr.freeColEnabled, function(status) {
          if (status === true || status === false) {
            pgGrid.freeColEnabled(status);
          }
        });
      }

      function justifyBtnPosition(elem, tbl) {
        elem.css('bottom', Math.max(tbl.offsetHeight - tbl.clientHeight - 2, 0));
      }

      function makeScrollToTop(tbl) {
        let isScrollToTopEnabled = false;
        let hParent = tbl.parent();
        let tblBody = tbl.find(".tbl-body");
        let scrollToTopBtn = $('<button type="button" class="tbl-scroll-to-top-btn"><i class="fas fa-chevron-up"></i></button>')
        .on("click", function() {
          tbl.get(0).scrollTo({
            top: 0,
            behavior: "smooth"
          });
        });
        let scrollToTopContainer = $('<div class="scroll-to-top-container"></div>').append(scrollToTopBtn).append('<div class="scroll-to-top-shadow"></div>');
        tbl.on("scroll", function() {
          if (!isScrollToTopEnabled && tbl.scrollTop() > 450) {
            tblBody.addClass('tbl-body-scroll-active');
            scrollToTopContainer.addClass("visible");
            isScrollToTopEnabled = true;
          } else if (isScrollToTopEnabled && tbl.scrollTop() <= 450) {
            isScrollToTopEnabled = false;
            tblBody.removeClass('.tbl-body-scroll-active')
            scrollToTopContainer.removeClass("visible");
          }

          if (isScrollToTopEnabled) justifyBtnPosition(scrollToTopContainer, tbl.get(0));
        });

        hParent.append(scrollToTopContainer);
      }

      function enableResizers(table, grid) {
        var headerCells = table.find('.tbl-header-cell:not(.tbl-empty-cell)');
        var resizingCell,
            startOffset,
            sizeArray,
            path = grid.g.storageKey,
            search = getSearch(grid.g);

        docMouseMove = function (e) {
          if (resizingCell) {
            if (!hasTouch) e.preventDefault();
            sizeArray = table.css("grid-template-columns").split(" ");
            let tableWidth = table.find('.tbl-header').outerWidth();
            let pos = startOffset + getX(e);
            let calc = Math.max(pos / tableWidth * 100, 4); // 4 - the largest int, which is smaller than the size of col-1
            if (tableWidth) sizeArray[resizingCell.index()] = parseFloat(calc).toFixed(2) + "%";
            table.css("grid-template-columns", sizeArray.join(" "));
          }
        };
        docMouseUp = function () {
          if (resizingCell) {
            $(resizingCell).removeClass("active");
            table.css("user-select", "auto");
            if (grid.g.withCheckbox) sizeArray.shift();
            let cols = _.map(grid.g.cols, function(col, idx) {
              return {
                name: col.name,
                size: sizeArray[idx]
              };
            });
            grid.g.cols = cols;
            saveSetting({
              setting_code: path,
              setting_value: { cols, search }
            });
            resizingCell = undefined;

            let scrollToTopBtn = table.parent().find(".scroll-to-top-container");
            justifyBtnPosition(scrollToTopBtn, table.get(0));
          }
        };
        _.each(headerCells, function(th) {
          let grip = $('<div></div>').addClass("tbl-cell-resizer");
          grip.on(downEvents, function (e) {
            e.preventDefault();
            resizingCell = $(this).closest('.tbl-header-cell');
            $(resizingCell).addClass("active");
            table.css("user-select", "none");
            startOffset = parseFloat(th.offsetWidth - getX(e));
          });
          if (hasTouch) grip.addClass("resizer-active");
          $(th).append(grip);
        });
        $(document).on(moveEvents, docMouseMove).on(upEvents, docMouseUp);
      }

      function onNavigate(event, dir) {
        var nextElem;
        var currElem = $(event.target).closest('.tbl-cell');
        var colIndex = currElem.index();

        function navigate(nextElement) {
          if (nextElement.length < 1 || !nextElement.attr('ng-on-eventfocus')) return;
          var myEvent = new CustomEvent('eventfocus', { detail: nextElement });
          nextElement[0].dispatchEvent(myEvent);
        };

        function getNextRow(cell, dir) {
          if (dir == 'down') {
            return cell.closest('.tbl-row').next();
          } else {
            return cell.closest('.tbl-row').prev();
          };
        };

        if (dir == 'down' || dir == 'up') {
          var nextRow = getNextRow(currElem, dir);

          if (nextRow.length) {
            nextElem = $(nextRow.find('.tbl-cell').get(colIndex));
            navigate(nextElem);
          };

        } else if (dir == 'right') {
          nextElem = currElem.next();
          navigate(nextElem);

        } else if (dir == 'left') {
          nextElem = currElem.prev();
          navigate(nextElem);
        };
      };

      function run() {
        scope.$watch(function() {
          return pgGrid.g.fetchingId;
        }, function(val) {
          if (val) {
            parseElems(scope, innerHTML, attr, scope.bPage.translate, pgGrid);
            elem.html(pgGrid.drawHtml(attr.iterator));
            elem.show();

            $compile(elem.contents())(scope);

            var table = elem.find('.tbl');
            enableResizers(table, pgGrid);
            table.hScroll();
            makeScrollToTop(table);

            if (pgGrid.g.hasNavigate) {
              function navigator(event) {
                let [rightMetaKey, rightModifierKeyCode] = getKeyCodeFromKey(pgGrid.g.naviRight);
                let [leftMetaKey, leftModifierKeyCode] = getKeyCodeFromKey(pgGrid.g.naviLeft);
                let [upMetaKey, upModifierKeyCode] = getKeyCodeFromKey(pgGrid.g.naviUp);
                let [downMetaKey, downModifierKeyCode] = getKeyCodeFromKey(pgGrid.g.naviDown);

                if (!!upModifierKeyCode && (!upMetaKey || event[upMetaKey + 'Key']) && event.keyCode === upModifierKeyCode) {
                  table.trigger('cell-navigate-up', [event]);

                } else if (!!leftModifierKeyCode && (!leftMetaKey || event[leftMetaKey + 'Key']) && event.keyCode === leftModifierKeyCode) {
                  table.trigger('cell-navigate-left', [event]);

                } else if (!!rightModifierKeyCode && (!rightMetaKey || event[rightMetaKey + 'Key']) && event.keyCode === rightModifierKeyCode) {
                  table.trigger('cell-navigate-right', [event]);

                } else if (!!downModifierKeyCode && (!downMetaKey || event[downMetaKey + 'Key']) && event.keyCode === downModifierKeyCode) {
                  table.trigger('cell-navigate-down', [event]);
                }
              }

              table.on('cell-navigate-up', (event, e) => onNavigate(e, 'up'));
              table.on('cell-navigate-down', (event, e) => onNavigate(e, 'down'));
              table.on('cell-navigate-right', (event, e) => onNavigate(e, 'right'));
              table.on('cell-navigate-left', (event, e) => onNavigate(e, 'left'));

              table.on('keydown', (event) => {
                navigator(event);
              });
            }

            applyProps(elem.data({
              width: attr.minWidth ?? 880,
              min_height: attr.minHeight ?? 100,
              max_height: attr.maxHeight ?? 600,
            }));
          }
        });
      }

      if (_.has(attr, "useDefaultSetting")) run();
      else pgGrid.loadSetting(pgGrid.g.storageKey).finally(run);

      scope.$watchCollection(attr.localData, function(val) {
        if (val) {
          pgGrid.uncheckAll();
          pgGrid.refresh(val);
        }
      });

      elem.on('click', 'input[bcheckall]', _.partial(whenCheckAll, elem, scope, pgGrid.onCheck, _));
      elem.on('click', '.tbl .tbl-body .checkbox input[data-bcheck]', _.partial(whenCheck, elem, scope, pgGrid.onCheck, _));
      elem.on('dblclick', '.tbl .tbl-body .checkbox', function (e) {
        e.stopPropagation();
      });
      elem.on('click', '.tbl .tbl-header .tbl-header-cell .tbl-header-txt[sort]', _.partial(whenSort, scope, elem, pgGrid.onSort, pgGrid, _));

      scope.bPage.qLoaded.promise.then(_.partial(pgGrid.onCheck, []));
      scope.g = pgGrid.g;
      scope.$on('$destroy', function() {
        $(document).off(moveEvents, docMouseMove);
        $(document).off(upEvents, docMouseUp);
      });
    }

    return {
      post: link
    }
  }

  return {
    scope: true,
    controller: ctrl,
    compile: compile
  }
});
biruni.directive('bPgController', function (bConfig, bFrame, bForms, bPgGridFilter, $parse) {

  function ctrl($scope, $attrs) {
    var name = $attrs.name.trim();

    if (name.startsWith("{{") && name.endsWith("}}")) {
      name = $parse(name.substr(2, name.length - 4))($scope);
    }

    this.pgname = name;
  }

  function link(scope, elem, attr, ctrl) {
    var pgGrid = scope.bPage.pgGrid(ctrl.pgname);
    var g = pgGrid.g;

    var o = {
      bConfig: bConfig,
      startPage: 1
    };

    function onSearchKeyPress($event) {
      if ($event.charCode == 13) {
        pgGrid.onSearch();
        pgGrid.uncheckAll();
      }
    }

    function slidePageNo(shift) {
      if (shift && hasNextPage()) {
        g.pageNumbers = _.range(1, g.maxPage + 1);
        o.startPage++;
      } else if (!shift && hasPrevPage()) {
        o.startPage--;
      }
    }

    function hasPrevPage() {
      return o.startPage > 1;
    }

    function hasNextPage() {
      return o.startPage <= g.maxPage - 5;
    }

    function changePage(pg) {
      g.currentPage = parseInt(pg);
      pgGrid.changeCurrentPage();
      pgGrid.uncheckAll();
      g.pageNumbers = _.range(1, g.maxPage + 1);
    }

    function changeLimit(limit) {
      g.currentLimit = parseInt(limit);
      if (g.currentLimit != g.lastLimit) {
        pgGrid.refresh();
        pgGrid.uncheckAll();
        g.currentPage = Math.trunc((g.currentPage - 1) * g.lastLimit / g.currentLimit) + 1;
        g.lastLimit = g.currentLimit;
        g.lastPage = g.currentPage;
        g.pageNumbers = _.range(1, g.maxPage + 1);
      }
    }

    function openPgGridSetting() {
      pgGrid.uncheckAll();
      bFrame.openDialog(bForms.GRID_SETTING, {
        name: pgGrid.getName(),
        isPgGrid: true
      }, function () {
        pgGrid.loadSetting(pgGrid.g.storageKey).finally(function () {
          pgGrid.reinitSettings();
          pgGrid.reload();
        });
      }, 
      { 
        path: pgGrid.g.path,
      });
    }

    function hasFilter() {
      return g.filterFields.length > 0;
    }

    function openFilter() {
      bPgGridFilter.open(pgGrid);
    }

    function filterClass() {
      return !_.isEmpty(g.filters) ? 'btn-warning' : 'btn-default';
    }

    scope.g = g;
    scope.o = o;
    scope.hasFilter = hasFilter;
    scope.openFilter = openFilter;
    scope.filterClass = filterClass;
    scope.changePage = changePage;
    scope.changeLimit = changeLimit;
    scope.hasPrevPage = hasPrevPage;
    scope.hasNextPage = hasNextPage;
    scope.slidePageNo = slidePageNo;
    scope.onSearchKeyPress = onSearchKeyPress;
    scope.openPgGridSetting = openPgGridSetting;
  }

  return {
    scope: true,
    controller: ctrl,
    link: link,
    templateUrl: 'b-pg-controller.html'
  }
});
biruni.directive('bDropzone', function($parse, $templateCache, $compile, bRequire, bConfig, $q) {

  function link(scope, elem, attr) {
    bRequire.load('compressor').then(() => {
      var $bDropzone = {
        files: [],
        clear: function() {
          this.files = [];
        }
      };

      var
      onSelect = $parse(attr.onSelect),
      modelSetter = attr.model ? $parse(attr.model).assign : '',
      quality = !_.isUndefined(attr.quality) ? attr.quality : 0.6,
      size = !_.isUndefined(attr.size) ? attr.size : 2_097_152, // 2 MB
      template = _.template($templateCache.get('b-dropzone.html'))({
        drag_drop_text: attr.dragDropText || bConfig.langs.dz_drop_file,
        multiple: !_.isUndefined(attr.multiple) ? `ngf-multiple="true"` : '',
        keep: !_.isUndefined(attr.keep) ? `ngf-keep="true"` : '',
        accept: attr.accept ? `ngf-accept="${attr.accept}"` : ''
      });

      $(elem).append($compile(template)(scope));

      let matches = ['image/png', 'image/jpg', 'image/jpeg', 'image/webp', 'image/gif'];

      function uploadFile($files) {
        if ($files) {
          $q.all(_.map($files, x => {
            let promise = $q((resolve, reject) => {
              if(_.contains(matches, x.type)) {
                new Compressor(x, {
                  quality: quality,
                  convertTypes: ['image/png', 'image/jpg', 'image/jpeg', 'image/webp', 'image/gif'],
                  convertSize: size,
                  success(result) {
                    let oldSize = x.size;
                    let lastModified = x.lastModified;
                    if(oldSize != result.size) {
                      lastModified = moment();
                    }
                    x = new File([result], x.name, {lastModified: lastModified, type: result.type});
                    x.oldSize = oldSize;
                    resolve(x);
                  },
                  error(err) {
                    console.error(err.message);
                    reject(err);
                  }
                });
              } else {
                resolve(x);
              }
            })
            return promise;
          })).then((result) => {
            $files = result;
            $bDropzone.files = $files;
            var value = _.isUndefined(attr.multiple) ? _.first($files) : $files;

            if (onSelect) {
              onSelect(scope, { $file: value });
            }
            if (modelSetter) {
              modelSetter(scope, value);
            }
          })
        }
      }

      scope.$bDropzone = $bDropzone;
      scope.uploadFile = uploadFile;
    });
  }

  return {
    restrict: 'E',
    scope: true,
    link: link
  };
});
biruni.directive('bCropper', function($parse, $templateCache, $compile, bRequire, bConfig) {

  function ctrl($scope, $attrs) {
    bRequire.load('cropper');
  }

  function link(scope, elem, attr, ctrl) {
    const o = {},
        photoSetter = $parse(attr.bCropper).assign,
        onSelect = $parse(attr.onSelect),
        crop_id = _.uniqueId('cropper'),
        template = $templateCache.get('b-cropper.html'),
        $parent = scope.page.$content;

    o.no_photo = 'page/resource/biruni/no_image.png';
    o.square = attr.square != 'false';
    o.round = attr.round != 'false';

    $parent.append($compile(`<form name="${crop_id}">${template}</form>`)(scope));

    const $modal = $parent.find(`form[name="${crop_id}"]`).find('.modal');

    function destroyCropper() {
      if (o.cropper) {
        o.cropper.destroy();
        $modal.find('.crop_main_photo').removeAttr('src');
      }
    }

    function uploadPhoto($file) {
      if ($file) {
        o.photo = $file;
        destroyCropper();
      }
      $modal.find('b-dropzone').scope().$bDropzone.clear();
    }

    function showModal() {
      $modal.modal('show');
    }

    function closeModal() {
      $modal.modal('hide');
      destroyCropper();
      o.photo = undefined;
    }

    function setCordinates(event, key, width) {
      let imgWidth = (width * o.cropper.getImageData().naturalWidth / event.detail.width).toFixed(4);
      let coef = (event.detail.width / width).toFixed(4);

      $modal.find('.' + key).css({
        'width': (imgWidth) + 'px',
        'margin-left': '-' + Math.abs((event.detail.x / coef).toFixed(4)) + 'px',
        'margin-top': '-' + Math.abs((event.detail.y / coef).toFixed(4)) + 'px'
      });
    }

    function changePhoto() {
      const image = $modal.find('.crop_main_photo')[0];
      const cropper = new Cropper(image, {
        aspectRatio: o.square ? 1/1 : NaN,
        viewMode: 1,
        crop(event) {
          setCordinates(event, 'crop_large', 100);
          setCordinates(event, 'crop_medium', 60);
          setCordinates(event, 'crop_small', 35);
        },
        movable: false,
        guides: false,
        rotatable: false,
        checkOrientation: false,
        zoomable: false,
        background: false,
        center: false,
        ready() {
          if(o.round) {
            $('.cropper-view-box, .cropper-face').css({'border-radius': '50%'});
          }
        }
      });
      o.cropper = cropper;
    }

    function saveCrop() {
      if (o.cropper && o.photo) {
        let file, name;
        name = _.isUndefined(o.photo.name) ? String(moment) + '.jpg' : o.photo.name; 
        o.cropper.getCroppedCanvas().toBlob(function(blob) {
          file = new File([blob], name, {lastModified: moment(), type: blob.type});
          scope.$apply(x => {
            photoSetter(scope, file);
            if (onSelect) onSelect(scope, { $file: file });
          });
          closeModal();
        }, attr.extension || 'image/jpeg', 0.6);
      } else {
        scope.$apply(x => {
          photoSetter(scope, undefined);
          if (onSelect) onSelect(scope, { $file: undefined });
        });
        closeModal();
      }
    }

    $modal.find('.crop_main_photo').on('load', function() {
      changePhoto();
    });

    elem.on('click', showModal);

    o.bConfig = bConfig;
    o.uploadPhoto = uploadPhoto;
    o.saveCrop = saveCrop;
    o.closeModal = closeModal;
    scope.o = o;
  }

  return {
    restrict: 'A',
    scope: true,
    link: link,
    controller: ctrl
  }
});biruni.directive('bValidate', function () {
  function link(scope, elem, attr, ctrl) {
    scope.$watch(attr.bValidate, function(options) {
      if (options) {
        if (typeof options === "object") {
          _.each(options, (v, k) => ctrl.$setValidity(k, v));
        } else {
          ctrl.$setValidity('bValidate', options);
        }
      }
    });
  }

  return {
    restrict: 'A',
    require: 'ngModel',
    link: link
  }
});biruni.directive('bHotkey', function() {

  function link(scope, elem, attr) {
    var standart = {
      add: 'alt+a',
      edit: 'alt+e',
      save: 'alt+s',
      finish: 'ctrl+enter',
      refresh: 'alt+r',
      close: 'alt+q',
      delete: 'alt+d'
    };

    scope.page.bindHotkey(standart[attr.bHotkey] || attr.bHotkey, function() {
      if (!elem.prop('disabled') && elem.is(':visible')) {
        elem.trigger('click');
      }
    });
  }

  return {
    restrict : 'A',
    link: link,
    scope: true
  }
});
biruni.directive('bOffcanvas', function ($timeout) {

  function link(scope, elem) {
    var toggler = $('<button type="button">').addClass('offcanvas-toggle-btn').appendTo(elem);
    toggler.append($('<i class="fa fa-arrow-right">'));
    toggler.click(function() {
      var parent = $(this).parent();
      parent.find('.card-body').fadeOut(0);
      parent.toggleClass('active');
      $(this).find('i').toggleClass('fa-arrow-right').toggleClass('fa-arrow-left');

      setTimeout(function() {
        parent.find('.card-body').fadeIn(300);
      }, 300);
    });

    $('#kt_wrapper').children('.content,#kt_footer').addClass(['pl-27', 'pl-lg-0']);

    scope.$on('$destroy', function() {
      $('#kt_wrapper').children('.content,#kt_footer').removeClass(['pl-27', 'pl-lg-0']);
    });
  }

  return {
    restrict : 'C',
    link : link
  }
});biruni.directive('bContentMaker', function(bRequire, bConfig, bContentMaker) {
  function link(scope, elem) {
    bRequire.load('ace', 'ace-mode-html', 'html2pdf').then(() => {
      var maker = bContentMaker();
      var editor = ace.edit(elem.find('.workspace .editor')[0], { mode: 'ace/mode/html' });
      editor.on('change', () => editor.curOp && editor.curOp.command.name ? scope.text = editor.getValue() : null);

      function run(type) {
        maker
          .render(scope.text, scope.data)
          .then(html => {
            if (type == 'pdf') {
              html2pdf(html);
              elem.find('.preview .content').html(html);
            } else if (type == 'tab') {
              let new_tab = window.open();
              new_tab.document.write(html);
              new_tab.focus();
            } else {
              elem.find('.preview .content').html(html);
            }
          });
      }

      scope.$watch('text', value => editor.setValue(value || ''));

      scope.langs = bConfig.langs;
      scope.run = run;
    });
  }

  return {
    restrict: 'E',
    scope: {
      text: '=',
      data: '='
    },
    link: link,
    templateUrl: 'b-content-maker.html'
  };
});biruni.directive('bDynamicField', function($parse) {
  function validate(_$b) {
    _$b.q.is_valid = true;
    let fields = _$b.d?.dynamic_fields;
    assert(_.isEmpty(_$b.d?.filled_field_id) || !isNaN(+_$b.d?.filled_field_id), `INVALID PROPERTY "filled_field_id". filled_field_id is not a number!`, invalidate);
    // validation of fields
    assert(Array.isArray(fields), `INVALID PROPERTY "dynamic_fields". dynamic_fields is not iterable!`, invalidate);
    _.each(fields, (f, i) => {
      assert(!isNaN(+f.field_id), `INVALID FIELD PROPERTY "field_id". dynamic_fields[${i}].field_id is not a number!`, invalidate);
      assert(typeof f.name === 'string', `INVALID FIELD PROPERTY "name". dynamic_fields[${i}].name is not a string!`, invalidate);
      assert(_.contains(['N', 'T', 'S', 'C', 'D', 'M'], f.type), `INVALID FIELD PROPERTY "type". dynamic_fields[${i}].type is invalid!`, invalidate);
      assert(_.isEmpty(f.required) || _.contains(['Y', 'N'], f.required), `INVALID FIELD PROPERTY "required". dynamic_fields[${i}].required is invalid!`, invalidate);
      assert(_.isEmpty(f.order_no) || !isNaN(+f.order_no), `INVALID FIELD PROPERTY "order_no". dynamic_fields[${i}].order_no is not a number!`, invalidate);
      // validation of options
      if (_.contains(['C', 'D', 'M'], f.type)) {
        assert(Array.isArray(f.options), `INVALID FIELD PROPERTY "options". dynamic_fields[${i}].options is not iterable!`, invalidate);
        _.each(f.options, (o, j) => {
          assert(!isNaN(+o.option_id), `INVALID OPTION PROPERTY "option_id". dynamic_fields[${i}].options[${j}].option_id is not a number!`, invalidate);
          assert(typeof o.option_name === 'string', `INVALID OPTION PROPERTY "option_name". dynamic_fields[${i}].options[${j}].name is not a string!`, invalidate);
          assert(_.isEmpty(o.option_order) || !isNaN(+o.option_order), `INVALID OPTION PROPERTY "option_order". dynamic_fields[${i}].options[${j}].option_order is not a number!`, invalidate);
          assert(_.isEmpty(o.preselected) && typeof o.preselected !== 'number' || _.contains(['Y', 'N'], o.preselected), `INVALID OPTION PROPERTY "preselected". dynamic_fields[${i}].options[${j}].preselected is not valid!`, invalidate);
        });
        // validation of value options
        assert(_.isEmpty(f.value_options) || Array.isArray(f.value_options), `INVALID FIELD PROPERTY "value_options". dynamic_fields[${i}].value_options is not iterable!`, invalidate);
        if (!_.isEmpty(f.value_options)) {
          _.each(f.value_options, vo => assert(!isNaN(+vo), `INVALID FIELD PROPERTY "value_options". dynamic_fields[${i}].value_options is not Array<Number>!`, invalidate));
        }
      }
      // validation of values
      if (f.type === 'N') {
        assert(_.isEmpty(f.value) || !isNaN(+f.value), `INVALID FIELD PROPERTY "value". dynamic_fields[${i}].value is not a number!`, invalidate);
      } else {
        assert(_.isEmpty(f.value) && typeof f.value !== 'number' || typeof f.value === 'string', `INVALID FIELD PROPERTY "value". dynamic_fields[${i}].value is not a string!`, invalidate);
      }
    });

    function invalidate() {
      _$b.q.is_valid = false
    }
  }

  function init(_$b) {
    validate(_$b);
    _.each(_$b.d.dynamic_fields, (field, index) => {
      if (!_.contains(['C', 'D', 'M'], field.type)) return;
      let is_edit = !!_$b.d?.filled_field_id;
      let is_touched = _.any(field.options, o => o.selected);

      if (is_edit || is_touched) {
        _.each(field.options, o => {
          if (_.contains(field.value_options, o.option_id)) o.selected = 'Y';
          else o.selected = 'N';
        });
      } else {
        _.each(field.options, o => o.selected = o.preselected);
      }
      field.options = _.sortBy(field.options, o => +o.option_order);

      if (field.type === 'C') {
        _$b.onChangeCheckbox(index);

      } else if (field.type === 'M') {
        field.selected_options = [];
        _.each(field.options, option => {
          if (option.selected === 'Y') {
            _$b.onChangeDropdownMultiple(option, index);
          }
        });
      } else if (field.type === 'D') {
        _.any(field.options, option => {
          if (option.selected !== 'Y') return false;
          _$b.onSelectDropdown(option, index);
          return true;
        });
      }
    });

    _$b.d.dynamic_fields = _.sortBy(_$b.d.dynamic_fields, x => +x.order_no);
  }

  function ctrl($scope, $attrs) {
    let d = {}, q = {};
    q.col_size = +attrValue('size') || 24;
    if (q.col_size < 1 || q.col_size > 24) q.col_size = 24;
    q.row_col_count = Math.floor(24 / q.col_size) || 1;
    q.mode = isAttrTruthy('editable') ? 'E' : 'V';
    d = attrValue('localData');

    $scope.$watch($attrs.localData, localData => {
      if (_.isUndefined(localData) || _.isEmpty(localData)) return;
      $scope._$bFields.d = d = localData;
      init($scope._$bFields);
    });

    function attrValue(key) {
      return $parse($attrs[key])($scope);
    }

    function isAttrTruthy(key) {
      if (_.has($attrs, key)) {
        let value = attrValue(key);
        return _.isUndefined(value) || value === '' || !!value;
      } else return false;
    }

    function onChangeCheckbox(field_index) {
      let field = d.dynamic_fields[field_index];
      field.value = '';
      field.value_options = _.chain(field.options)
                              .filter(o => o.selected === 'Y')
                              .pluck('option_id')
                              .compact()
                              .value();
    }

    function onSelectDropdown(option, field_index) {
      let field = d.dynamic_fields[field_index];
      _.each(field.options, o => {
        if (o.option_id == option.option_id) o.selected = 'Y';
        else o.selected = 'N';
      });
      field.selected_option_id = option.option_id;
      field.selected_option_name = option.option_name;
      field.value = '';
      field.value_options = _.compact([option.option_id]);
    }

    function onChangeDropdownMultiple(option, field_index) {
      let field = d.dynamic_fields[field_index];
      let index = _.findIndex(field.selected_options, option);
      
      if (index >= 0) { 
        option.selected = 'N';
        field.selected_options.splice(index, 1);
      } else {
        option.selected = 'Y';
        field.selected_options.push(option);
      }

      field.value = '';
      field.value_options = _.chain(field.selected_options)
                              .pluck('option_id')
                              .compact()
                              .value();
      field.selected_option_names = _.chain(field.selected_options)
                                      .pluck('option_name')
                                      .compact()
                                      .value();
    }

    $scope._$bFields = {
      d,
      q,
      onChangeCheckbox,
      onSelectDropdown,
      onChangeDropdownMultiple,
      contains: _.contains
    };
  }

  return {
    restrict: 'E',
    scope: true,
    controller: ctrl,
    templateUrl: 'b-dynamic-field.html'
  }
});
// Modifying 3rd party UI-SELECT directive to control the opening of a dropdown menu
biruni.directive('uiSelect', function($timeout) {
  return {
    link: function($scope, elem) {
      let hintElement;

      function controlHint() {
        var elemRect = elem[0].getBoundingClientRect();
        var scrollParent = elem.scrollParent();

        scrollParent.scroll(function(ev) {
          hintElement.position({
            of: elem,
            my: 'left top',
            at: 'left bottom',
            collision: 'fit flipfit',
            within: $(this)
          });
        });
        hintElement.css({
          opacity: 1,
          width: elemRect.width
        });
        hintElement.position({
          of: elem,
          my: 'left top',
          at: 'left bottom',
          collision: 'fit flipfit'
        });
      }

      $scope.$watch('$select.open', function(v) {
        if (v === true) {
          hintElement = elem.find('.ui-select-choices').css({ opacity: 0 });
          $timeout(controlHint);
        }
      });
    }
  }
});(function () {
  if ('localStorage' in window && window['localStorage'] !== null) {
    let lang = JSON.parse(window.localStorage.getItem('session_lang')) || { code: '' };
    if (lang.code) {
      $.ajaxSetup({
        headers: { lang_code: lang.code },
      });
    }
  }

  if (/\?.*-mobile=true.*$/.test(window.location.hash)) {
    $(document).ready(function () {
      $(document).find('body').find('#kt_header').remove();
      $(document).find('body').find('#kt_header_mobile').remove();
      $(document).find('body').find('#kt_footer').remove();
      $(document).find('body').find('#kt_wrapper').css('padding-top', '12.5px');
      $(document).find('.subheader').remove();
    });

    if (/\?.*-lang_code=.*$/.test(window.location.hash)) {
      let params = new URLSearchParams(window.location.hash.split('?')[1]);
      let lang_code = params.get('-lang_code');

      if (lang_code) {
        $.ajaxSetup({
          headers: { lang_code: lang_code },
        });
      }
    }

    window.sessionPromise = $.post('b/biruni/m:session', { with_menu: 'N' });
  } else {
    window.sessionPromise = $.post('b/biruni/m:session');
  }

  window.onSessionResolve = new Promise(resolve => (window.sessionResolver = resolve));
})();

window.onbeforeunload = function () {
  window.scrollTo(0, 0);
};
moment.locale('en');
document.cookie = "_lrt=; Max-Age=-99999999; Path=/";

var app = angular.module('app', ['biruni', 'ngSanitize', 'ui.select', 'ui.tree',
      'blockUI', 'ngDraggable', 'ui.sortable']);
 app.config(function (uiSelectConfig) {
   uiSelectConfig.theme = 'bootstrap';
 });

app.config(function (blockUIConfig) {
  blockUIConfig.requestFilter = function (config) {
    return !config.unblock;
  };
  blockUIConfig.template = `<div class="block-ui-overlay"></div>
  <div class="block-ui-message-container" aria-live="assertive" aria-atomic="true">
    <img src="assets/img/loading.svg"/>
  </div>`;
});

app.config(function ($httpProvider) {
  $httpProvider.interceptors.push(function() {
    return {
      'request': function(config) {
        var cookie = "_lrt=" + _.now();
        var path = (document.location || {}).pathname;
        if (path) cookie += "; path=" + path;
        document.cookie = cookie;
        return config;
       }
    }
  });
});

app.config(function($locationProvider) {
  $locationProvider.hashPrefix('');
});app.factory('AppHotkey', function () {
  var key_pressed = {};
  var key_set_getters = [];
  var paused = false;

  function keydown(ev) {
    if (paused || key_pressed[ev.key]) return;

    key_pressed[ev.key] = true;

    _.each(key_set_getters, key_set_getter => {
      _.each(key_set_getter(), hotkey=> hotkey.apply(ev));
    });
  }

  function keyup() {
    key_pressed = {};
  }

  function on() {
    $(document).on('keydown', keydown).on('keyup', keyup);
  }

  function off() {
    $(document).off('keydown', keydown).off('keyup', keyup);
  }

  function addKeySetGetter(key_set_getter) {
    if (typeof(key_set_getter) == "function") {
      key_set_getters.push(key_set_getter);
    }
  }

  function removeKeySetGetter(key_set_getter) {
    if (typeof(key_set_getter) == "function") {
      let index = _.indexOf(key_set_getters, key_set_getter);
      if (index > -1) key_set_getters.splice(index, 1);
    }
  }

  function pause(pause) {
    paused = pause;
  }

  return {
    on: on,
    off: off,
    pause: pause,
    addKeySetGetter: addKeySetGetter,
    removeKeySetGetter: removeKeySetGetter
  };
});
app.factory('AppSocket', function($http, $rootScope, bRoutes, bConfig, bConstants) {
  let si = {}, ws = null;

  function formatTime(time) {
    moment.locale(bConfig.langCode());
    const date = moment(time, 'DD.MM.YYYY HH:mm:ss'),
        today = moment();
    if (date.year() === today.year()
        && date.month() === today.month()
        && date.date() === today.date()) {
          return date.format('LT');
    }
    return date.format('MMM D').charAt(0).toUpperCase() + date.format('MMM D').slice(1);
  }

  function loadNotifications() {
    si.notifications = [];
    $http.post(bRoutes.NOTIFICATIONS, null, {
      unblock : true
    }).then(function (d) {
      const mapType = {
            'P': 'label-primary',
            'S': 'label-success',
            'I': 'label-info',
            'W': 'label-warning',
            'D': 'label-danger'
          },
          mapIcon = {
            'P': 'fa-plus',
            'S': 'fa-thumbs-o-up',
            'I': 'fa-info',
            'W': 'fa-warning',
            'D': 'fa-bell'
          };
      si.notifications = _.map(d.data, function (item) {
        item.className = mapType[item.type];
        item.classIcon = mapIcon[item.type];
        item.time = formatTime(item.time);
        return item;
      });
    });
  }

  function loadAlerts() {
    si.alerts = [];
    $http.post(bRoutes.ALERTS, null, {
      unblock : true
    }).then(function (d) {
      _.each(d.data, function (message) {
        $.notify({
          message : message
        }, {
          placement : {
            from : 'bottom'
          }
        });
      });
    });
  }

  function open(__si) {
    si = __si;

    loadNotifications();
    loadAlerts();

    function getUrl() {
      const l = window.location;
      return ((l.protocol === 'https:') ? 'wss://' : 'ws://') + l.host + l.pathname;
    }
    ws = new WebSocket(getUrl() + 'broadcast');

    ws.onopen = function (ev) {}
    ws.onmessage = function (ev) {
      const d = JSON.parse(ev.data);
      switch (d.type) {
        case 'alert':
          if (d.message) {
            $.notify({
              message : d.message
            }, {
              type: d.message_type || 'info',
              placement : {
                from : d.message_placement || 'bottom',
              }
            });
          }
          break;
        case 'notification': loadNotifications(); break;
        case 'load_alert': loadAlerts(); break;
      }
      $rootScope.$broadcast(bConstants.BROADCAST_ALERT_EVENT, d.data || {});
      if (d.mute !== 1) {
        document.getElementById('biruniBeep').play();
      }
    };
    ws.onclose = function (ev) {};
  }

  function close() {
    if (ws != null && ws.constructor === WebSocket) ws.close();
  }

  return {
    open: open,
    close: close
  }
});
app.factory('AppSetting', function($rootScope, $http, bFonts, bRoutes, bHttp, bStorage) {
  const settings = {
    start_kind: 'D',
    init_project: '',
    init_filial: '',
    init_form: ''
  };

  function save(key) {
    if ($rootScope.is_debug) {
      bStorage.json(location.pathname + key, { value: settings[key] });
    } else {
      bHttp.unblockOnce();
      $http.post(bRoutes.SAVE_USER_SETTING, {
        head: 'Y',
        setting_code: key, 
        setting_value: settings[key]
      });
    }
  }

  function prepareMenuForms() {
    settings.forms = [];

    let filial = _.findWhere(settings.filials, {id: settings.init_filial});

    if (!filial) filial = _.first(settings.filials);

    _.each(filial.menus, function(m) {
      if (!m.menu_id) return;
      push(m, '');
      _.each(m.menus, function(x) {
        push(x, m.menu_id);
        _.each(x.forms, function(f) {
          push(f, x.menu_id, _.uniqueId(100));
        });
      });
    });

    function push(item, parent_id, menu_id) {
      settings.forms.push({
        menu_id: menu_id || item.menu_id,
        disabled: !item.form,
        form: item.form,
        name: item.name,
        parent_id: parent_id
      });
    }

    if (settings.init_form) {
      const form = _.findWhere(settings.forms, {form: settings.init_form});
      settings.init_form_id = form ? form.menu_id : '';
    }

    if (!settings.init_form_id) {
      _.any(settings.forms, function(f) {
        if (f.form) {
          settings.init_form_id = f.menu_id;
          return true;
        }
      });
    }
  }

  function prepareInitSettings(si) {
    let project = _.findWhere(si.projects, { code: settings.init_project }) || _.first(si.projects);
    settings.projects = si.projects;
    settings.init_project = project.code;

    settings.filials = project.filials;
    settings.init_filial = _.findIndex(settings.filials, { id: settings.init_filial }) > -1 ? settings.init_filial : _.first(settings.filials).id;

    prepareMenuForms();

    settings.changeStartKind = function() {
      save('start_kind');
      saveInitSettings();
    }

    settings.changeProject = function() {
      const project = _.findWhere(si.projects, {code: settings.init_project});
      settings.filials = project.filials;
      prepareMenuForms();
      saveInitSettings();
    }

    settings.changeFilial = function() {
      prepareMenuForms();
      saveInitSettings();
    }

    settings.selectForm = function(row) {
      settings.init_form = row.form;
      saveInitSettings();
    }

    function saveInitSettings() {
      save('init_project');
      save('init_filial');
      save('init_form');
    }
  }

  return {
    settings: settings,
    save: save,
    prepareInitSettings: prepareInitSettings,
    set: function(new_settings) {
      _.each(new_settings, function(val, key) {
        if (val) {
          settings[key] = val;
        }
      });
    }
  };
});
app.factory('AppSessionTimer', function($http, $timeout, bConfig, bRoutes) {
  let timer = {
    eps: 100, // measured by milliseconds
    max_wait_time: 30000,
    max_inactive_time: 1800000,
    elem: $('#closing-session'),
    indexes: {}
  };

  _.range(timer.max_wait_time / 1000).forEach(x => timer.indexes[x] = null);
  _.range(8).forEach(x => timer.indexes[Math.floor(timer.max_wait_time / 8000 * x) + 1] = x);
  _.range(timer.max_wait_time / 1000 - 1, -1).forEach(x => timer.indexes[x] = _.isNull(timer.indexes[x]) ? timer.indexes[x + 1] : timer.indexes[x]);

  let isOpen = function() { return false; }

  function sessionOut() {
    $timeout(function() {
      bConfig.sessionOutFn()(false);
    });
  }

  function toggleDialog(show){
    if (show) {
      // Prepare "closing-session" and open timeout progress
      timer.elem.show();
      timer.elem.find('.cs-dialog.cs-timeout').show();
      $('body').addClass('blur');

      setTimeout(function () {
        timer.elem.find('.cs-backdrop,.cs-dialog.cs-timeout').addClass('open');
        timer.elem.find('.btn-primary').focus();
      }, 50);
    } else {
      // Hide timeout progress
      timer.elem.find('.cs-lock').removeClass('open').hide();
      timer.elem.find('.cs-timeout').removeClass('open');
      timer.elem.find('.cs-block-item').removeClass('closed');
    }
  }

  function prepareCS(action) {
    if (action == 'on') {
      // Clear "closing-session"
      timer.elem.find('.cs-dialog').removeClass('open').hide();
      timer.elem.find('.cs-backdrop').removeClass('open');
      timer.elem.hide();
      $('body').removeClass('blur');
    } else {
      // Prepare "closing-session"
      timer.elem.show();
      timer.elem.find('.cs-dialog.cs-timeout').hide();
      $('body').addClass('blur');
      // Open lock screen
      setTimeout(function(){
        timer.elem.find('.cs-backdrop').addClass('open');
        timer.elem.find('.cs-dialog.cs-lock').show();

        setTimeout(function(){
          timer.elem.find('.cs-dialog.cs-lock').addClass('open');
        }, 50);
      });
    }
  }

  function requestSessionInfo() {
    $http.get(bRoutes.SESSION_INFO).then(function(result) {
      result = parseInt((result.data || "").trim());
      if (result) {
        timer.max_inactive_time = (result - 10) * 1000;
        sessionAliveTimer('on');
      } else {
        sessionOut();
      }
    });
  }

  function getCookie(key) {
    try {
      return document.cookie.split(';')
                     .filter(x => x.trim().split('=')[0] === key)
                     .pop().trim().split('=').pop();
    } catch (ex) {
      return null;
    }
  }

  function getRemainSessionTime() {
    var lrt = parseInt(getCookie('_lrt'));
    if (!lrt) return null;
    return _.now() - lrt;
  }

  function controlWarnTimer(action) {
    toggleDialog(false);

    clearInterval(timer.warn);

    if (action != 'on') return;

    if (!timer.origin_title) timer.origin_title = document.title;

    toggleDialog(true);

    let max_time = timer.max_wait_time / 1000;

    function executing() {
      let rem = getRemainSessionTime();
      if (rem + timer.max_wait_time + timer.eps <= timer.max_inactive_time) {
        sessionAliveTimer('on');
      } else if (rem <= timer.max_inactive_time) {
        let wait_time = Math.floor((timer.max_inactive_time - rem) / 1000);
        if (document.hidden) {
          document.title = wait_time + " " + bConfig.langs.session_left;
        } else {
          if (timer.origin_title) document.title = timer.origin_title;
          timer.elem.find('.seconds').text(wait_time);
        }
        let index = timer.indexes[wait_time];

        if (!_.isUndefined(index)) {
          let block = timer.elem.find('.cs-block-item').get(index);
          $(block).addClass('closed');
        }
      } else {
        clearInterval(timer.warn);
        sessionOut();
      }
    }
    executing();
    timer.warn = setInterval(executing, 1000);
  }


  function sessionAliveTimer(action) {
    document.title = timer.origin_title || document.title;
    timer.origin_title = null;

    prepareCS(action);
    controlWarnTimer('off');
    clearInterval(timer.alive);

    if (action == 'on' && isOpen()) {
      var interval = 0;
      function ctrl() {
        var rem = getRemainSessionTime();
        if (rem + timer.max_wait_time + timer.eps <= timer.max_inactive_time) {
          var _interval = Math.min(timer.max_inactive_time - rem - timer.max_wait_time - timer.eps, 10000);
          if (_interval != interval) {
            interval = _interval;
            clearInterval(timer.alive);
            timer.alive = setInterval(ctrl, interval);
          }
        } else if (rem <= timer.max_inactive_time) {
          clearInterval(timer.alive);
          controlWarnTimer('on');
        } else {
          sessionOut();
        }
      }
      ctrl();
    }
  }

  return function(__isOpen) {
    isOpen = __isOpen;
    return {
      on: _.partial(sessionAliveTimer, 'on'),
      off: _.partial(sessionAliveTimer, 'off'),
      stay: requestSessionInfo
    }
  }
});
app.factory('AppSession', function ($rootScope, $http, $location, $q, $timeout, AppSocket, AppSessionTimer, AppSetting, bConfig, bFrame, bForms, bRoutes, bStorage, bSessionStorage) {
  var si = {
    user: {},
    filial: {},
    project: {},
    filials: [],
    projects: [],

    rePassword: '',
    reError: '',

    notifications: {},
    messages: {}
  },
  settings = {},
  broadcast = null,
  sessionDone = $q.defer(),
  sessionOpened = false,
  timer = AppSessionTimer(isOpenSession),
  setFilialOnce = setFilial; //_.once(setFilial);

  var setFilialCallbacks = [];

  function registerSetFilialObserver(callback) {
    setFilialCallbacks.push(callback);
  }

  function notifySetFilialObservers(data) {
    angular.forEach(setFilialCallbacks, function(callback) {
      callback(data);
    });
  }

  if (('BroadcastChannel' in window) && window['BroadcastChannel'] !== null) {
    broadcast = new window.BroadcastChannel("session");

    broadcast.onmessage = function(e) {
      $timeout(function() {
        var data = e.data.split('|');
        if (data[1] !== window.location.pathname) return;
        data = data[0];
        if (data === 'open' && !sessionOpened) {
          si.rePassword = '';
          si.reError = '';
          openSession(true);
        } else
        if (data === 'lock' && sessionOpened) {
          sessionOut(true);
        } else
        if (data == 'logout' && sessionOpened) {
          // this condition processs is closed temporary.
          // logout();
        }
      });
    }
  }

  bConfig.sessionOutFn(sessionOut);
  bConfig.subscriptionEndFn(subscriptionEnd);
  bConfig.sessionConflictsFn(sessionConflicts);
  bConfig.onLocationChange(tryLocationChange);

  onInit();

  function isOpenSession() {
    return sessionOpened;
  }

  function notifySession(d) {
    if (document.hidden || !broadcast) return;
    broadcast.postMessage && broadcast.postMessage(d + "|" + window.location.pathname);
  }

  function avatarUrl(sha, big) {
    if (sha) {
      return bRoutes.LOAD_IMAGE + '&' + $.param({
        sha: sha,
        width: big ? 700 : 100,
        height: big ? 700 : 100,
        cache: true
      });
    }
    return '';
  }

  function openSession(notify) {
    sessionOpened = true;
    $http.defaults.headers.post.user_id = si.user.user_id;
    $http.defaults.headers.post.lang_code = si.lang_code;
    bConfig.langCode(si.lang_code);

    $('body>.b-session-closed').addClass('hide');
    $('body>.b-session-opened').removeClass('hide');

    // var blockUi = $('body>.block-ui-container>.block-ui-message-container');
    // blockUi.find('.block-ui-message').remove();
    // blockUi.find('.block-ui-after').css('display', 'block');

    AppSocket.open(si);
    timer.on();
    if (!notify) notifySession('open');
  }

  function evalMenus(list) {
    let menus = _.mapRows(list, ['menu_id', 'parent_id', 'name', 'order_no']);
    return _.chain(menus)
            .filter(x => !x.parent_id)
            .sortBy(x => x.order_no ? parseInt(x.order_no): -Infinity)
            .map(function(m) {
              return {
                menu_id: m.menu_id,
                name: m.name,
                menus: _.chain(menus)
                        .filter(x => x.parent_id == m.menu_id)
                        .sortBy(x => x.order_no ? parseInt(x.order_no): -Infinity)
                        .value()
              }
            }).value();
  }

  function evalForms(menus, forms, prefix) {
    menus = angular.copy(menus);
    forms = _.chain(forms)
             .mapMatrix(['menu_id', 'form', 'name', 'add_form', 'add_form_name'])
             .each(x => {
               x.url = "#" + prefix + x.form;
               x.add_form_url = "#" + prefix + (x.add_form || x.form);
             }).value();

    return _.filter(menus, m => {
              m.menus = _.filter(m.menus, c => {
                c.forms = _.filter(forms, x => x.menu_id == c.menu_id);
                return c.forms.length > 0;
              });
              return m.menus.length > 0;
            });
  }

  function setProjectConfig(project) {
    let defConfig = {
      company: {
        name: "Green White Solutions LLC",
        foundation: "2012"
      },
      about: "http://greenwhite.uz/"
    };

    let storageKey = `project_config:${project.code}`;
    let config = bStorage.json(storageKey);
    let defer = $q.defer();
    config = null;
    if (!config || config.code != project.code) {
      $http.get(`page/config/${project.code}/config.json`).then(function(result) {
        result.data.code = project.code;
        bStorage.json(storageKey, result.data);
        defer.resolve(result.data);
      });
    } else {
      defer.resolve(config);
    }

    defer.promise.then(function(config) {
      let index = (config || {}).index || {};
      project.config = deepDefaults(index, defConfig);
    });
  }

  function setSubscriptionInfo(d) {
    let info = {};
    info.has_warning = d.has_warning == 'Y';
    info.day_count = d.day_count;
    info.warning_message = d.warning_message;

    if (d.day_count > 3) info.warning = true;
    else info.danger = true;

    return info;
  }

  function loadPlugin(project) {
    if (!project.web_plugin_file) return;
    var script = document.createElement('script');
    script.src = `page/resource/${project.code}/${project.web_plugin_file}?_=20250417T125`;
    script.async = true;
    document.head.appendChild(script);
  }

  function onSessionDone(d) {
    bSessionStorage.remove('locked');
    moment.locale(d.lang_code);

    si.user = d.user;
    si.user.prefix = si.user.name.substr(0, 1).toUpperCase();
    si.avatar = avatarUrl(d.user.photo_sha);
    si.avatar_locked = avatarUrl(d.user.photo_sha, true);
    si.lang_code = d.lang_code;
    si.company_name = d.company_name;
    si.isAdmin = d.is_admin == 'Y';
    si.current_year = moment().format('YYYY');
    si.warning_message = d.warning_message;

    si.projects = _.map(d.projects, function(project) {
      let menus = evalMenus(project.menus);
      project.hash = _.padStart(project.hash, 2, "0");
      let item = {
        hash: project.hash,
        code: project.code,
        name: project.name.toLowerCase(),
        intro_form: project.intro_form,
        subscription_end_form: project.subscription_end_form,
        subscription_infos: setSubscriptionInfo(project.subscription_infos || {}),
        filials: _.chain(project.filials)
                  .mapRows(['id', 'name'])
                  .map(filial => {
                    return {
                      id: filial.id,
                      name: filial.name,
                      menus: evalForms(menus, project[filial.id], bConfig.pathPrefix(project.hash, filial.id))
                    }
                  }).value(),
        contact_info: _.isEmpty(project.contact_info) ? null : project.contact_info,
        config: {}
      };

      setProjectConfig(item);
      loadPlugin(project);

      return item;
    });

    // Settings
    if ($rootScope.is_debug) {
      let prefix = location.pathname;
      AppSetting.set({
        start_kind: bStorage.json(prefix + 'start_kind').value,
        init_project: bStorage.json(prefix + 'init_project').value,
        init_filial: bStorage.json(prefix + 'init_filial').value,
        init_form: bStorage.json(prefix + 'init_form').value
      });
    } else {
      AppSetting.set(d.settings);
    }

    AppSetting.prepareInitSettings(si);

    settings = AppSetting.settings;

    // set user's default project and filial
    si.project = getInitProject();
    si.filial = getInitFilial();

    bConfig.countryCode(d.country_code);
    bConfig.setLangs(d.biruni_langs);
    bFrame.close.title = bConfig.langs.close;

    sessionDone.resolve('');
    openSession();
    tryLocationChange();

    timer.stay();

    let user_info = {
      // company
      company_code: d.company_code,
      company_name: d.company_name,
      // filial
      filial_id: si.filial.id,
      filial_name: si.filial.name,
      // user
      user_id: d.user.user_id,
      name: d.user.name,
      photo_sha: d.user.photo_sha,
      is_admin: si.isAdmin,
      // system
      lang_code: d.lang_code,
    };

    window.sessionResolver(user_info);
  }

  function getInitProject() {
    if (settings.init_project) {
      return _.findWhere(si.projects, { code: settings.init_project }) || _.first(si.projects);
    } else {
      return _.first(si.projects);
    }
  }

  function getInitFilial() {
    if (settings.init_filial) {
      return _.findWhere(si.project.filials, { id: settings.init_filial }) || _.first(si.project.filials);
    } else {
      return _.first(si.project.filials);
    }
  }

  function saveSessionUrl() {
    let val = _.pick(bFrame.parseUrl(), 'param', 'path');
    bSessionStorage.set('session_url', JSON.stringify(val));
    bSessionStorage.remove('locked');
  }

  function onSessionFail(error) {
    if (!bSessionStorage.get('locked')) saveSessionUrl();
    sessionDone.reject('');

    if (!_.isNull(error)) {
      sessionOpened = false;
      $http.post(bRoutes.CHECK_SESSION).then(() => window.location.replace('unauthenticated_session_details.html'), () => window.location.replace('login.html'));
    }
  }

  function onInit() {
    let parsed_url = bFrame.parseUrl();
    if (parsed_url.type) sessionPromise.then(onSessionDone, onSessionFail);
    else logout();
  }

  function setFilial(project_hash, filial_id) {
    let project = _.findWhere(si.projects, { hash: project_hash });

    assert(project, "project not found", x => { si = {}; sessionOpened = false; });

    let filial = !filial_id? _.first(project.filials) : _.find(project.filials, { id: filial_id });

    assert(filial, "filial or project not found", x => { si = {}; sessionOpened = false; });

    si.project = project;
    si.filial = filial;

    bConfig.auths({
      project_code: project.code,
      project_hash: project.hash,
      filial_id: filial.id,
      user_id: si.user.user_id,
      lang_code: si.lang_code
    });

    $http.defaults.headers.post.project_code = project.code;
    $http.defaults.headers.post.filial_id = filial.id;

    $http.defaults.headers.common.project_code = project.code;
    $http.defaults.headers.common.filial_id = filial.id;

    notifySetFilialObservers({project_code: project.code, filial_id: filial.id});
  }

  function lockScreen() {
    $http.post(bRoutes.LOGOUT);
    bSessionStorage.set('locked', true);
    sessionOut();
  }

  function sessionOut(notify) {
    if (!sessionOpened) {
      logout();
      return;
    }
    sessionOpened = false;
    if (!notify) notifySession('lock');
    timer.off();
    AppSocket.close();

    if (si.user && si.user.login) {
      si.rePassword = '';
      si.reError = '';
    } else logout();
  }

  function sessionStay() {
    timer.stay();
  }

  function subscriptionEnd() {
    bFrame.openReplace(si.project.subscription_end_form);
  }

  function sessionConflicts() {
    bFrame.openReplace(bForms.SESSION_CONFLICTS);
  }

  function logout() {
    sessionOpened = false;
    AppSocket.close();
    $http.post(bRoutes.LOGOUT);
    window.location.replace('login.html');
  }

  function logoutAndForget() {
    sessionOpened = false;
    AppSocket.close();
    $http.post(bRoutes.LOGOUT_AND_FORGET);
    window.location.replace('login.html');
  }

  function introPage(pr_code) {
    let project_code = pr_code || si.project.code;
    let val = _.findWhere(si.projects, {code: project_code});
    if (val && val.intro_form) return val.intro_form;
    return bForms.DASHBOARD;
  }

  function getSessionUrl() {
    let session_url = window.sessionStorage.getItem('session_url');
    bSessionStorage.remove('session_url');

    if (session_url) {
      let parsed_url = JSON.parse(session_url);
      let project = _.findWhere(si.projects, { hash: parsed_url.param['-project_hash'] });

      if (project) {
        let filial = _.findWhere(project.filials, { id: parsed_url.param['-filial_id'] });

        if (filial) {
          let param = _.omit(parsed_url.param, '-project_hash');
          param['-project_code'] = project.code;
          return {
            url: parsed_url.path,
            search: param,
          };
        } else return '';
      } else return '';
    } else return '';
  }

  function redirectToInit() {
    let url = bConfig.pathPrefix(si.project.hash, si.filial.id);
    let session_url = getSessionUrl();

    if (session_url) {
      url = session_url.url;
      $location.search(session_url.search);
    } else if (settings.start_kind == 'C' && settings.init_form) {
      url += settings.init_form;
    } else {
      url += introPage(si.project.project_code);
    }

    $location.path(url);
    $location.replace();
  }

  function normalizeLocation(parsed_url) {
    let project = _.findWhere(si.projects, {code: parsed_url.param["-project_code"]});
    if (project) {
      let url = bConfig.pathPrefix(project.hash, parsed_url.param["-filial_id"]) +
                parsed_url.url;
      $location.path(url);
      $location.search(parsed_url.pure_param);
      $location.replace();
    } else logout();
  }

  function redirectPasswordChange(project_hash, filial_id) {
    let url = bConfig.pathPrefix(project_hash, filial_id) +
              bForms.CHANGE_PASSWORD;
    $location.path(url);
    $location.replace();
  }

  function forceLocationChange() {
    let parsed_url = bFrame.parseUrl();
    let param = parsed_url.param;
    switch (parsed_url.type) {
      case "ready":
        if (si.user.password_change_required == 'Y' && parsed_url.path !== bForms.CHANGE_PASSWORD)
          redirectPasswordChange(param["-project_hash"], param["-filial_id"]);
        else {
          setFilialOnce(param["-project_hash"], param["-filial_id"]);
          bFrame.onLocationChange(parsed_url);
        }
        break;
      case "redirect": redirectToInit(); break;
      case "normalize": normalizeLocation(parsed_url); break;
      default: logout();
    }
  }

  function tryLocationChange() {
    if (!sessionOpened) return;
    try {
      $('html').animate({ scrollTop: 0 }, 200);
      forceLocationChange();
    } catch (e) {
      console.error(e);
      sessionOut();
    }
  }

  return {
    si: si,
    sessionDone: sessionDone.promise,
    introPage: introPage,
    registerSetFilialObserver: registerSetFilialObserver,
    setFilial: setFilial,
    openSession: openSession,
    logout: logout,
    logoutAndForget: logoutAndForget,
    lockScreen: lockScreen,
    sessionStay: sessionStay
  }
});
app.factory('AppSearch', function($http, bConfig, AppSession, AppHotkey, bRoutes, bHttp, bQuery, bFrame, bRequire, $timeout) {
  const search = {
    // used inside
    info: {},
    elem: $('#search-content'),
    opened: false,
    moment: '',
    result_index: 0,
    max_limit: 0,
    result_rows: $(''),
    // used outside
    ready: false,
    searching: false,
    header: '',
    headers: [],
    value: '',
    sources: [],
    searchKeyDown: searchKeyDown,
    getAllResultsLength: getAllResultsLength,
    resetSearchValue: resetSearchValue,
    openSearch: openSearch,
    closeSearch: closeSearch,
    openBarcode: openBarcode,
    closeBarcode: closeBarcode,
    changeSearchValue: changeSearchValue,
    selectHeader: selectHeader,
    sourceOpen: sourceOpen,
    showMore: showMore,
  };

  bConfig.closeSearch = search.closeSearch;
  let scannerDetectionLoaded = false;

  AppSession.registerSetFilialObserver(function(data) {
    prepareSearchInfo(data.project_code);
  });

  function prepareSearchInfo(project_code) {
    if (!search.info[project_code]) {
      search.info[project_code] = [];

      $http.post(bRoutes.SEARCH_INFO, null).then(function(result) {
        search.info[project_code] = _.map(result.data.sources, function(x) {
          let data = {
            name: x.name,
            code: x.source_code,
            enabled: true,
            open: function(data) {
              bFrame.open(x.form, _.object([x.field_id], [data[x.field_id]]));
            },
            field_name: x.field_name,
            view_fields: _.mapRows(x.view_fields, ['key', 'value'])
          };

          let column = _.union([x.field_id, x.field_name], x.search_fields, _.pluck(x.view_fields, 'key'));

          data.query = bQuery(bRoutes.SEARCH_QUERY)
            .column(column)
            .param({source_code: x.source_code})
            .searchFields(x.search_fields)
            .sort(data.field_name)
            .limit(5);

          return data;
        });

        // Forms
        let data = {
          name: bConfig.langs.sb_result_forms,
          code: 'forms',
          enabled: true,
          open: function(data) {
            bFrame.open(data.form);
          },
          field_name: 'name',
          view_fields: []
        };
        data.query = bQuery(bRoutes.SEARCH_FORM_QUERY)
          .column('form', 'name', 'code')
          .searchFields('form', 'name', 'code')
          .limit(10);

        search.info[project_code].unshift(data);

        // Barcodes
        data = {
          name: '',
          code: 'barcodes',
          enabled: true,
          custom_search: true,
          open: function(data) {
            bFrame.open(data.form, _.object([data.id_field], [data.id]));
          },
          field_name: 'name',
          view_fields: []
        };
        data.query = bQuery(bRoutes.SEARCH_BARCODE_QUERY).column('name', 'id', 'id_field', 'form');

        search.info[project_code].unshift(data);

        setSearch(project_code);
      });
    } else {
      setSearch(project_code);
    }
  }

  function setSearch(project_code) {
    if (search.project_code === project_code) return;

    search.project_code = project_code;
    search.sources = search.info[project_code] || [];
    search.headers = [];
    _.each(search.sources, function(x) {
      if (!x.custom_search) {
        search.headers.push(_.pick(x, 'code', 'name'));
      }
    });
    search.headers.unshift({
      code: '',
      name: bConfig.langs.sb_result_all
    });
  }

  function selectHeader(code) {
    search.header = code;
    $timeout(function() {
      search.result_rows = search.elem.find('.cursor-row');
      search.max_limit = search.result_rows.length - 1;
      search.result_index = 0;
      scrollToIndex();
    });
  }

  function getAllResultsLength() {
    if (search.sources && search.sources.length) {
      return search.sources.reduce((acc, cur) => (cur?.result?.length ?? 0) + acc, 0);
    }
    return 0;
  }

  function resetSearchValue() {
    search.value = "";
    onChangeSearchValue();
  }

  function searchUpdateResult(source, ignore_indexing, moment, is_barcode) {
    bHttp.unblockOnce();
    source.query.pageNo(source.pageNo);
    source.query.fetch().then(function(result) {
      search.searching = false;

      if (search.moment != moment || !source.enabled) return;
      source.maxPage = result.maxPage;
      source.pageNo = source.query.pageNo();
      source.hasMore = source.maxPage > source.pageNo;
      source.result = _.union(source.result, result.table);
      source.hasResult = source.result.length > 0;

      if (is_barcode) {
        if (source.result.length === 1) {
          search.sourceOpen(source, source.result[0]);
        } else {
          search.no_barcode_result = true;
        }
      } else {
        _.each(source.result, function(row) {
          _.each(row, function(val, key) {
            row.source_name = source.name;
            if (source.code === 'forms' && key === 'form') return;
            if (val.toLowerCase().indexOf(search.value.toLowerCase()) > -1) {
              row.found = key;
              row[key] = val.replace(RegExp('(' + search.value + ')', 'gi'), '<strong>$1</strong>');
            } else if (!val) {
              row[key] = `<i class="transparent">${bConfig.langs.sb_not_specified}</i>`;
            }
          });
        });
      }

      search.ready = true;
      $timeout(function() {
        search.result_rows = search.elem.find('.cursor-row');
        search.max_limit = search.result_rows.length - 1;
        if (!ignore_indexing) {
          search.result_index = 0;
          scrollToIndex();
        }
      });
    });
  }

  function onBarCodeChange() {
    search.searching = true;
    search.moment = _.now();
    let source = search.sources[0];

    if (source) {
      source.maxPage = 0;
      source.pageNo = 1;
      source.hasMore = false;
      source.result = [];
      source.hasResult = false;

      source.query.param({ search_value: search.value });
      searchUpdateResult(source, false, search.moment, true);
    }
  }

  function onChangeSearchValue() {
    let indexed = false;
    search.searching = true;
    search.moment = _.now();
    _.each(search.sources, function(source) {
      source.maxPage = 0;
      source.pageNo = 1;
      source.hasMore = false;
      source.result = [];
      source.hasResult = false;

      if (search.value && (!search.header || source.code == search.header) && source.code !== 'barcodes') {
        if (source.custom_search) {
          source.query.param({ search_value: search.value });
        } else {
          source.query.searchValue(search.value);
        }
        searchUpdateResult(source, indexed, search.moment);
        indexed = true;
      }
    });
  }

  var changeSearchValueDebounced = _.debounce(onChangeSearchValue, 1000);

  function changeSearchValue() {
    search.searching = true;
    changeSearchValueDebounced();

    if (search.value.length == 0) {
      resetSearchValue();
      search.ready = false;
    }
  }

  function searchKeyDown(event) {
    if (event.keyCode === 13) {
      search.result_rows.filter('.active').click();
    } else if (event.keyCode === 38 && search.result_index > 0) {
      event.preventDefault();
      search.result_index--;
      scrollToIndex();
    } else if (event.keyCode === 40 && search.result_index < search.max_limit) {
      event.preventDefault();
      search.result_index++;
      scrollToIndex();
    } else if (event.altKey && event.keyCode >= 49 && event.keyCode <= 57) {
      event.preventDefault();
      const ind = Math.min(event.keyCode - 49, search.headers.length - 1);
      selectHeader(search.headers[ind].code);
    }
  }

  function scrollToIndex() {
    const s = search.result_rows.removeClass('active').get(search.result_index);
    if (!s) return;
    $(s).addClass('active');
    s.scrollIntoView({ behavior: "smooth", block: "nearest" });
  }

  function showMore(source) {
    search.searching = true;
    source.pageNo++;
    searchUpdateResult(source, true, search.moment);
    focusSearch();
  }

  function sourceOpen(source, row) {
    source.open(row);
    closeSearch();
  }

  function openSearch() {
    activateScannerDetection();
    $('#searchModal').modal('show');
    search.elem.addClass('open').css('display', 'block');
    search.opened = true;
    search.ready = false;
    AppHotkey.pause(true);
  }

  function closeSearch() {
    closeBarcode();
    search.elem.removeClass('open');
    $('#searchModal').modal('hide');
    search.opened = false;
    search.value = '';
    search.ready = false;
    AppHotkey.pause(false);
  }

  function detectBarcode(event, data) {
    if (data.string.length === 13 || true) {
      search.value = data.string;
      onBarCodeChange();
      search.value = '';
    }
  }

  function addScannerDetectionEvent() {
    $('body').scannerDetection();
    $('body').bind('scannerDetectionComplete', detectBarcode);
  }

  function activateScannerDetection() {
    if (scannerDetectionLoaded) {
      addScannerDetectionEvent();
    } else {
      scannerDetectionLoaded = true;
      bRequire.load('jquery-scannerdetection').then(addScannerDetectionEvent);
    }
  }

  function openBarcode() {
    activateScannerDetection();
    search.no_barcode_result = false;
    AppHotkey.pause(true);
  }

  function closeBarcode() {
    $('body').scannerDetection(false);
    $('#barcodeModal').modal('hide');
    AppHotkey.pause(false);
  }

  function focusSearch() {
    $timeout(function() {
      search.elem.find('.search-form').find('.form-control').focus();
    });
  }

  search.elem.on('mouseenter', '.cursor-row', function(ev) {
    search.result_index = $('.cursor-row').index($(this));
    scrollToIndex();
  });

  $('#searchModal').on('shown.bs.modal', focusSearch).on('hidden.bs.modal', closeSearch);
  $('#barcodeModal').on('hidden.bs.modal', closeBarcode);

  return search;
});
app.factory('AppFeedback', function(bRoutes, $http) {
  var $modal = $('#sendFeedback');

  var feedback = {
    open,
    send,
    changeRate
  }

  function setInitialData() {
    feedback.sended = false;
    feedback.rate_invalid = false;
    feedback.rate = '';
    feedback.type = 'S';
    feedback.note = '';
    feedback.anonymous = 'N';
  }

  function open() {
    setInitialData();
    var form = $modal.scope().form;

    form.$setPristine();
    form.$setUntouched();

    $modal.modal('show');
  }

  function changeRate(rate) {
    feedback.rate = rate;
    feedback.rate_invalid = false;
  }

  function formValid(form) {
    form.$setSubmitted();
    return form.$valid;
  }

  function send() {
    if (formValid($modal.scope().form) && feedback.rate != '') {
      var data = _.pick(feedback, 'rate', 'type', 'anonymous', 'note');
      $http.post(bRoutes.SEND_FEEDBACK, data).then(() => {
        feedback.sended = true;
      });
    } else {
      feedback.rate_invalid = true;
    }
  }

  return feedback;
});app.controller('AppCtrl', function ($scope, $http, $timeout, bConfig, bFrame, bAlert, bConfirm, bGridFilter, bPgGridFilter, bSortForm, bHttp, bForms, bRoutes, bHotkey, bPreview, bFaceCropper, AppSession, AppSearch, AppHotkey, AppSetting, AppFeedback, $sanitize) {
  const a = {
    bConfig: bConfig,
    bFrame: bFrame,
    bAlert: bAlert,
    bConfirm: bConfirm,
    bGridFilter: bGridFilter,
    bPgGridFilter: bPgGridFilter,
    bSortForm: bSortForm,
    bPreview: bPreview,
    bFaceCropper: bFaceCropper,
    session: AppSession,
    search: AppSearch,
    settings: AppSetting.settings,
    feedback: AppFeedback,
    openProfile: openForm(bForms.PROFILE),
    openChangePassword: openForm(bForms.CHANGE_PASSWORD),
    openFileManager: openForm(bForms.FILE_MANAGER),
    openNotificationList: openForm(bForms.NOTIFICATION_LIST),
    openNotification: openForm(bForms.NOTIFICATION),
    openTaskList: openForm(bForms.TASK_LIST),
    openSibling: openSibling,
    openAddTask: openAddTask,
    changeFilial: changeFilial,
    setProject: setProject,
    prepareProjects: prepareProjects,
    relogin: relogin,
    reloginData: reloginData,
    logout: logout,
    logoutAndForget: logoutAndForget,
    selectFont: selectFont,
    applyTheme: applyTheme,
    applyBackground: applyBackground,
    changeGridType: changeGridType,
    goBack: goBack,
    toggleFavorite: toggleFavorite,
    sendAccessRequest: sendAccessRequest,
    showAccessRequest: showAccessRequest,
    showSetAccess: showSetAccess,
    showCustomTranslate: showCustomTranslate,
    setAccess: setAccess,
    customTranslate: customTranslate,
    openDashboard: openDashboard,
    showPageBar: showPageBar,
    toggleFullScreen: toggleFullScreen,
    openSidebar: openSidebar,
    closeSidebar: closeSidebar,
    globalHotkey: globalHotkey,
    setMenuPosition: setMenuPosition,
    hasTour: hasTour, 
    showTour: showTour,
    isFavorite: false,
    temp_project: null,
    quick_sidebar: {},
    hotkeys: {},
    searchFilial: {name: ''}
  };

  $scope.a = a;

  bFrame.setFavorite = function (value) {
    $scope.a.isFavorite = value;
  }

  applyHotkeys();

  function openDashboard() {
    bFrame.openClear(AppSession.introPage());
  }

  var sidebarCanOpen = true;

  function sidebarKeydown(event) {
    if (event.keyCode == 27) closeSidebar();
  }

  function openSidebar(tab) {
    if (!sidebarCanOpen) return;
    var sidebarOverlay = $('<div>').addClass('quick-sidebar-overlay modal-backdrop show').on('click', closeSidebar);
    var sidebar = $('#kt_quick_sidebar').addClass('tab-open').after(sidebarOverlay).focus();
    sidebar.on('keydown', sidebarKeydown);
    sidebarCanOpen = false;
    a.quick_sidebar[tab] = true;
    AppHotkey.pause(true);
  }

  function closeSidebar() {
    var sidebar = $('#kt_quick_sidebar').removeClass('tab-open');
    $timeout(function () {
      sidebarCanOpen = true;
    }, 300);
    $('.quick-sidebar-overlay').remove();
    a.quick_sidebar = {};
    sidebar.off('keydown', sidebarKeydown);
    AppHotkey.pause(false);
  }

  function setMenuPosition(event) {
    var $toggle = $(event.target).closest('.menu-toggle')
    var $menu = $toggle.next('.menu-submenu');
    if ($menu.length > 0) {
      var min = $(window).width() - $menu.width() - 10;
      $menu.css('left', Math.min($toggle.offset().left, min));
    }
  }

  function toggleFullScreen() {
    if (document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement) {
      if (document.cancelFullScreen) {
        document.cancelFullScreen();
      } else if (document.mozCancelFullScreen) {
        document.mozCancelFullScreen();
      } else if (document.webkitCancelFullScreen) {
        document.webkitCancelFullScreen();
      }
    } else {
      var elem = document.documentElement;
      if (elem.requestFullScreen) {
        elem.requestFullScreen();
      } else if (elem.mozRequestFullScreen) {
        elem.mozRequestFullScreen();
      } else if (elem.webkitRequestFullScreen) {
        elem.webkitRequestFullScreen();
      }
    }
  }

  function openAddTask(getForm) {
    if (getForm) {
      var url = bFrame.parseUrl();
      bFrame.open(bForms.TASK_ADD, null, _, {
        form: url.path,
        form_param: url.pure_param
      });
    } else {
      openForm(bForms.TASK_ADD)();
    }
  }

  function openForm(uri) {
    return function (param) {
      bFrame.openClear(uri, param);
    }
  }

  function reloginData() {
    return {
      login: AppSession.si.user.login,
      password: AppSession.si.rePassword
    };
  }

  async function shaSHA1(text) {
    const hash = await CryptoJS.SHA1(text);
    return hash.toString();
  }

  function requestLogin(data) {
    $http.post(bRoutes.LOGIN, data).then(function done(d) {
      let res = d.data;
      if (res.status === 'logged_in') {
        AppSession.openSession();
        const p = _.last(bFrame.pages);
        if (p && p.qLoaded.promise.$$state.status === 0) {
          bFrame.close();
        }
      } else {
        window.sessionStorage.setItem("token", res.token);
        window.sessionStorage.setItem("expires_in", res.expires_in);
        window.location.replace(res.context_path + '/login_with_otp.html?sent=true');
      }
    }, function fail(e) {
      AppSession.si.reError = bConfig.langs.password_is_incorrect;
    });
  }

  function relogin() {
    let reloginData = a.reloginData();
    if (reloginData.password) {
      shaSHA1(reloginData.password).then(function (hash) {
        reloginData.password = hash;
        requestLogin(reloginData);
      });
    } else {
      requestLogin(reloginData);
    }
  }

  function logout(force) {
    if (force) {
      AppSession.logout();
    } else {
      bConfirm.confirm(bConfig.langs.confirm_logout, AppSession.logout);
    }
  }

  function logoutAndForget(force) {
    if (force) {
      AppSession.logoutAndForget();
    } else {
      bConfirm.confirm(bConfig.langs.confirm_logout_and_forget, AppSession.logoutAndForget);
    }
  }

  function setProject(project, f) {
    a.temp_project = project;
  }

  var enableProjectHover = _.once(function () {
    $('.menus>.project-list').click(function (ev) {
      ev.stopPropagation();
    }).find('a').click(function () {
      var $this = $(this);
      var project = AppSession.si.projects[$this.index() - 1];

      // Simulate filial list update
      if (a.temp_project.hash != project.hash) {
        $('.menus>.filial-list').css('opacity', 0);
        setTimeout(function () {
          $('.menus>.filial-list').css('opacity', 1);
        }, 100);
      }

      $scope.$apply(function () {
        setProject(project);
      });

      $this.parent().children().removeClass('selected');
      $this.addClass('selected');
    });
  });

  function prepareProjects(event) {
    enableProjectHover();
    _.each(AppSession.si.projects, function (project) {
      if (project.hash == AppSession.si.project.hash) {
        setProject(project);
      }
    });
    if (AppSession.si.project.filials.length >= 10) {
      $timeout(function() {
        $(event.target).closest('.hover').find('input[name="filialSearch"]').focus();
      });
    }
  }

  function changeFilial(filial_id) {
    if (AppSession.si.project.hash != a.temp_project.hash || AppSession.si.filial.id != filial_id) {
      AppSession.setFilial(a.temp_project.hash, filial_id);
      bFrame.openClear(AppSession.introPage());
    }
  }

  function goBack(n) {
    window.history.go(- (n + 1));
  }

  function toggleFavorite() {
    var page = _.last(bFrame.pages),
      data = {};
    if (page) {
      data.url = page.formUrl;
      data.state = a.isFavorite ? 'N' : 'Y';
      bHttp.postData(bRoutes.FAVORITE, data).then(function () {
        a.isFavorite = !a.isFavorite;
      }, bAlert.open);
    }
  }

  function sendAccessRequest() {
    var page = _.last(bFrame.pages);
    if (page && showAccessRequest()) {
      bFrame.openDialog(bForms.ACCESS_REQUEST, { form: page.path });
    }
  }

  function showAccessRequest() {
    var page = _.last(bFrame.pages);
    return page && !AppSession.si.isAdmin && page.path != bForms.ACCESS_REQUEST;
  }

  function setAccess() {
    var page = _.last(bFrame.pages);
    if (page && showSetAccess()) {
      bFrame.openDialog(bForms.SET_ACCESS, { form: page.path });
    }
  }

  function showSetAccess() {
    var page = _.last(bFrame.pages);
    return page && AppSession.si.isAdmin && page.path != bForms.SET_ACCESS;
  }

  function customTranslate() {
    var page = _.last(bFrame.pages);
    if (page && showCustomTranslate()) {
      bFrame.open(bForms.CUSTOM_TRANSLATE, { form: page.path });
    }
  }

  function showCustomTranslate() {
    var page = _.last(bFrame.pages);
    return page && AppSession.si.isAdmin && page.path != bForms.CUSTOM_TRANSLATE;
  }

  function openSibling(url) {
    bFrame.open(url);
  }

  function showPageBar() {
    var bPage = _.last(a.bFrame.pages) || {};
    return bPage.show_bar;
  }

  function selectFont() {
    AppSetting.applyFont();
    AppSetting.save('user_font');
  }

  function applyTheme() {
    AppSetting.applySetting('theme');
    AppSetting.save('user_theme');
  }

  function applyBackground() {
    AppSetting.applySetting('background');
    AppSetting.save('user_background');
  }

  function changeGridType() {
    AppSetting.applySetting('grid_type');
    AppSetting.save('user_grid_type');
  }

  function globalHotkey(combination, callback) {
    assert(_.isString(combination) && combination, "Invalid global hotkey combination");

    return !a.hotkeys[combination] ? a.hotkeys[combination] = bHotkey(combination, callback, true) : a.hotkeys[combination];
  }

  function applyHotkeys() {
    globalHotkey("F2", a.search.openSearch);
    globalHotkey("alt+l", AppSession.lockScreen);

    AppHotkey.addKeySetGetter(function () {
      return a.hotkeys;
    });

    AppHotkey.addKeySetGetter(function () {
      return bFrame.pages.length > 0 ? _.last(bFrame.pages).hotkeys : {};
    });

    AppHotkey.on();
  }

  function sanitizeData(items) {
    return items.map(x => {
      return {
        element: $sanitize(x.element),
        popover: {
          title: $sanitize(x.popover.title),
          description: $sanitize(x.popover.description),
          side: $sanitize(x.popover.side),
          align: $sanitize(x.popover.align)
        }
      };
    });
  }

  function hasTour() {
    var page = _.last(bFrame.pages);
    return !_.isEmpty(page.tour); 
  }

  function showTour() {
    var page = _.last(bFrame.pages);

    if (!_.isEmpty(page.tour)){
      const driver = window.driver.js.driver;

      const driverObj = driver({
        nextBtnText: bConfig.langs.next,
        prevBtnText: bConfig.langs.previous,
        doneBtnText: bConfig.langs.done,
        showProgress: true,
  
        onPopoverRender: (popover, { config, state }) => {
          // add class for make it look like a bootstraop buttons
          let nextButton = popover.nextButton;
          nextButton.classList.add('btn', 'btn-primary');
          nextButton.style.textShadow = 'none';

          let previousButton = popover.previousButton;
          previousButton.classList.add('btn', 'btn-secondary');
          previousButton.style.textShadow = 'none';
        },
  
        steps: sanitizeData(page.tour).filter(step => step.element)
      });
      
      driverObj.drive();
    }
  }
});
angular.element(document).ready(function () {
  angular.bootstrap(document.documentElement, ['app']);

  // Prevent browser from loading a drag-and-dropped file
  $(document).on('dragover drop', function(e){
    return false;
  });
});
})();